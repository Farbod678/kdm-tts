local Util = require("Kdm/Util")

---------------------------------------------------------------------------------------------------

local Log = {
    debugEnabled = true,
    --debugEnableAll = true,
}

Log.debugPackages = {
    ["G"] = true,
    ["Action"] = true,
    ["Locations"] = true,
    ["Showdown"] = true,
    ["Hunt"] = true,
    ["Grid"] = true,
    ["Overlay"] = true,
}

---------------------------------------------------------------------------------------------------

function Log.Printf(package, fmt, ...)
    fmt = fmt or ""
    local msg = Util.SafeFormat(fmt or "", ...)
    log(Util.SafeFormat("[%s] "..fmt or "", package, ...), nil, "print")
    printToAll(Util.SafeFormat("[66aaff]"..fmt, ...))
end

---------------------------------------------------------------------------------------------------

function Log.Debugf(package, fmt, ...)
    if Log.debugEnabled and (Log.debugEnableAll or Log.debugPackages[package]) then
        fmt = fmt or ""
        local s = Util.SafeFormat("[%s] "..fmt, package, ...)
        log(s, nil, "debug")
    end
end

---------------------------------------------------------------------------------------------------

function Log.Errorf(package, fmt, ...)
    fmt = fmt or ""
    log(Util.SafeFormat("[%s] "..fmt, package, ...), nil, "error")
    broadcastToAll(Util.SafeFormat(fmt, ...))
end

---------------------------------------------------------------------------------------------------

function Log.Broadcastf(package, fmt, ...)
    fmt = fmt or ""
    log(Util.SafeFormat("[%s] "..fmt, package, ...), nil, "print")
    broadcastToAll(Util.SafeFormat(fmt, ...))
end

---------------------------------------------------------------------------------------------------

function Log.Init()
    logStyle("debug", { r = 1.0, g = 1.0, b = 1.0 }, "", "")
    logStyle("print", { r = 0.0, g = 1.0, b = 1.0 }, "", "")
    logStyle("error", { r = 1.0, g = 0.0, b = 0.0 }, "", "")
end

---------------------------------------------------------------------------------------------------

function Log.ForPackage(package)
    return {
        Printf = function(fmt, ...) Log.Printf(package, fmt, ...) end,
        Debugf = function(fmt, ...) Log.Debugf(package, fmt, ...) end,
        Errorf = function(fmt, ...) Log.Errorf(package, fmt, ...) end,
        Broadcastf = function(fmt, ...) Log.Broadcastf(package, fmt, ...) end,
        Init = Log.Init,
    }
end

---------------------------------------------------------------------------------------------------

return Log
