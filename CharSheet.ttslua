require("Kdm/Check")
local Log = require("Kdm/Log").ForPackage("CharSheet")
local Util = require("Kdm/Util")
local EventManager = require("Kdm/EventManager")
local Ui3d = require("Kdm/Ui3d")

---------------------------------------------------------------------------------------------------

local CHAR_SHEET_MAXES = {
    huntXp = 16,
    courage = 9,
    understanding = 9,
    weaponProficiencyRank = 8,
}

local CharSheet_id = 0
local CharSheet_charSheetsByObject = {}

local CharSheetClass = {}
CharSheetClass.__index = CharSheetClass

---------------------------------------------------------------------------------------------------

local function CharSheet_SetStr(charSheet, stat, value)
    assert(CheckStr(value))
    Log.Debugf("Setting %s %s to %s", charSheet.object.getGUID(), stat, value)
    charSheet[stat] = value
    charSheet[stat.."Text"]:Set(value)
    charSheet:Save()
    EventManager.FireEvent("onCharSheetChangeStat", charSheet, stat, value)
end

function CharSheetClass.Name(charSheet) return charSheet.name end
function CharSheetClass.NameOrUnnamed(charSheet) return (charSheet.name and charSheet.name != "") and charSheet.name or "Unnamed Survivor" end
function CharSheetClass.SetName(charSheet, value)
    CharSheet_SetStr(charSheet, "name", value)
    if charSheet.figurine then
        charSheet.figurine.setName(charSheet:NameOrUnnamed())
    end
end

function CharSheetClass.WeaponProficiencyType(charSheet) return charSheet.weaponProficiencyType end
function CharSheetClass.SetWeaponProficiencyType(charSheet, value) CharSheet_SetStr(charSheet, "weaponProficiencyType", value) end

---------------------------------------------------------------------------------------------------

local function CharSheet_SetNum(charSheet, stat, value)
    assert(CheckNum(value))
    Log.Debugf("Setting %s %s to %d", charSheet.object.getGUID(), stat, value)
    charSheet[stat] = value
    charSheet[stat.."Counter"]:Set(value)
    charSheet:Save()
    EventManager.FireEvent("onCharSheetChangeStat", charSheet, stat, value)
end


function CharSheetClass.Survival(charSheet) return charSheet.survival end
function CharSheetClass.SetSurvival(charSheet, value) CharSheet_SetNum(charSheet, "survival", value) end

function CharSheetClass.Insanity(charSheet) return charSheet.insanity end
function CharSheetClass.SetInsanity(charSheet, value) CharSheet_SetNum(charSheet, "insanity", value) end

---------------------------------------------------------------------------------------------------

local function CharSheet_GetModified(charSheet, stat) return charSheet[stat] + charSheet[stat.."Temporary"] + charSheet[stat.."Permanent"] end
local function CharSheet_SetModified(charSheet, stat, value)
    assert(CheckNum(value))
    Log.Debugf("Setting %s %s to %d", charSheet.object.getGUID(), stat, value)
    charSheet[stat] = value
    local modifiedValue = charSheet[stat] + charSheet[stat.."Temporary"] + charSheet[stat.."Permanent"]
    charSheet[stat.."Counter"]:Set(modifiedValue)
    charSheet:Save()
    EventManager.FireEvent("onCharSheetChangeStat", charSheet, stat, modifiedValue)
end

function CharSheetClass.Movement(charSheet) return CharSheet_GetModified(charSheet, "movement") end
function CharSheetClass.SetMovement(charSheet, value) CharSheet_SetModified(charSheet, "movement", value) end

function CharSheetClass.Speed(charSheet) return CharSheet_GetModified(charSheet, "speed") end
function CharSheetClass.SetSpeed(charSheet, value) CharSheet_SetModified(charSheet, "speed", value) end

function CharSheetClass.Accuracy(charSheet) return CharSheet_GetModified(charSheet, "accuracy") end
function CharSheetClass.SetAccuracy(charSheet, value) CharSheet_SetModified(charSheet, "accuracy", value) end

function CharSheetClass.Strength(charSheet) return CharSheet_GetModified(charSheet, "strength") end
function CharSheetClass.SetStrength(charSheet, value) CharSheet_SetModified(charSheet, "strength", value) end

function CharSheetClass.Evasion(charSheet) return CharSheet_GetModified(charSheet, "evasion") end
function CharSheetClass.SetEvasion(charSheet, value) CharSheet_SetModified(charSheet, "evasion", value) end

function CharSheetClass.Luck(charSheet) return CharSheet_GetModified(charSheet, "luck") end
function CharSheetClass.SetLuck(charSheet, value) CharSheet_SetModified(charSheet, "luck", value) end

---------------------------------------------------------------------------------------------------

local function CharSheet_SetBool(charSheet, stat, value)
    assert(CheckBoolOrNil(value))
    Log.Debugf("Setting %s %s to %s", charSheet.object.getGUID(), stat, tostring(value))
    charSheet[stat] = value
    charSheet[stat.."CheckBox"]:Set(value)
    charSheet:Save()
    EventManager.FireEvent("onCharSheetChangeStat", charSheet, stat, value)
end

function CharSheetClass.BrainInjury(charSheet) return charSheet.brainInjury end
function CharSheetClass.SetBrainInjury(charSheet, value) CharSheet_SetBool(charSheet, "brainInjury", value) end

function CharSheetClass.Male(charSheet) return charSheet.male end
function CharSheetClass.SetMale(charSheet, value) CharSheet_SetBool(charSheet, "male", value) end

function CharSheetClass.Female(charSheet) return charSheet.female end
function CharSheetClass.SetFemale(charSheet, value) CharSheet_SetBool(charSheet, "female", value) end

function CharSheetClass.LifetimeRerollAvailable(charSheet) return charSheet.lifetimeRerollAvailable end
function CharSheetClass.SetLifetimeRerollAvailable(charSheet, value) CharSheet_SetBool(charSheet, "lifetimeRerollAvailable", value) end

function CharSheetClass.LifetimeRerollUsed(charSheet) return charSheet.lifetimeRerollUsed end
function CharSheetClass.SetLifetimeRerollUsed(charSheet, value) CharSheet_SetBool(charSheet, "lifetimeRerollUsed", value) end

function CharSheetClass.SkipNextHunt(charSheet) return charSheet.skipNextHunt end
function CharSheetClass.SetSkipNextHunt(charSheet, value) CharSheet_SetBool(charSheet, "skipNextHunt", value) end

---------------------------------------------------------------------------------------------------

local function CharSheet_SetCheckBoxSequence(charSheet, stat, value)
    assert(CheckNum(value))
    Log.Debugf("Setting %s %s to %s", charSheet.object.getGUID(), stat, tostring(value))
    local oldValue = charSheet[stat] or 0
    charSheet[stat] = value
    for i = 1, value do
        charSheet[stat..i.."CheckBox"]:Set(true)
    end
    for i = value + 1, CHAR_SHEET_MAXES[stat] do
        charSheet[stat..i.."CheckBox"]:Set(false)
    end
    charSheet:Save()
    EventManager.FireEvent("onCharSheetChangeStat", charSheet, stat, value)
end

function CharSheetClass.HuntXp(charSheet) return charSheet.huntXp end
function CharSheetClass.SetHuntXp(charSheet, value) CharSheet_SetCheckBoxSequence(charSheet, "huntXp", value) end

function CharSheetClass.Courage(charSheet) return charSheet.courage end
function CharSheetClass.SetCourage(charSheet, value) CharSheet_SetCheckBoxSequence(charSheet, "courage", value) end

function CharSheetClass.Understanding(charSheet) return charSheet.understanding end
function CharSheetClass.SetUnderstanding(charSheet, value) CharSheet_SetCheckBoxSequence(charSheet, "understanding", value) end

function CharSheetClass.WeaponProficiencyRank(charSheet) return charSheet.weaponProficiencyRank end
function CharSheetClass.SetWeaponProficiencyRank(charSheet, value) CharSheet_SetCheckBoxSequence(charSheet, "weaponProficiencyRank", value) end

---------------------------------------------------------------------------------------------------

function CharSheetClass.PackedData(charSheet)
    return charSheet.packedBag, charSheet.packedCards
end

---------------------------------------------------------------------------------------------------

function CharSheetClass.SetPackedData(charSheet, packedBag, packedCards)
    charSheet.packedBag = packedBag
    charSheet.packedCards = packedCards
    charSheet:Save()
end

---------------------------------------------------------------------------------------------------

function CharSheetClass.ClearPackedData(charSheet)
    charSheet.packedBag = nil
    charSheet.packedCards = nil
    charSheet:Save()
end

---------------------------------------------------------------------------------------------------

function CharSheetClass.SetTemporaryModifier(charSheet, stat, value)
    assert(CheckStr(stat))
    assert(CheckNum(value))

    Log.Debugf("Setting temporary modifier %s to %d for charSheet %s", stat, value, charSheet.object.getGUID())

    local oldValue = CharSheet_GetModified(charSheet, stat)
    charSheet[stat.."Temporary"] = value
    local newValue = CharSheet_GetModified(charSheet, stat)
    if newValue != oldValue then
        charSheet[stat.."Counter"]:Set(newValue)
        EventManager.FireEvent("onCharSheetChangeStat", charSheet, stat, newValue)
    end
end

---------------------------------------------------------------------------------------------------

function CharSheetClass.SetPermanentModifier(charSheet, stat, value)
    assert(CheckStr(stat))
    assert(CheckNum(value))

    Log.Debugf("Setting permanent modifier %s to %d for charSheet %s", stat, value, charSheet.object.getGUID())

    local oldValue = CharSheet_GetModified(charSheet, stat)
    charSheet[stat.."Permanent"] = value
    local newValue = CharSheet_GetModified(charSheet, stat)
    Log.Debugf("    old %d, new %d", oldValue, newValue)
    if newValue != oldValue then
        charSheet[stat.."Counter"]:Set(newValue)
        EventManager.FireEvent("onCharSheetChangeStat", charSheet, stat, newValue)
    end
end

---------------------------------------------------------------------------------------------------

function CharSheetClass.SetModifiers(charSheet, temporary, permanent)
    assert(CheckTable(temporary))
    assert(CheckTable(permanent))

    for _, stat in ipairs({ "movement", "speed", "accuracy", "strength", "evasion", "luck" }) do
        local oldValue = CharSheet_GetModified(charSheet, stat)
        charSheet[stat.."Temporary"] = temporary[stat] or 0
        charSheet[stat.."Permanent"] = permanent[stat] or 0
        local newValue = CharSheet_GetModified(charSheet, stat)
        if newValue != oldValue then
            charSheet[stat.."Counter"]:Set(newValue)
            EventManager.FireEvent("onCharSheetChangeStat", charSheet, stat, newValue)
        end
    end
end

---------------------------------------------------------------------------------------------------

function CharSheetClass.HealAndReset(charSheet)
    Log.Debugf("Healing and resetting charSheet %s", charSheet.object.getGUID())
    for _, stat in ipairs({ "movement", "speed", "accuracy", "strength", "evasion", "luck" }) do
        charSheet:SetTemporaryModifier(stat, 0)
    end
    charSheet:SetBrainInjury(false)
end

---------------------------------------------------------------------------------------------------

function CharSheetClass.LinkFigurine(charSheet, figurine)
    Log.Debugf("Linking figurine %s (%s) to CharSheet %s", figurine.getName(), figurine.getGUID(), charSheet.object.getGUID())
    charSheet.figurine = figurine
    figurine.setName(charSheet:NameOrUnnamed())
end

---------------------------------------------------------------------------------------------------

function CharSheetClass.UnlinkFigurine(charSheet)
    if charSheet.figurine then
        Log.Debugf("Unlinking figurine %s (%s) to CharSheet %s", charSheet.figurine.getName(), charSheet.figurine.getGUID(), charSheet.object.getGUID())
        charSheet.figurine.setName("")
        charSheet.figurine = nil
    end
end

---------------------------------------------------------------------------------------------------

function CharSheetClass.Save(charSheet)
    local saveState = {
        name = charSheet.name,
        male = charSheet.male,
        female = charSheet.female,
        skipNextHunt = charSheet.skipNextHunt,
        lifetimeRerollAvailable = charSheet.lifetimeRerollAvailable,
        lifetimeRerollUsed = charSheet.lifetimeRerollUsed,
        survival = charSheet.survival,
        movement = charSheet.movement,
        speed = charSheet.speed,
        accuracy = charSheet.accuracy,
        strength = charSheet.strength,
        evasion = charSheet.evasion,
        luck = charSheet.luck,
        huntXp = charSheet.huntXp,
        insanity = charSheet.insanity,
        brainInjury = charSheet.brainInjury,
        courage = charSheet.courage,
        understanding = charSheet.understanding,
        weaponProficiencyType = charSheet.weaponProficiencyType,
        weaponProficiencyRank = charSheet.weaponProficiencyRank,
    }
    if charSheet.packedCards then
        saveState.packedCards = charSheet.packedCards
        saveState.packedBagGuid = charSheet.packedBag.getGUID()
    end

    charSheet.object.script_state = JSON.encode(saveState)
end

---------------------------------------------------------------------------------------------------

local function CharSheet_LoadPackedData(charSheet, saveState)
    if not saveState.packedCards then
        return
    end

    local bagGuid = saveState.packedBagGuid
    if not bagGuid or bagGuid == "" then
        Log.Errorf("No packed bag for %s (%s). If this character was imported from an earlier version then you'll need to unpack their bag manually.", CharSheet.GetNameOrUnnamed(charSheet), charSheet.object.getGUID())
        Util.Highlight(charSheet.object)
        return
    end

    local bag = getObjectFromGUID(bagGuid)
    if bag == nil then
        Log.Errorf("Can't find packed bag %s for %s (%s). Perhaps you deleted it or put it in another bag?", bagGuid, CharSheet.GetNameOrUnnamed(charSheet), charSheet.object.getGUID())
        Util.Highlight(charSheet.object)
        return
    end

    charSheet.packedCards = saveState.packedCards
    charSheet.packedBag = bag
end

-------------------------------------------------------------------------------------------------

local function CharSheet_Create(object)
    Log.Debugf("Creating CharSheet %s", object.getGUID())

    local saveState = {}
    if object.script_state then
        saveState = JSON.decode(object.script_state) or {}
    end
    object.setLuaScript("--")

    CharSheet_id = CharSheet_id + 1
    local charSheet = {
        id = CharSheet_id,

        object = object,

        name = saveState.name,

        male = saveState.male,
        female = saveState.female,

        lifetimeRerollAvailable = saveState.lifetimeRerollAvailable,
        lifetimeRerollUsed = saveState.lifetimeRerollUsed,

        skipNextHunt = saveState.skipNextHunt,

        survival = saveState.survival or 0,

        movement = saveState.movement or 5,
        speed = saveState.speed or 0,
        accuracy = saveState.accuracy or 0,
        strength = saveState.strength or 0,
        evasion = saveState.evasion or 0,
        luck = saveState.luck or 0,

        huntXp = saveState.huntXp or 0,

        insanity = saveState.insanity or 0,
        brainInjury = saveState.brainInjury,

        courage = saveState.courage or 0,

        understanding = saveState.understanding or 0,

        weaponProficiencyType = saveState.weaponProficiencyType,
        weaponProficiencyRank = saveState.weaponProficiencyRank or 0,

        movementTemporary = 0,
        movementPermanent = 0,

        speedTemporary = 0,
        speedPermanent = 0,

        accuracyTemporary = 0,
        accuracyPermanent = 0,

        strengthTemporary = 0,
        strengthPermanent = 0,

        evasionTemporary = 0,
        evasionPermanent = 0,

        luckTemporary = 0,
        luckPermanent = 0,
    }
    setmetatable(charSheet, CharSheetClass)

    CharSheet_LoadPackedData(charSheet, saveState)

    local ui = { id = "CharSheet"..charSheet.id, children = object.UI.getXmlTable() }

    local topLeft = { x = 0.734, y = -0.816 }
    local bottomRight = { x = 0.472, y = -0.554 }
    charSheet.survivalCounter = Ui3d.Counter(ui, { object = object, id = "Survival", topLeft = topLeft, bottomRight = bottomRight, fontSize = 200, value = charSheet:Survival(), onValueChanged = function(value)
        charSheet:SetSurvival(charSheet.survival + value)
    end })

    local topLeft = { x = -0.472, y = -0.816 }
    local bottomRight = { x = -0.734, y = -0.554 }
    charSheet.insanityCounter = Ui3d.Counter(ui, { object = object, id = "Insanity", topLeft = topLeft, bottomRight = bottomRight, fontSize = 200, value = charSheet:Insanity(), onValueChanged = function(value)
        charSheet:SetInsanity(charSheet.insanity + value)
    end })

    local stats = { "movement", "speed", "accuracy", "strength", "evasion", "luck" }
    local tl0 = { x =  0.318231, y = -0.937371 }
    local br0 = { x =  0.146146, y = -0.764668 }
    local tl1 = { x = -0.146148, y = -0.631487}
    local dx = (tl1.x - tl0.x) / 2
    local dy = (tl1.y - tl0.y) / 1
    local i = 1
    for col = 0, 2 do
        for row = 0, 1 do
            local tl = { x = tl0.x + dx * col, y = tl0.y + dy * row }
            local br = { x = br0.x + dx * col, y = br0.y + dy * row }
            local stat = stats[i]
            charSheet[stat.."Counter"] = Ui3d.Counter(ui, { object = object, id = Util.Capitalize(stat), topLeft = tl, bottomRight = br, fontSize = 150, value = CharSheet_GetModified(charSheet, stat), onValueChanged = function(value)
                CharSheet_SetModified(charSheet, stat, charSheet[stat] + value)
            end })
            i = i + 1
        end
    end

    local topLeft = { x = 0.585221, y = -0.26 }
    local bottomRight = { x = -0.489548, y = -0.172231 }
    charSheet.nameText = Ui3d.Input(ui, { object = object, id = "Name", topLeft = topLeft, bottomRight = bottomRight, fontSize = 60, value = charSheet:Name(), placeholder = "Enter name...", onValueChanged = function(value)
        charSheet:SetName(value)
    end })

    local topLeft = { x = -0.079274, y = 0.666878 }
    local bottomRight = { x = -0.688625, y = 0.748076 }
    charSheet.weaponProficiencyTypeText = Ui3d.Input(ui, { object = object, id = "WeaponProficiencyType", topLeft = topLeft, bottomRight = bottomRight, fontSize = 60, value = charSheet:WeaponProficiencyType(), placeholder = "Enter weapon type...", onValueChanged = function(value)
        charSheet:SetWeaponProficiencyType(value)
    end })

    local topLeft = { x = -0.549952, y = -0.943896 }
    local bottomRight = { x = -0.658285, y = -0.834634 }
    charSheet.brainInjuryCheckBox = Ui3d.CheckBox(ui, { object = object, id = "BrainInjury", topLeft = topLeft, bottomRight = bottomRight, value = charSheet.brainInjury, onClick = function()
        charSheet:SetBrainInjury(not charSheet.brainInjury)
    end })

    local SMALL_CHECK_BOX_SIZE = 0.055
    local smallCheckBoxes = {
        { stat = "male", topLeft = { x = -0.526053, y = -0.242566 } },
        { stat = "female", topLeft = { x = -0.655008, y = -0.242566 } },
        { stat = "lifetimeRerollAvailable", topLeft = { x = 0.74, y = -0.058658 } },
        { stat = "lifetimeRerollUsed", topLeft = { x = 0.255074, y = -0.058658 } },
        { stat = "skipNextHunt", topLeft = { x = -0.403601, y = -0.058658 } },
    }
    for _, smallCheckBox in ipairs(smallCheckBoxes) do
        local stat, topLeft = smallCheckBox.stat, smallCheckBox.topLeft
        local bottomRight = { x = topLeft.x - SMALL_CHECK_BOX_SIZE, y = topLeft.y + SMALL_CHECK_BOX_SIZE }
        local Stat = Util.Capitalize(stat)
        charSheet[stat.."CheckBox"] = Ui3d.CheckBox(ui, { object = object, id = Stat, topLeft = topLeft, bottomRight = bottomRight, value = charSheet[stat], onClick = function()
            charSheet["Set"..Stat](charSheet, not charSheet[stat])
        end })
    end

    local checkBoxSequences = {
        { stat = "huntXp", x1 = 0.447672, xn = -0.622670, y = 0.087553 },
        { stat = "courage", x1 = 0.677678, xn = 0.101071, y = 0.418356 },
        { stat = "understanding", x1 = -0.046832, xn = -0.621345, y = 0.418356 },
        { stat = "weaponProficiencyRank", x1 = 0.677381, xn = 0.173164, y = 0.749524 },
    }

    for _, checkBoxSequence in ipairs(checkBoxSequences) do
        local stat, x1, xn, y = checkBoxSequence.stat, checkBoxSequence.x1, checkBoxSequence.xn, checkBoxSequence.y
        local max = CHAR_SHEET_MAXES[stat]
        local dx = (xn - x1) / (max - 1)
        local value = charSheet[stat]

        for i = 1, max do
            local Stat = Util.Capitalize(stat)
            local topLeft = { x = x1 + ((i - 1) * dx), y = y }
            local bottomRight = { x = topLeft.x - SMALL_CHECK_BOX_SIZE, y = y + SMALL_CHECK_BOX_SIZE }
            charSheet[stat..i.."CheckBox"] = Ui3d.CheckBox(ui, { object = object, id = Stat..i, topLeft = topLeft, bottomRight = bottomRight, value = value >= i, onClick = function()
                local value = i
                if charSheet[stat] >= i then
                    value = value - 1
                end
                charSheet["Set"..Stat](charSheet, value)
            end })
        end
    end

    object.UI.setCustomAssets({
        {
            name = "CheckBoxFilled",
            url = "http://cloud-3.steamusercontent.com/ugc/1189461526463396506/7C8173ABCCC39B1FB8EB5FF188FAC0B5CF5A3F69/",
        },
    })
    object.UI.setXmlTable(ui.children)

    CharSheet_charSheetsByObject[object] = charSheet

    return charSheet
end

---------------------------------------------------------------------------------------------------

local function CharSheet_OnObjectSpawn(object)
    if object.getGMNotes() == "Character Sheet" then
        CharSheet_Create(object)
    end
end

---------------------------------------------------------------------------------------------------

local function CharSheet_OnObjectDestroy(object)
    if CharSheet_charSheetsByObject[object] then
        Log.Debugf("CharSheet %s destroyed", object.getGUID())
        CharSheet_charSheetsByObject[object] = nil
    end
end

-------------------------------------------------------------------------------------------------

local function CharSheet_ForObject(object)
    assert(CheckObj(object))
    return CharSheet_charSheetsByObject[object]
end

-------------------------------------------------------------------------------------------------

local function CharSheet_Init()
    for _, object in ipairs(getAllObjects()) do
        if object.getGMNotes() == "Character Sheet" then
            local charSheet = CharSheet_Create(object)
        end
    end

    EventManager.AddHandler("onObjectSpawn", CharSheet_OnObjectSpawn)
    EventManager.AddHandler("onObjectDestroy", CharSheet_OnObjectDestroy)
end

---------------------------------------------------------------------------------------------------

return {
    Init = CharSheet_Init,
    ForObject = CharSheet_ForObject,
}
