-- Based on https://github.com/iskolbin/lbase64

-- Copyright (c) 2018 Ilya Kolbin
-- Permission is hereby granted, free of charge, to any person obtaining a copy of
-- this software and associated documentation files (the "Software"), to deal in
-- the Software without restriction, including without limitation the rights to
-- use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
-- of the Software, and to permit persons to whom the Software is furnished to do
-- so, subject to the following conditions:
-- The above copyright notice and this permission notice shall be included in all
-- copies or substantial portions of the Software.
-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-- IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-- FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-- AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-- LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-- OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
-- SOFTWARE.


local Base64 = {}

Base64.encodeMap = {}
for b64code, char in pairs{[0]='A','B','C','D','E','F','G','H','I','J',
	'K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y',
	'Z','a','b','c','d','e','f','g','h','i','j','k','l','m','n',
	'o','p','q','r','s','t','u','v','w','x','y','z','0','1','2',
	'3','4','5','6','7','8','9','+','/','='} do
	Base64.encodeMap[b64code] = char:byte()
end

Base64.decodeMap = {}
for b64code, charcode in pairs(Base64.encodeMap) do
	Base64.decodeMap[charcode] = b64code
end

local extract, char = bit32.extract, string.char

---------------------------------------------------------------------------------------------------

function Base64.Encode(str)
    local encodeMap = Base64.encodeMap
	local result = {}
    local resultIndex = 1
    local n = #str
	local remainder = n % 3
	for i = 1, n - remainder, 3 do
		local a, b, c = str:byte(i, i + 2)
		local v = a * 0x10000 + b * 0x100 + c
		local s = char(encodeMap[extract(v, 18, 6)], encodeMap[extract(v, 12, 6)], encodeMap[extract(v, 6, 6)], encodeMap[extract(v, 0, 6)])
		result[resultIndex] = s
		resultIndex = resultIndex + 1
	end

	if remainder == 2 then
		local a, b = str:byte(n - 1, n)
		local v = a * 0x10000 + b * 0x100
		result[resultIndex] = char(encodeMap[extract(v, 18, 6)], encodeMap[extract(v, 12, 6)], encodeMap[extract(v, 6, 6)], encodeMap[64])
	elseif remainder == 1 then
		local v = str:byte(n) * 0x10000
		result[resultIndex] = char(encodeMap[extract(v, 18, 6)], encodeMap[extract(v, 12, 6)], encodeMap[64], encodeMap[64])
	end

	return table.concat(result)
end

---------------------------------------------------------------------------------------------------

function Base64.Decode(str)
	local n = #str
    local padding = 0
    if str:sub(-2) == '==' then
        padding = 2
        n = n - 4
    elseif str:sub(-1) == '=' then
        padding = 1
        n = n - 4
    end

    local result = {}
    local resultIndex = 1

    local decodeMap = Base64.decodeMap
	for i = 1, n, 4 do
		local a, b, c, d = str:byte(i, i + 3)
		local v = decodeMap[a] * 0x40000 + decodeMap[b] * 0x1000 + decodeMap[c] * 0x40 + decodeMap[d]
		local s = char(extract(v, 16, 8), extract(v, 8, 8), extract(v, 0, 8))
		result[resultIndex] = s
		resultIndex = resultIndex + 1
	end
	if padding == 1 then
		local a, b, c = str:byte(n + 1, n + 3)
		local v = decodeMap[a] * 0x40000 + decodeMap[b] * 0x1000 + decodeMap[c] * 0x40
		result[resultIndex] = char(extract(v, 16, 8), extract(v, 8, 8))
	elseif padding == 2 then
		local a, b = str:byte(n + 1, n + 2)
		local v = decodeMap[a] * 0x40000 + decodeMap[b] * 0x1000
		result[resultIndex] = char(extract(v, 16, 8))
	end

	return table.concat(result)
end

assert(Base64.Decode(Base64.Encode("hello world")) == "hello world")

---------------------------------------------------------------------------------------------------

return {
    Encode = Base64.Encode,
    Decode = Base64.Decode,
}
