local Archive = require("Kdm/Archive")
local Check = require("Kdm/Util/Check")
local EventManager = require("Kdm/Util/EventManager")
local Location = require("Kdm/Location")
local log = require("Kdm/Log").ForModule("Population")
local MessageBox = require("Kdm/MessageBox")
local NamedObject = require("Kdm/NamedObject")
local Survivor = require("Kdm/Survivor")
local SurvivorBox = require("Kdm/SurvivorBox")
local SurvivorSheet = require("Kdm/SurvivorSheet")
local Ui = require("Kdm/Ui")
local Util = require("Kdm/Util/Util")

-------------------------------------------------------------------------------------------------

local Population = {}

Population.CHECKBOX_SEQUENCE_MAXES = {
    ["huntXp"] = 16,
    ["courage"] = 9,
    ["understanding"] = 9,
    ["weaponProficiencyRank"] = 8,
}

Population.MARKER_EMPTY = "MarkerEmpty"
Population.MARKER_YELLOW_STAR = "MarkerYellowStar"
Population.MARKER_GREEN_TRIANGLE = "MarkerGreenTriangle"
Population.MARKER_BLUE_SQUARE = "MarkerBlueSquare"
Population.MARKER_RED_CIRCLE = "MarkerRedCircle"
Population.MARKER_PURPLE_DIAMOND = "MarkerPurpleDiamond"

Population.NEXT_MARKER = {
    [Population.MARKER_EMPTY] = Population.MARKER_YELLOW_STAR,
    [Population.MARKER_YELLOW_STAR] = Population.MARKER_GREEN_TRIANGLE,
    [Population.MARKER_GREEN_TRIANGLE] = Population.MARKER_BLUE_SQUARE,
    [Population.MARKER_BLUE_SQUARE] = Population.MARKER_RED_CIRCLE,
    [Population.MARKER_RED_CIRCLE] = Population.MARKER_PURPLE_DIAMOND,
    [Population.MARKER_PURPLE_DIAMOND] = Population.MARKER_EMPTY,
}

Population.PREV_MARKER = {
    [Population.MARKER_EMPTY] = Population.MARKER_PURPLE_DIAMOND,
    [Population.MARKER_PURPLE_DIAMOND] = Population.MARKER_RED_CIRCLE,
    [Population.MARKER_RED_CIRCLE] = Population.MARKER_BLUE_SQUARE,
    [Population.MARKER_BLUE_SQUARE] = Population.MARKER_GREEN_TRIANGLE,
    [Population.MARKER_GREEN_TRIANGLE] = Population.MARKER_YELLOW_STAR,
    [Population.MARKER_YELLOW_STAR] = Population.MARKER_EMPTY,
}

Population.CUSTOM_ASSETS = {
    {
        name = "CheckBoxFilled",
        url = "http://cloud-3.steamusercontent.com/ugc/1189461526463396506/7C8173ABCCC39B1FB8EB5FF188FAC0B5CF5A3F69/",
    },
    {
        name = Population.MARKER_EMPTY,
        url = "file:///C:/Users/Jordan Chavez/Desktop/KDM Assets/Boards/Marker Empty.png",
    },
    {
        name = Population.MARKER_YELLOW_STAR,
        url = "file:///C:/Users/Jordan Chavez/Desktop/KDM Assets/Boards/Marker Yellow Star.png",
    },
    {
        name = Population.MARKER_GREEN_TRIANGLE,
        url = "file:///C:/Users/Jordan Chavez/Desktop/KDM Assets/Boards/Marker Green Triangle.png",
    },
    {
        name = Population.MARKER_BLUE_SQUARE,
        url = "file:///C:/Users/Jordan Chavez/Desktop/KDM Assets/Boards/Marker Blue Square.png",
    },
    {
        name = Population.MARKER_RED_CIRCLE,
        url = "file:///C:/Users/Jordan Chavez/Desktop/KDM Assets/Boards/Marker Red Circle.png",
    },
    {
        name = Population.MARKER_PURPLE_DIAMOND,
        url = "file:///C:/Users/Jordan Chavez/Desktop/KDM Assets/Boards/Marker Purple Diamond.png",
    },
    {
        name = "IconFightingArt",
        url = "file:///C:/Users/Jordan Chavez/Desktop/KDM Assets/Boards/Fighting Art Icon.png",
    },
    {
        name = "IconDisorder",
        url = "file:///C:/Users/Jordan Chavez/Desktop/KDM Assets/Boards/Disorder Icon.png",
    },
    {
        name = "IconAbility",
        url = "file:///C:/Users/Jordan Chavez/Desktop/KDM Assets/Boards/Ability Icon.png",
    },
    {
        name = "IconSevereInjury",
        url = "file:///C:/Users/Jordan Chavez/Desktop/KDM Assets/Boards/Severe Injury Icon.png",
    },
}

---------------------------------------------------------------------------------------------------

function Population.Init(saveState)
    Population.InitSaveState(saveState)

    Population.boardObject = NamedObject.Get("Survivor Board")

    local ui = Ui.Create3d("survivorBoard", Population.boardObject, 0.6)
    Population.ui = ui

    Population.livingSurvivorsText = ui:Text({ id = "livingSurvivors", topLeft = { x = 5.284441, y = -7.640587 }, bottomRight = { x = 5.023291, y = -7.052870 }, fontSize = 220, alignment = "MiddleCenter" })

    Population.deadSurvivorsText = ui:Text({ id = "deadSurvivors", topLeft = { x = 4.319638, y = -7.642143 }, bottomRight = { x = 4.065874, y = -7.059141 }, fontSize = 220, alignment = "MiddleCenter" })

    Population.newSurvivorBonusesInput = ui:Input({ id = "newSurvivorBonuses", topLeft = { x = 3.778204, y = -7.437167 }, bottomRight = { x = 1.031039, y = -7.059802 }, fontSize = 80, alignment = "LowerLeft", text = Population.newSurvivorBonuses, onValueChanged = function(value)
        Population.newSurvivorBonuses = value
        Population.newSurvivorBonusesInput:Set(value)
    end })

    Population.newSurvivorButton = ui:Button({ id = "newSurvivor", topLeft = { x = 0.756925, y = -7.658921 }, bottomRight = { x = -0.617333,y = -7.045891 }, onClick = function()
        Survivor.Create()
    end })

    Population.clearSkipNextHuntButton = ui:Button({ id = "clearSkipNextHunt", topLeft = { x = -0.897427, y = -7.661951 }, bottomRight = { x = -2.819457, y = -7.049488 }, onClick = function()
        for _, survivor in ipairs(Survivor.Survivors()) do
            if survivor:SkipNextHunt() then
                survivor:SetSkipNextHunt(false)
            end
        end
        Log.Printf("Cleared 'Skip Next Hunt' on all survivors")
    end })

    Population.previousPageButton = ui:Button({ id = "previousPage", topLeft = { x = -6.576738, y = -7.658603 }, bottomRight = { x = -6.846550, y = -7.060284 }, onClick = function()
        Population.SetPageAndRefresh(Population.page - 1)
    end })

    Population.pageText = ui:Text({ id = "page", topLeft = { x = -6.846550, y = -7.658603 }, bottomRight = { x = -7.783247, y = -7.040886 }, fontSize = 160, alignment = "MiddleCenter" })

    Population.nextPageButton = ui:Button({ id = "nextPage", topLeft = { x = -7.783247, y = -7.662317 }, bottomRight = { x = -8.049563, y = -7.040886 }, onClick = function()
        Population.SetPageAndRefresh(Population.page + 1)
    end })

    local hideButtons = {
        Living = { topLeft = { x = 6.963151, y = 7.208137 }, bottomRight = { x = 6.771221, y = 7.645597 } },
        Dead = { topLeft = { x = 5.844892, y = 7.202434 }, bottomRight = { x = 5.652242, y = 7.643736 } },
        SkipNextHunt = { topLeft = { x = 4.765475, y = 7.211676 }, bottomRight = { x = 4.574671, y = 7.644533 } },
        Retired = { topLeft = { x = 2.946023, y = 7.215670 }, bottomRight = { x = 2.755053, y = 7.645678 } },
        YellowStar = { topLeft = { x = 1.748184, y = 7.208223 }, bottomRight = { x = 1.556422, y = 7.639410 } },
        GreenTriangle = { topLeft = { x = 0.734323, y = 7.214246 }, bottomRight = { x = 0.539239, y = 7.645326 } },
        BlueSquare = { topLeft = { x = -0.292644, y = 7.217496 }, bottomRight = { x = -0.487164, y = 7.649194 } },
        RedCircle = { topLeft = { x = -1.291453, y = 7.216863 }, bottomRight = { x = -1.484272, y = 7.650930 } },
        PurpleDiamond = { topLeft = { x = -2.282465, y = 7.207262 }, bottomRight = { x = -2.476591, y = 7.642169 } },
    }
    for suffix, data in pairs(hideButtons) do
        local attr = "hide"..suffix
        local cb = attr.."CheckBox"
        Population[cb] = ui:CheckBox({ id = attr, topLeft = data.topLeft, bottomRight = data.bottomRight, checked = Population[attr], onClick = function()
            Population[attr] = not Population[attr]
            Population[cb]:Set(Population[attr])
            Population.SetPageAndRefresh(1)
        end })
    end

    Population.cells = {}
    for i = 1, 20 do
        local cell = {
            object = NamedObject.Get("Survivor Board Cell "..i),
            ordinal = i,
        }
        Population.InitSurvivorCellUi(cell)
        Population.cells[i] = cell
    end

    Population.boardObject.UI.setCustomAssets(Population.CUSTOM_ASSETS)
    ui:Apply()
end

---------------------------------------------------------------------------------------------------

function Population.InitSaveState(saveState)
    Population.newSurvivorBonuses = saveState.newSurvivorBonuses
    Population.page = saveState.page or 1
    Population.hideLiving = saveState.hideLiving
    Population.hideDead = saveState.hideDead
    Population.hideSkipNextHunt = saveState.hideSkipNextHunt
    Population.hideRetired = saveState.hideRetired
    Population.hideYellowStar = saveState.hideYellowStar
    Population.hideGreenTriangle = saveState.hideGreenTriangle
    Population.hideBlueSquare = saveState.hideBlueSquare
    Population.hideRedCircle = saveState.hideRedCircle
    Population.hidePurpleDiamond = saveState.hidePurpleDiamond
end

---------------------------------------------------------------------------------------------------

function Population.InitSurvivorCellUi(cell)
    local ui = Ui.Create3d("survivorCell"..cell.ordinal, cell.object, 0.11)
    cell.ui = ui

    cell.survivalCounter = ui:Counter({ id = "survival", topLeft = { x = 0.488679, y = -0.960464 }, bottomRight = { x = 0.294088, y = -0.766285 }, fontSize = 140, value = 0, onValueChanged = function(delta)
        cell.survivor:SetSurvival(cell.survivor:Survival() + delta)
    end })

    cell.insanityCounter = ui:Counter({ id = "insanity", topLeft = { x = -0.293847, y = -0.964120 }, bottomRight = { x = -0.489293, y = -0.764670 }, fontSize = 140, value = 0, onValueChanged = function(delta)
        cell.survivor:SetInsanity(cell.survivor:Insanity() + delta)
    end })

    for stat, data in pairs({
        ["movement"] = { topLeft = { x = 0.237461, y = -0.963491 }, bottomRight = { x = 0.098091, y = -0.824870 } },
        ["speed"] = { topLeft = { x = 0.070339, y = -0.964019 }, bottomRight = { x = -0.069972, y = -0.823512 } },
        ["accuracy"] = { topLeft = { x = -0.095285, y = -0.960736 }, bottomRight = { x = -0.235804, y = -0.823606 } },
        ["strength"] = { topLeft = { x = 0.238673, y = -0.745258 }, bottomRight = { x = 0.097487, y = -0.610387 } },
        ["evasion"] = { topLeft = { x = 0.068523, y = -0.746108 }, bottomRight = { x = -0.068570, y = -0.609721 } },
        ["luck"] = { topLeft = { x = -0.097451, y = -0.747023 }, bottomRight = { x = -0.236673, y = -0.608649 } },
    }) do
        cell[stat.."Counter"] = ui:Counter({ id = stat, topLeft = data.topLeft, bottomRight = data.bottomRight, fontSize = 90, onValueChanged = function(delta)
            local capStat = Util.Capitalize(stat)
            cell.survivor["Set"..capStat](cell.survivor, cell.survivor[capStat](cell.survivor) + delta)
        end })
    end

    cell.markerButton = ui:Button({ id = "marker", topLeft = { x = 0.490351, y = -0.667075 }, bottomRight = { x = 0.295514, y = -0.556129 }, onClick = function(button)
        local value = cell.survivor:Marker() or Population.MARKER_EMPTY
        if button == Ui.LEFT_MOUSE_BUTTON then
            value = Population.NEXT_MARKER[value]
        else
            value = Population.PREV_MARKER[value]
        end
        cell.survivor:SetMarker(value)
    end })

    cell.nameInput = ui:Input({ id = "name", topLeft = { x = 0.374686, y = -0.555475 }, bottomRight = { x = -0.492332, y = -0.471773 }, fontSize = 60, onValueChanged = function(value)
        cell.survivor:SetName(value)
    end })

    local smallCheckBoxSize = 0.0352955
    local bigCheckBoxSize = 0.04039

    for stat, topLeft in pairs({
        ["male"] = { x = 0.488708, y = -0.450130 },
        ["female"] = { x = 0.391058, y = -0.451183 },
        ["reroll"] = { x = 0.301735, y = -0.448962 },
        ["skipNextHunt"] = { x = 0.097530, y = -0.451439 },
        ["retired"] = { x = -0.156637, y = -0.451290 },
        ["dead"] = { x = -0.334745, y = -0.450177 },
    }) do
        cell[stat.."CheckBox"] = ui:CheckBox({ id = stat, topLeft = topLeft, bottomRight = { x = topLeft.x - smallCheckBoxSize, y = topLeft.y + smallCheckBoxSize }, onClick = function()
            local capStat = Util.Capitalize(stat)
            cell.survivor["Set"..capStat](cell.survivor, not cell.survivor[capStat](cell.survivor))
        end })
    end

    for stat, seq in pairs({
        ["huntXp"] = {
            { topLeft = { x = 0.312961, y = -0.358888 }, big = false },
            { topLeft = { x = 0.260530, y = -0.362141 }, big = true },
            { topLeft = { x = 0.205214, y = -0.358888 }, big = false },
            { topLeft = { x = 0.158189, y = -0.358888 }, big = false },
            { topLeft = { x = 0.111091, y = -0.358888 }, big = false },
            { topLeft = { x = 0.060947, y = -0.362141 }, big = true },
            { topLeft = { x = 0.004465, y = -0.358888 }, big = false },
            { topLeft = { x = -0.043838, y = -0.358888 }, big = false },
            { topLeft = { x = -0.089868, y = -0.358888 }, big = false },
            { topLeft = { x = -0.138367, y = -0.362141 }, big = true },
            { topLeft = { x = -0.195562, y = -0.358888 }, big = false },
            { topLeft = { x = -0.242767, y = -0.358888 }, big = false },
            { topLeft = { x = -0.290438, y = -0.358888 }, big = false },
            { topLeft = { x = -0.336773, y = -0.358888 }, big = false },
            { topLeft = { x = -0.386495, y = -0.362141 }, big = true },
            { topLeft = { x = -0.447584, y = -0.362141 }, big = true },
        },
        ["courage"] = {
            { topLeft = { x = 0.489029, y = -0.207650 }, big = false },
            { topLeft = { x = 0.440906, y = -0.207650 }, big = false },
            { topLeft = { x = 0.391424, y = -0.209982 }, big = true },
            { topLeft = { x = 0.335180, y = -0.207650 }, big = false },
            { topLeft = { x = 0.287784, y = -0.207650 }, big = false },
            { topLeft = { x = 0.240546, y = -0.207650 }, big = false },
            { topLeft = { x = 0.193479, y = -0.207650 }, big = false },
            { topLeft = { x = 0.146031, y = -0.207650 }, big = false },
            { topLeft = { x = 0.096573, y = -0.209982 }, big = true },
        },
        ["understanding"] = {
            { topLeft = { x = 0.489029 + -0.542864, y = -0.207650 }, big = false },
            { topLeft = { x = 0.440906 + -0.542864, y = -0.207650 }, big = false },
            { topLeft = { x = 0.391424 + -0.542864, y = -0.209982 }, big = true },
            { topLeft = { x = 0.335180 + -0.542864, y = -0.207650 }, big = false },
            { topLeft = { x = 0.287784 + -0.542864, y = -0.207650 }, big = false },
            { topLeft = { x = 0.240546 + -0.542864, y = -0.207650 }, big = false },
            { topLeft = { x = 0.193479 + -0.542864, y = -0.207650 }, big = false },
            { topLeft = { x = 0.146031 + -0.542864, y = -0.207650 }, big = false },
            { topLeft = { x = 0.096573 + -0.542864, y = -0.209982 }, big = true },
        },
        ["weaponProficiencyRank"] = {
            { topLeft = { x = 0.488380, y = -0.056321 }, big = false },
            { topLeft = { x = 0.441384, y = -0.056321 }, big = false },
            { topLeft = { x = 0.391489, y = -0.060015  }, big = true },
            { topLeft = { x = 0.335152, y = -0.056321 }, big = false },
            { topLeft = { x = 0.288189, y = -0.056321 }, big = false },
            { topLeft = { x = 0.240844, y = -0.056321 }, big = false },
            { topLeft = { x = 0.194179, y = -0.056321 }, big = false },
            { topLeft = { x = 0.143038, y = -0.060015  }, big = true },
        }
    }) do
        for i, data in ipairs(seq) do
            local bottomRight = { x = data.topLeft.x, y = data.topLeft.y }
            if data.big then
                bottomRight.x = bottomRight.x - bigCheckBoxSize
                bottomRight.y = bottomRight.y + bigCheckBoxSize
            else
                bottomRight.x = bottomRight.x - smallCheckBoxSize
                bottomRight.y = bottomRight.y + smallCheckBoxSize
            end

            local stati = stat..i
            cell[stati.."CheckBox"] = ui:CheckBox({ id = stati, topLeft = data.topLeft, bottomRight = bottomRight, onClick = function()
                local value = i
                local capStat = Util.Capitalize(stat)
                if cell.survivor[capStat](cell.survivor) >= i then
                    value = value - 1
                end
                cell.survivor["Set"..capStat](cell.survivor, value)
            end })
        end
    end

    cell.weaponProficiencyTypeInput = ui:Input({ id = "weaponProficiencyType", topLeft = { x = -0.054834, y = -0.064679 }, bottomRight = { x = -0.490963, y = -0.017972 }, fontSize = 40, onValueChanged = function(value)
        cell.survivor:SetWeaponProficiencyType(value)
    end })

    local image1TopLeft = { x = 0.492351, y = 0.091029 }
    local image1BottomRight = { x = 0.446708, y = 0.136740 }
    local image14TopLeft = { x = 0.001845, y = 0.426968 }
    local imageWidth = image1BottomRight.x - image1TopLeft.x
    local imageHeight = image1BottomRight.y - image1TopLeft.y
    local imageColDelta = image14TopLeft.x - image1TopLeft.x
    local imageRowDelta = (image14TopLeft.y - image1TopLeft.y) / 6
    local textOffset = -0.01
    for col = 1, 2 do
        local x = image1TopLeft.x + ((col - 1) * imageColDelta)
        for row = 1, 7 do
            local y = image1TopLeft.y + ((row - 1) * imageRowDelta)
            local i = ((col - 1) * 7) + row
            cell["card"..i.."Image"] = ui:Image({
                id = "card"..i,
                topLeft = { x = x , y = y },
                bottomRight = { x = x + imageWidth, y = y + imageHeight },
            })
            cell["card"..i.."Text"] = ui:Text({
                id = "card"..i,
                topLeft = { x = x + imageWidth + textOffset, y = y },
                bottomRight = { x = x + imageColDelta, y = y + imageHeight },
                fontSize = 40,
                alignment = "MiddleLeft",
            })
        end
    end

    for i, data in pairs({
        { topLeft = { x = 0.494516, y = 0.550233 }, bottomRight = { x = -0.491173, y = 0.594320 } },
        { topLeft = { x = 0.494516, y = 0.609200 }, bottomRight = { x = -0.491173, y = 0.654265 } },
        { topLeft = { x = 0.494516, y = 0.668215 }, bottomRight = { x = -0.491173, y = 0.713223 } },
        { topLeft = { x = 0.494516, y = 0.727703 }, bottomRight = { x = -0.491173, y = 0.773722 } },
        { topLeft = { x = 0.494516, y = 0.787172 }, bottomRight = { x = -0.491173, y = 0.833688 } },
    }) do
        cell["notes"..i.."Input"] = ui:Input({ id = "notes"..i, topLeft = data.topLeft, bottomRight = data.bottomRight, fontSize = 30, onValueChanged = function(value)
            cell.survivor["SetNotes"..i](cell.survivor, value)
        end })
    end

    cell.moveToBeginningButton = ui:Button({ id = "moveToBeginning", topLeft = { x = 0.490387, y = 0.862018 }, bottomRight = { x = 0.392043, y = 0.960771 }, onClick = function()
        Population.MoveBefore(cell.survivor, Population.SurvivorsMatchingCurrentFilters()[1])
        Population.SetPageAndRefresh(Population.page)
    end })

    cell.moveBackButton = ui:Button({ id = "moveBack", topLeft = { x = 0.368695, y = 0.863741 }, bottomRight = { x = 0.271971, y = 0.959538 }, onClick = function()
        local index = ((Population.page - 1) * 20) + cell.ordinal
        Population.MoveBefore(cell.survivor, Population.SurvivorsMatchingCurrentFilters()[index - 1])
        Population.SetPageAndRefresh(math.ceil((index - 1) / 20))
    end })

    cell.spawnButton = ui:Button({ id = "spawn", topLeft = { x = 0.246005, y = 0.862302 }, bottomRight = { x = 0.011954, y = 0.962470 }, onClick = function()
        Population.SpawnSurvivorBox(cell.survivor, "Survivor Box Spawn")
    end })

    cell.deleteButton = ui:Button({ id = "delete", topLeft = { x = -0.013713, y = 0.860059 }, bottomRight = { x = -0.252386, y = 0.958966 }, onClick = function()
        Population.DestroySurvivor(cell.survivor)
    end })

    cell.moveForwardButton = ui:Button({ id = "moveForward", topLeft = { x = -0.274279, y = 0.857828 }, bottomRight = { x = -0.369863, y = 0.959786 }, onClick = function()
        local index = ((Population.page - 1) * 20) + cell.ordinal
        Survivor.MoveAfter(cell.survivor, Population.SurvivorsMatchingCurrentFilters()[index + 1])
        Population.SetPageAndRefresh(math.ceil((index + 1) / 20))
    end })

    cell.moveToEndButton = ui:Button({ id = "moveToEnd", topLeft = { x = -0.392412, y = 0.860326 }, bottomRight = { x = -0.492170, y = 0.961336 }, onClick = function()
        local survivors = Population.SurvivorsMatchingCurrentFilters()
        Survivor.MoveAfter(cell.survivor, survivors[#survivors])
        Population.SetPageAndRefresh(Population.page)
    end })

    cell.object.UI.setCustomAssets(Population.CUSTOM_ASSETS)

    ui:Apply()
end

---------------------------------------------------------------------------------------------------

function Population.PostInit()
    Population.UpdateLivingDeadCounts()
    Population.SetPageAndRefresh(Population.page)

    EventManager.AddHandler(EventManager.ON_SURVIVOR_CREATED, function(survivor)
        Population.UpdateLivingDeadCounts()
        Population.SetPageAndRefresh(Population.MaxPage())
    end)

    EventManager.AddHandler(EventManager.ON_SURVIVOR_DESTROYED, function(survivor)
        Population.UpdateLivingDeadCounts()
        Population.SetPageAndRefresh(Util.Min(Population.MaxPage(), Population.page))
    end)

    EventManager.AddHandler(EventManager.ON_SURVIVOR_STAT_CHANGE, function(survivor, stat, value)
        if stat == "dead" then
            Population.UpdateLivingDeadCounts()
        end

        if stat == "dead" or stat == "retired" or stat == "skipNextHunt" or stat == "marker" then
            Population.SetPageAndRefresh(Util.Min(Population.MaxPage(), Population.page))
        end

        for _, cell in ipairs(Population.cells) do
            if cell.survivor == survivor then
                local updater = Population.statUpdaters[stat]
                if updater then  -- some stats don't have UI
                    updater(cell, stat, value)
                    break
                end
            end
        end
    end)

    EventManager.AddHandler(EventManager.ON_SURVIVOR_CARDS_CHANGE, function(survivor)
        for _, cell in ipairs(Population.cells) do
            if cell.survivor == survivor then
                Population.UpdateCellCards(cell)
            end
        end
    end)
end

---------------------------------------------------------------------------------------------------

function Population.Save()
    return {
        newSurvivorBonuses = Population.newSurvivorBonuses,
        page = Population.page,
        hideLiving = Population.hideLiving,
        hideDead = Population.hideDead,
        hideSkipNextHunt = Population.hideSkipNextHunt,
        hideRetired = Population.hideRetired,
        hideYellowStar = Population.hideYellowStar,
        hideGreenTriangle = Population.hideGreenTriangle,
        hideBlueSquare = Population.hideBlueSquare,
        hideRedCircle = Population.hideRedCircle,
        hidePurpleDiamond = Population.hidePurpleDiamond,
    }
end

---------------------------------------------------------------------------------------------------

function Population.Import(data)
    Population.InitSaveState(data)
end

---------------------------------------------------------------------------------------------------

function Population.Export()
    return Population.Save()
end

---------------------------------------------------------------------------------------------------

function Population.CanDestroySurvivor(survivor)
    local survivorBox = SurvivorBox.ForSurvivor(survivor)
    if survivorBox then
        log:Broadcastf("Please delete survivor box first.")
        Util.Highlight(survivorBox:Object())
        return
    end

    local survivorSheet = SurvivorSheet.ForSurvivor(survivor)
    if survivorSheet then
        log:Broadcastf("Please return survivor to settlement first.")
        Util.Highlight(survivorSheet:Object())
        return
    end

    return true
end

---------------------------------------------------------------------------------------------------

function Population.DestroySurvivor(survivor)
    if not Population.CanDestroySurvivor(survivor) then
        return
    end

    MessageBox.Show(string.format("Are you sure you want to delete '%s'", survivor:NameOrUnnamed()), function()
        -- We have to check again for the pathological case of spawning a box/sheet while the message box is up
        if not Population.CanDestroySurvivor(survivor) then
            return
        end

        Survivor.Destroy(survivor)
    end)
end

---------------------------------------------------------------------------------------------------

function Population.UpdateLivingDeadCounts()
    local numLiving = 0
    local numDead = 0
    for _, survivor in ipairs(Survivor.Survivors()) do
        if survivor:Dead() then
            numDead = numDead + 1
        else
            numLiving = numLiving + 1
        end
    end

    Population.livingSurvivorsText:SetText(tostring(numLiving))
    Population.deadSurvivorsText:SetText(tostring(numDead))
end

---------------------------------------------------------------------------------------------------

function Population.SurvivorsMatchingCurrentFilters()
    local survivors = {}

    for i, survivor in ipairs(Survivor.Survivors()) do
        local hideSurvivor = (
            (Population.hideLiving and not survivor:Dead()) or
            (Population.hideDead and survivor:Dead()) or
            (Population.hideSkipNextHunt and survivor:SkipNextHunt()) or
            (Population.hideRetired and survivor:Retired()) or
            (Population.hideYellowStar and survivor:Marker() == Population.MARKER_YELLOW_STAR) or
            (Population.hideGreenTriangle and survivor:Marker() == Population.MARKER_GREEN_TRIANGLE) or
            (Population.hideBlueSquare and survivor:Marker() == Population.MARKER_BLUE_SQUARE) or
            (Population.hideRedCircle and survivor:Marker() == Population.MARKER_RED_CIRCLE) or
            (Population.hidePurpleDiamond and survivor:Marker() == Population.MARKER_PURPLE_DIAMOND)
        )
        if not hideSurvivor then
            table.insert(survivors, survivor)
        end
    end

    return survivors
end

---------------------------------------------------------------------------------------------------

function Population.MaxPage()
    return Util.Max(1, math.ceil(#Population.SurvivorsMatchingCurrentFilters() / 20))
end

---------------------------------------------------------------------------------------------------

function Population.SetPageAndRefresh(page)
    local survivors = Population.SurvivorsMatchingCurrentFilters()

    local maxPage = Util.Max(1, math.ceil(#survivors / 20))
    if page < 1 then
        log:Debugf("Capping page to 1")
        page = 1
    elseif page > maxPage then
        log:Debugf("Capping page to maxPage=%d", maxPage)
        page = maxPage
    end

    Population.page = page

    local baseIndex = (page - 1) * 20
    local numSurvivorsOnPage = Util.Min(baseIndex + 20, #survivors) - baseIndex

    log:Debugf("Found %d survivors on page %d", numSurvivorsOnPage, page)

    for i = 1, numSurvivorsOnPage do
        Population.ShowCell(Population.cells[i], survivors[baseIndex + i])
    end
    for i = numSurvivorsOnPage + 1, 20 do
        Population.HideCell(Population.cells[i])
    end

    Population.pageText:SetText("Page "..page.."/"..maxPage)
end

---------------------------------------------------------------------------------------------------

-- to generate cell positions:
-- local notes = ""
-- for i = 1, 20 do
--     local pos = Population.cells[i].object.getPosition()
--     notes = notes..string.format("{ x = %f, y = %f, z = %f },\n", pos.x, pos.y, pos.z)
-- end
-- setNotes(notes)

Population.CELL_POSITIONS = {
    { x = -44.897339, y = 3.424418, z = -87.435417 },
    { x = -34.916607, y = 3.424421, z = -87.436218 },
    { x = -24.935480, y = 3.424424, z = -87.436760 },
    { x = -14.954360, y = 3.424428, z = -87.437302 },
    { x = -4.973239, y = 3.424431, z = -87.437851 },
    { x = 5.007882, y = 3.424434, z = -87.438400 },
    { x = 14.989003, y = 3.424437, z = -87.438942 },
    { x = 24.970661, y = 3.424440, z = -87.439453 },
    { x = 34.951500, y = 3.424444, z = -87.440254 },
    { x = 44.932381, y = 3.424447, z = -87.440941 },
    { x = -44.898739, y = 3.424458, z = -105.875778 },
    { x = -34.917610, y = 3.424461, z = -105.876328 },
    { x = -24.936489, y = 3.424464, z = -105.876877 },
    { x = -14.955368, y = 3.424467, z = -105.877419 },
    { x = -4.974248, y = 3.424470, z = -105.877968 },
    { x = 5.006873, y = 3.424474, z = -105.878510 },
    { x = 14.987995, y = 3.424477, z = -105.879059 },
    { x = 24.969114, y = 3.424480, z = -105.879601 },
    { x = 34.950699, y = 3.424483, z = -105.880150 },
    { x = 44.931355, y = 3.424486, z = -105.880692 },
}

function Population.ShowCell(cell, survivor)
    log:Debugf("Showing cell %d with survivor %s", cell.ordinal, survivor)

    if cell.survivor == survivor then
        log:Debugf("Cell %d already has survivor %s", cell.ordinal, survivor)
        return
    end

    cell.survivor = survivor

    cell.markerButton:SetImage(survivor:Marker() or Population.MARKER_EMPTY)

    -- counters
    cell.survivalCounter:Set(survivor:Survival())
    cell.insanityCounter:Set(survivor:Insanity())
    cell.movementCounter:Set(survivor:Movement())
    cell.speedCounter:Set(survivor:Speed())
    cell.accuracyCounter:Set(survivor:Accuracy())
    cell.strengthCounter:Set(survivor:Strength())
    cell.evasionCounter:Set(survivor:Evasion())
    cell.luckCounter:Set(survivor:Luck())

    -- inputs
    cell.nameInput:Set(survivor:NameOrUnnamed())
    cell.weaponProficiencyTypeInput:Set(survivor:WeaponProficiencyType())
    cell.notes1Input:Set(survivor:Notes1())
    cell.notes2Input:Set(survivor:Notes2())
    cell.notes3Input:Set(survivor:Notes3())
    cell.notes4Input:Set(survivor:Notes4())
    cell.notes5Input:Set(survivor:Notes5())

    -- checkboxes
    cell.maleCheckBox:Set(survivor:Male())
    cell.femaleCheckBox:Set(survivor:Female())
    cell.rerollCheckBox:Set(survivor:Reroll())
    cell.skipNextHuntCheckBox:Set(survivor:SkipNextHunt())
    cell.retiredCheckBox:Set(survivor:Retired())
    cell.deadCheckBox:Set(survivor:Dead())

    -- checkbox sequences
    for stat, max in pairs(Population.CHECKBOX_SEQUENCE_MAXES) do
        local value = Util.Min(survivor[Util.Capitalize(stat)](survivor), max)
        for i = 1, value do
            cell[stat..i.."CheckBox"]:Set(true)
        end
        for i = value + 1, max do
            cell[stat..i.."CheckBox"]:Set(false)
        end
    end

    Population.UpdateCellCards(cell)

    cell.object.setScale({ x = 9.01, y = 1, z = 9.01 })
    cell.object.setRotation({ x = 0, y = 180, z = 0 })
    cell.object.setPosition(Population.CELL_POSITIONS[cell.ordinal])
end

---------------------------------------------------------------------------------------------------

function Population.UpdateCellCards(cell)
    local icons = {
        ["Secret Fighting Arts"] = "IconFightingArt",
        ["Fighting Arts"] = "IconFightingArt",
        ["Disorders"] = "IconDisorder",
        ["Abilities"] = "IconAbility",
        ["Severe Injuries"] = "IconSevereInjury",
    }
    local cards = cell.survivor:Cards()
    local maxIndex = Util.Min(#cards, 14)
    for i = 1, maxIndex do
        local card = cards[i]

        local text = cell["card"..i.."Text"]
        text:SetText(card.name)
        text:Show()

        local image = cell["card"..i.."Image"]
        image:SetImage(icons[card.type])
        image:Show()

    end
    for i = maxIndex + 1, 14 do
        cell["card"..i.."Text"]:Hide()
        cell["card"..i.."Image"]:Hide()
    end
end

---------------------------------------------------------------------------------------------------

function Population.HideCell(cell)
    log:Debugf("Hiding cell %d", cell.ordinal)
    cell.object.setScale({ x = 0.01, y = 0.01, z = 0.01 })
    cell.object.setRotation({ x = 0, y = 180, z = 0 })
    local pos = Population.CELL_POSITIONS[cell.ordinal]
    cell.object.setPosition({ x = pos.x, y = 0, z = pos.z })
    cell.survivor = nil
end

---------------------------------------------------------------------------------------------------

function Population.UpdateInputStat(cell, stat, value)
    cell[stat.."Input"]:Set(value)
end

function Population.UpdateCheckBoxStat(cell, stat, value)
    cell[stat.."CheckBox"]:Set(value)
end

function Population.UpdateCounterStat(cell, stat, value)
    cell[stat.."Counter"]:Set(value)
end

function Population.UpdateCheckBoxSequenceStat(cell, stat, value)
    for i = 1, value do
        cell[stat..i.."CheckBox"]:Set(true)
    end
    for i = value + 1, Population.CHECKBOX_SEQUENCE_MAXES[stat] do
        cell[stat..i.."CheckBox"]:Set(false)
    end
end

Population.statUpdaters = {
    ["name"] = Population.UpdateInputStat,
    ["weaponProficiencyType"] = Population.UpdateInputStat,
    ["notes1"] = Population.UpdateInputStat,
    ["notes2"] = Population.UpdateInputStat,
    ["notes3"] = Population.UpdateInputStat,
    ["notes4"] = Population.UpdateInputStat,
    ["notes5"] = Population.UpdateInputStat,

    ["male"] = Population.UpdateCheckBoxStat,
    ["female"] = Population.UpdateCheckBoxStat,
    ["reroll"] = Population.UpdateCheckBoxStat,
    ["skipNextHunt"] = Population.UpdateCheckBoxStat,
    ["retired"] = Population.UpdateCheckBoxStat,
    ["dead"] = Population.UpdateCheckBoxStat,

    ["survival"] = Population.UpdateCounterStat,
    ["insanity"] = Population.UpdateCounterStat,
    ["movement"] = Population.UpdateCounterStat,
    ["speed"] = Population.UpdateCounterStat,
    ["accuracy"] = Population.UpdateCounterStat,
    ["strength"] = Population.UpdateCounterStat,
    ["evasion"] = Population.UpdateCounterStat,
    ["luck"] = Population.UpdateCounterStat,

    ["huntXp"] = Population.UpdateCheckBoxSequenceStat,
    ["courage"] = Population.UpdateCheckBoxSequenceStat,
    ["understanding"] = Population.UpdateCheckBoxSequenceStat,
    ["weaponProficiencyRank"] = Population.UpdateCheckBoxSequenceStat,

    ["marker"] = function(cell, _, value)
        cell.markerButton:SetImage(value or Population.MARKER_EMPTY)
    end,
}

---------------------------------------------------------------------------------------------------

function Population.SpawnSurvivorBox(survivor, location)
    location = Location.Get(location)

    local survivorBox = SurvivorBox.ForSurvivor(survivor)
    if survivorBox then
        Util.Highlight(survivorBox:Object())
        Util.LookAt({ object = survivorBox:Object() })
        return
    end

    local survivorSheet = SurvivorSheet.ForSurvivor(survivor)
    if survivorSheet then
        Util.Highlight(survivorSheet:Object())
        Util.LookAt({ object = survivorSheet:Object() })
        return
    end

    local blocking = location:BoxClean({ size = { x = 6, y = 5, z = 6 } })
    if #blocking > 0 then
        log:Broadcastf("Please move the highlighted objects out of the way and try again.")
        Util.HighlightAll(blocking)
        Util.LookAt({ location = location })
        return
    end

    Archive.Take({
       name = "Survivor Box",
       type = "Survivor Box",
       location = location,
       rotation = { x = 0, y = 180, z = 0 },
       spawnFunc = function(survivorBoxObject)
           local survivorBox = SurvivorBox.Create(survivor, survivorBoxObject)

           log:Printf("Created survivor box %s for survivor %s", survivorBoxObject.getGUID(), survivor)

           -- Custom model boxes are mad sketchy the turn they come into play: they're treated as "Generic" not "Boxes" for 1 frame
           Wait.frames(function()
               -- Copy the cards table since we need to clear survivor cards before putting them into the box
               local cardsToSpawn = {}
               for _, card in ipairs(survivor:Cards()) do
                   table.insert(cardsToSpawn, card)
               end
               log:Debugf("%s cards to spawn: %s", survivor, cardsToSpawn)

               log:Debugf("Clearing %s cards", survivor)
               survivor:SetCards({})

               -- Spawn all cards
               local height = 3
               for _, card in ipairs(cardsToSpawn) do
                   Archive.Take({ archive = card.type.." Archive", name = card.name, type = card.type, location = location, height = height, spawnFunc = function(cardObject)
                       survivorBoxObject.putObject(cardObject)
                   end})
                   height = height + 0.5

                   -- Must clean up after each Take() since a survivor could have more than one of the same card
                   Archive.CleanUpContainers()
               end

               Util.LookAt({ object = survivorBoxObject })
           end, 1)
       end,
    })
end

---------------------------------------------------------------------------------------------------

return {
    Init = Population.Init,
    PostInit = Population.PostInit,
    Save = Population.Save,
    Import = Population.Import,
    Export = Population.Export,
}
