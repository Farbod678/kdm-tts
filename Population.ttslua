require("Kdm/Check")
local Log = require("Kdm/Log").ForPackage("Population")
local Util = require("Kdm/Util")
local Location = require("Kdm/Location")
local EventManager = require("Kdm/EventManager")
local Survivor = require("Kdm/Survivor")
local SurvivorBox = require("Kdm/SurvivorBox")
local SurvivorSheet = require("Kdm/SurvivorSheet")
local Ui = require("Kdm/Ui")
local MessageBox = require("Kdm/MessageBox")
local Console = require("Kdm/Console")

local Archive = nil
local PlayerBoard = nil

---------------------------------------------------------------------------------------------------

local Population = {}

Population.SURVIVOR_BOX_SIZE = { x = 5.3, y = 5, z = 4.2 }
Population.MAX_CARDS = 10

Population.MAX_UI_ROWS = 5

Population.nextSurvivorId = 1

Population.survivors = {}
Population.survivorsById = {}
Population.survivorUiBySurvivor = {}

Population.survivorBoxesBySurvivor = {}
Population.survivorBoxesByObject = {}

Population.survivorSheetsBySurvivor = {}
Population.survivorSheetsByObject = {}

Population.newSurvivorBonuses = nil

Population.ui = {}

---------------------------------------------------------------------------------------------------

function Population.Init(modules, saveState, expansions, ui)
    Archive = modules.Archive
    PlayerBoard = modules.PlayerBoard

    Population.InitSaveState(saveState)
    Population.InitUi(ui)
end

---------------------------------------------------------------------------------------------------

function Population.InitSaveState(saveState)
    local saveState = saveState or {}
    Population.newSurvivorBonuses = saveState.newSurvivorBonuses

    for _, survivorSaveState in ipairs(saveState.survivors or {}) do
        local survivor = Survivor.Create(survivorSaveState)
        table.insert(Population.survivors, survivor)
        Population.survivorsById[survivor:Id()] = survivor
        Population.nextSurvivorId = Util.Max(Population.nextSurvivorId, survivor:Id() + 1)
    end

    for _, survivorBoxSaveState in ipairs(saveState.survivorBoxes or {}) do
        local survivor = Population.survivorsById[survivorBoxSaveState.survivorId]
        if not survivor then
            return Log.Errorf("SurvivorBox %s was saved with non-existant survivor %d", survivorBoxSaveState.survivorBoxGuid, survivorBoxSaveState.survivorId)
        end

        local object = getObjectFromGUID(survivorBoxSaveState.objectGuid)
        if not object then
            return Log.Errorf("Survivor %d had saves survivor sheet GUID %s, but that object doesn't exist. Try re-creating this survivor's sheet from the Population UI.", survivor:Id(), survivorBoxSaveState.objectGuid)
        end

        local survivorBox = SurvivorBox.Create(survivor, object)

        Population.survivorBoxesBySurvivor[survivor] = survivorBox
        Population.survivorBoxesByObject[object] = survivorBox
    end

    for _, survivorSheetSaveState in ipairs(saveState.survivorSheets or {}) do
        local survivor = Population.survivorsById[survivorSheetSaveState.survivorId]
        if not survivor then
            return Log.Errorf("SurvivorSheet %s was saved with non-existant survivor %d", survivorSheetSaveState.survivorSheetGuid, survivorSheetSaveState.survivorId)
        end

        local object = getObjectFromGUID(survivorSheetSaveState.objectGuid)
        if not object then
            return Log.Errorf("Survivor %d had saves survivor sheet GUID %s, but that object doesn't exist. Try re-creating this survivor's sheet from the Population UI.", survivor:Id(), survivorSheetSaveState.objectGuid)
        end

        local survivorSheet = SurvivorSheet.Create(survivor, object)

        Population.survivorSheetsBySurvivor[survivor] = survivorSheet
        Population.survivorSheetsByObject[object] = survivorSheet
    end
end

---------------------------------------------------------------------------------------------------

function Population.InitUi(ui)
    local panel = Ui.Panel(ui, { id = "Population", x = 30, y = -20, width = 1600, height = 935, active = false })
    Population.ui.panel = panel

    Ui.Image(panel, { id = "Population", rectAlignment = "MiddleCenter", width = 1600, height = 935, image = "Population" })

    Ui.InvisibleButton(panel, { id = "Close", x = 1570-2, y = 905-2, width = 30+4, height = 30+4, onClick = function()
        Population.HideUi()
    end })

    Population.ui.livingSurvivorsText = Ui.DarkText(panel, { id = "LivingSurvivors", x = 118, y = 830, width = 50, height = 50-5, fontSize = 36, alignment = "MiddleCenter" })
    Population.ui.deadSurvivorsText = Ui.DarkText(panel, { id = "DeadSurvivors", x = 286, y = 830, width = 50, height = 50-5, fontSize = 36, alignment = "MiddleCenter" })

    Population.ui.newSurvivorBonusesInput = Ui.DarkInput(panel, { id = "NewSurvivorBonuses", x = 356, y = 830, width = 700, height = 30, fontSize = 20, text = Population.newSurvivorBonuses, onValueChanged = function(value)
        Log.Debugf("Setting new survivor bonuses to %s", value)
        Population.newSurvivorBonuses = value
        Population.ui.newSurvivorBonusesInput:Set(value)
    end })

    Ui.InvisibleButton(panel, { id = "NewSurvivor", x = 1106, y = 830, width = 220, height = 50, onClick = function()
        Population.CreateSurvivor()
    end })

    Population.ui.page = 1
    Population.ui.pageText = Ui.DarkText(panel, { id = "Page", x = 1416, y = 830, width = 94, height = 50, fontSize = 20, textAlignment = "MiddleCenter", text = "Page 1/"..Population.MaxUiPage() })

    Ui.InvisibleButton(panel, { id = "PrevPage", x = 1346, y = 830, width = 50, height = 50, onClick = function()
        Population.PreviousUiPage()
    end })

    Ui.InvisibleButton(panel, { id = "NextPage", x = 1530, y = 830, width = 50, height = 50, onClick = function()
        Population.NextUiPage()
    end })

    Population.ui.survivorUiRows = {}
    for row = 1, Population.MAX_UI_ROWS do
        local survivorUi = {
            row = row,
        }
        Population.ui.survivorUiRows[row] = survivorUi

        local y = 5 + (5 - row) * 162
        survivorUi.panel = Ui.Panel(panel, { id = "SurvivorRow"..row, rectAlignment = "LowerLeft", x = 20, y = y, width = 1560, height = 160, active = false })

        Ui.Image(survivorUi.panel, { id = "SurvivorRow", width = 1560, height = 160, image = "PopulationRow" })

        survivorUi.NameInput = Ui.DarkInput(survivorUi.panel, { id = "Name", x = 0, y = 97, width = 260, height = 50, fontSize = 24, fontStyle = "Bold", placeholder = "Enter survivor name...", onValueChanged = function(value)
            local survivor = survivorUi.survivor
            Log.Debugf("Setting survivor %d Name to %s", survivor:Id(), value)
            survivor:SetName(value)
        end })

        survivorUi.WeaponProficiencyTypeInput = Ui.DarkInput(survivorUi.panel, { id = "WeaponProficiencyType", x = 851, y = 28, width = 150, height = 30, fontSize = 16, fontStyle = "Bold", placeholder = "Enter weapon...", onValueChanged = function(value)
            local survivor = survivorUi.survivor
            Log.Debugf("Setting survivor %d WeaponProficiencyType to %s", survivor:Id(), value)
            survivor:SetWeaponProficiencyType(value)
        end })

        local notesData = {
            { stat = "Notes1", y = 97 },
            { stat = "Notes2", y = 71 },
            { stat = "Notes3", y = 45 },
            { stat = "Notes4", y = 19 },
        }
        for _, data in ipairs(notesData) do
            local stat = data.stat
            survivorUi[stat.."Input"] = Ui.DarkInput(survivorUi.panel, { id = stat, x = 1015, y = data.y, width = 400, height = 26, fontSize = 14, onValueChanged = function(value)
                local survivor = survivorUi.survivor
                Log.Debugf("Setting survivor %d %s to %s", survivor:Id(), stat, value)
                survivor["Set"..stat](survivor, value)
            end })
        end

        local checkBoxData = {
            { stat = "Dead",   x = 281, },
            { stat = "Male",   x = 327, },
            { stat = "Female", x = 367, },
            { stat = "Reroll", x = 416, },
        }
        for _, data in ipairs(checkBoxData) do
            local survivor = survivorUi.survivor
            local stat = data.stat
            survivorUi[stat.."CheckBox"] = Ui.CheckBox(survivorUi.panel, { id = stat, x = data.x, y = 101, width = 20, height = 20, onClick = function()
                local survivor = survivorUi.survivor
                local value = not survivor[stat](survivor)
                Log.Debugf("Setting survivor %d %s to %s", survivor:Id(), stat, tostring(value))
                survivor["Set"..stat](survivor, value)
            end })
        end

        local counterData = {
            { stat = "HuntXp",        x = 465, y = 97 },
            { stat = "Survival",      x = 515, y = 97 },
            { stat = "Insanity",      x = 565, y = 97 },
            { stat = "Courage",       x = 615, y = 97 },
            { stat = "Understanding", x = 665, y = 97 },
            { stat = "WeaponProficiencyRank", x = 815, y = 28 },
        }
        for i, data in ipairs(counterData) do
            local stat = data.stat
            survivorUi[stat.."Counter"] = Ui.Counter(survivorUi.panel, { id = stat, x = data.x, y = data.y, width = 30, height = 30, fontSize = 20, onValueChanged = function(delta)
                local survivor = survivorUi.survivor
                local value = survivor[stat](survivor) + delta
                Log.Debugf("Setting survivor %d %s to %d", survivor:Id(), stat, value)
                survivor["Set"..stat](survivor, value)
            end })
        end

        local counterData = {
            { stat = "Movement",      x = 715, y = 97 },
            { stat = "Speed",         x = 765, y = 97 },
            { stat = "Accuracy",      x = 815, y = 97 },
            { stat = "Strength",      x = 865, y = 97 },
            { stat = "Evasion",       x = 915, y = 97 },
            { stat = "Luck",          x = 965, y = 97 },
        }
        for i, data in ipairs(counterData) do
            local stat = data.stat
            survivorUi[stat.."Counter"] = Ui.Counter(survivorUi.panel, { id = stat, x = data.x, y = data.y, width = 30, height = 30, fontSize = 20, onValueChanged = function(delta)
                local survivor = survivorUi.survivor
                local value = survivor["Unmodified"..stat](survivor) + delta
                Log.Debugf("Setting survivor %d %s to %d", survivor:Id(), stat, value)
                survivor["Set"..stat](survivor, value)
            end })
        end

        survivorUi.cards = {}
        for r = 1, 2 do
            for c = 1, 5 do
                local i = (r - 1) * 5 + c
                local id = "Cards"..i
                local x = 0 + (c - 1) * 160
                local y = 39 - (r - 1) * 25
                survivorUi.cards[i] = {
                    image = Ui.Image(survivorUi.panel, { id = id, x = x, y = y, width = 24, height = 20, active = false }),
                    text = Ui.DarkText(survivorUi.panel, { id = id, x = x + 24, y = y, width = 126, height = 20, fontSize = 12, fontStyle = "Bold", active = false }),
                }
            end
        end

        Ui.InvisibleButton(survivorUi.panel, { id = "Up", x = 1460, y = 106, width = 45, height = 35, onClick = function()
            Population.MoveSurvivorUp(survivorUi)
        end })

        Ui.InvisibleButton(survivorUi.panel, { id = "Down", x = 1515, y = 106, width = 45, height = 35, onClick = function()
            Population.MoveSurvivorDown(survivorUi)
        end })

        Ui.InvisibleButton(survivorUi.panel, { id = "Spawn", x = 1460, y = 60, width = 100, height = 35, onClick = function()
            Population.HideUi()

            local survivor = survivorUi.survivor

            local survivorBox = Population.survivorBoxesBySurvivor[survivor]
            if survivorBox then
                Log.Printf("'%s' is already on the game board", survivor:NameOrUnnamed())
                Util.Highlight(survivorBox:Object())
                Util.LookAt({ object = survivorBox:Object() })
                return
            end

            local survivorSheet = Population.survivorSheetsBySurvivor[survivor]
            if survivorSheet then
                Log.Printf("'%s' is already on the game board", survivor:NameOrUnnamed())
                Util.Highlight(survivorSheet:Object())
                Util.LookAt({ object = survivorSheet:Object() })
                return
            end

            Population.CreateSurvivorBox(survivorUi.survivor, "(11.5, 15.5)")
        end })

        Ui.InvisibleButton(survivorUi.panel, { id = "Delete", x = 1460, y = 16, width = 100, height = 35, onClick = function()
            Population.DeleteSurvivor(survivorUi.survivor)
        end })
    end
end

---------------------------------------------------------------------------------------------------

function Population.NextSurvivorId()
    local id = Population.nextSurvivorId
    Population.nextSurvivorId = Population.nextSurvivorId + 1
    return id
end

---------------------------------------------------------------------------------------------------

function Population.UpdateLivingDead()
    Log.Debugf("Updating living/dead survivor UI text")

    local living = 0
    local dead = 0
    for _, survivor in ipairs(Population.survivors) do
        if survivor:Dead() then
            dead = dead + 1
        else
            living = living + 1
        end
    end
    Population.ui.livingSurvivorsText:SetText(tostring(living))
    Population.ui.deadSurvivorsText:SetText(tostring(dead))
end

---------------------------------------------------------------------------------------------------

function Population.CreateSurvivorBox(survivor, location)
    assert(CheckTagged(survivor, "Survivor"))
    location = Location.Get(location)

    local survivorBox = Population.survivorBoxesBySurvivor[survivor]
    if survivorBox then
        Log.Debugf("SurvivorBox %s already exists for Survivor %d", survivorBox:Object().getGUID(), survivor:Id())
        Util.Highlight(survivorBox:Object())
        Util.LookAt({ object = survivorBox:Object() })
        return
    end

    local blocking = location:BoxClean({ size = Population.SURVIVOR_BOX_SIZE })
    if #blocking > 0 then
        Log.Broadcastf("Please move the highlighted objects out of the way and try creating the survivor box again.")
        Util.HighlightAll(blocking)
        Util.LookAt({ location = location })
        return
    end

    Archive.Take({
        name = "Survivor Box",
        type = "Survivor Box",
        location = location,
        rotation = FACE_UP,
        spawnFunc = function(survivorBoxObject)
            Log.Printf("Created survivor box %s for survivor %d", survivorBoxObject.getGUID(), survivor:Id())

            local survivorBox = SurvivorBox.Create(survivor, survivorBoxObject)
            Population.survivorBoxesBySurvivor[survivor] = survivorBox
            Population.survivorBoxesByObject[survivorBoxObject] = survivorBox

            Wait.frames(function()  -- custom model boxes are mad sketchy the turn they come into play: they're treated as "Generic" not "Boxes" for 1 frame
                -- We pre-create a table of all cards to spawn to avoid any modification of survivor card fields during the spawn loop
                local cardsToSpawn = {}
                for type, cards in pairs(survivor:Cards()) do
                    for _, card in ipairs(cards) do
                        table.insert(cardsToSpawn, { card, type })
                    end
                end
                Log.Debugf("Survivor %d cards to spawn: %s", survivor:Id(), cardsToSpawn)

                Log.Debugf("Clearing survivor %d cards", survivor:Id())
                survivor:SetCards({})

                -- Spawn all cards
                local height = DEFAULT_SPAWN_HEIGHT + 1
                for _, cardToSpawn in ipairs(cardsToSpawn) do
                    local card, type = cardToSpawn[1], cardToSpawn[2]
                    Archive.Take({ archive = type.." Archive", name = card, type = type, location = location, height = height, spawnFunc = function(cardObject)
                        survivorBoxObject.putObject(cardObject)
                    end})
                    height = height + 0.5

                    -- Must clean up after each Take() since a survivor could have more than one of the same card
                    Archive.CleanUpContainers()
                end

                Util.LookAt({ object = survivorBoxObject })
            end, 1)
        end,
    })
end

---------------------------------------------------------------------------------------------------

function Population.CreateAndLinkSurvivorSheet(survivor, playerNumber)
    assert(CheckTagged(survivor, "Survivor"))

    local survivorSheet = Population.survivorSheetsBySurvivor[survivor]
    if survivorSheet then
        return Log.Errorf("Survivor sheet %s already exists for survivor '%s' (%d)", survivorSheet:Object().getGUID(), survivor:Name(), survivor:Id())
    end

    return Archive.Take({ name = "Survivor Sheet", type = "Survivor Sheet", location = "Player "..playerNumber.." Survivor Sheet", height = 0, rotation = FACE_UP, spawnFunc = function(survivorSheetObject)
        -- We have to wait a single frame when taking from an infinite container or the objects will have the same equality/identity value as any other objects taken that frame
        Wait.frames(function()
            Log.Debugf("Created survivor sheet %s for survivor %d", survivorSheetObject.getGUID(), survivor:Id())
            local survivorSheet = SurvivorSheet.Create(survivor, survivorSheetObject)
            Population.survivorSheetsBySurvivor[survivor] = survivorSheet
            Population.survivorSheetsByObject[survivorSheetObject] = survivorSheet

            PlayerBoard.ForPlayer(playerNumber):LinkSurvivorSheet(survivorSheet)

            survivorSheetObject.setLock(true)
            --survivorSheetObject.interactable = false
        end, 1)
    end })
end

---------------------------------------------------------------------------------------------------

function Population.DestroySurvivorSheetAndCreatePackedSurvivorBox(survivorSheet, objectsToPack, location)
    assert(CheckTagged(survivorSheet, "Survivor Sheet"))
    assert(CheckTable(objectsToPack))

    local survivor = survivorSheet:Survivor()
    local survivorBox = Population.survivorBoxesBySurvivor[survivor]
    if survivorBox then
        return Log.Errorf("SurvivorBox %s already exists for Survivor %d", survivorBox:Object().getGUID(), survivor:Id())
    end

    Log.Debugf("Destroying survivor sheet %s and creating survivor box for Survivor %d", survivorSheet:Object().getGUID(), survivor:Id())

    local survivorBoxObject = Archive.Take({ name = "Survivor Box", type = "Survivor Box", location = location, rotation = FACE_UP })

    local packedObjectPositions = {}
    for _, entry in ipairs(objectsToPack) do
        local object, position = entry.object, entry.position
        local name = object.getName()

        if position then
            if not packedObjectPositions[name] then
                packedObjectPositions[name] = {}
            end
            table.insert(packedObjectPositions[name], { position = position, rotation = object.getRotation() })
        end

        Log.Debugf("Putting %s (%s) into survivor %d box", name, object.getGUID(), survivor:Id())
        survivorBoxObject.putObject(object)
    end

    survivor:SetPackedObjectPositions(packedObjectPositions)

    local survivorBox = SurvivorBox.Create(survivor, survivorBoxObject)
    Population.survivorBoxesBySurvivor[survivor] = survivorBox
    Population.survivorBoxesByObject[survivorBoxObject] = survivorBox

    Population.survivorSheetsBySurvivor[survivor] = nil
    Population.survivorSheetsByObject[survivorSheet:Object()] = nil
    survivorSheet:Object().destruct()

    return survivorBox
end

---------------------------------------------------------------------------------------------------

function Population.ReplaceSurvivorBoxWithSheet(survivorBox, playerBoard)
    assert(CheckTagged(survivorBox, "Survivor Box"))
    assert(CheckTagged(playerBoard, "PlayerBoard"))

    local survivor = survivorBox:Survivor()

    local survivorSheet = Population.survivorSheetsBySurvivor[survivor]
    if survivorSheet then
        Log.Errorf("Survivor sheet %s already exists for survivor '%s' (%d), creating new sheet and linking ", survivorSheet:Object().getGUID(), survivor:Name(), survivor:Id())
        Population.survivorSheetsByObject[survivorSheet:Object()] = nil
    end

    Archive.Take({ name = "Survivor Sheet", type = "Survivor Sheet", location = "Player "..playerBoard:Number().." Survivor Sheet", height = 0, rotation = FACE_UP, spawnFunc = function(survivorSheetObject)
        -- We have to wait a single frame when taking from an infinite container or the objects will have the same equality/identity value as any other objects taken that frame
        Wait.frames(function()
            Log.Debugf("Created survivor sheet %s for survivor %d", survivorSheetObject.getGUID(), survivor:Id())

            local survivorSheet = SurvivorSheet.Create(survivor, survivorSheetObject)
            Population.survivorSheetsBySurvivor[survivor] = survivorSheet
            Population.survivorSheetsByObject[survivorSheetObject] = survivorSheet

            Population.survivorBoxesBySurvivor[survivor] = nil
            Population.survivorBoxesByObject[survivorBox:Object()] = nil
            survivorBox:Object().destruct()

            survivorSheetObject.setLock(true)
            --survivorSheetObject.interactable = false

            playerBoard:LinkSurvivorSheet(survivorSheet)
        end, 1)
    end })
end

---------------------------------------------------------------------------------------------------

function Population.ShowUi()
    Log.Debugf("Showing population ui")
    Population.ui.panel:Show()
    Population.ui.open = true
end

function Population.HideUi()
    Log.Debugf("Showing population ui")
    Population.ui.panel:Hide()
    Population.ui.open = false
end

function Population.IsUiOpen()
    return Population.ui.open
end

---------------------------------------------------------------------------------------------------

function Population.UpdateSurvivorUiCards(survivorUi)
    local survivor = survivorUi.survivor

    local cards = survivor:Cards()
    local i = 1
    for _, data in ipairs({
        { type = "Secret Fighting Arts", icon = "FightingArtIcon" },
        { type = "Fighting Arts", icon = "FightingArtIcon" },
        { type = "Disorders", icon = "DisorderIcon" },
        { type = "Severe Injuries", icon = "SevereInjuryIcon" },
        { type = "Abilities", icon = "AbilityIcon" },
    }) do
        for _, card in ipairs(cards[data.type]) do
            if i <= Population.MAX_CARDS then
                local cardsUi = survivorUi.cards[i]
                cardsUi.image:SetImage(data.icon)
                cardsUi.image:Show()
                cardsUi.text:SetText(card)
                cardsUi.text:Show()
                i = i + 1
            end
        end
    end

    while i <= Population.MAX_CARDS do
        local cardsUi = survivorUi.cards[i]
        cardsUi.image:Hide()
        cardsUi.text:Hide()
        i = i + 1
    end
end

---------------------------------------------------------------------------------------------------

function Population.SetSurvivorUi(survivorUi, survivor)
    assert(survivor)

    Log.Debugf("Linking survivor UI row %d to survivor %d", survivorUi.row, survivor:Id())

    survivorUi.survivor = survivor
    Population.survivorUiBySurvivor[survivor] = survivorUi

    survivorUi.panel:Show()

    survivorUi.NameInput:Set(survivor:Name())
    survivorUi.WeaponProficiencyTypeInput:Set(survivor:WeaponProficiencyType())
    survivorUi.Notes1Input:Set(survivor:Notes1())
    survivorUi.Notes2Input:Set(survivor:Notes2())
    survivorUi.Notes3Input:Set(survivor:Notes3())
    survivorUi.Notes4Input:Set(survivor:Notes4())

    survivorUi.DeadCheckBox:Set(survivor:Dead())
    survivorUi.MaleCheckBox:Set(survivor:Male())
    survivorUi.FemaleCheckBox:Set(survivor:Female())
    survivorUi.RerollCheckBox:Set(survivor:Reroll())

    survivorUi.HuntXpCounter:Set(survivor:HuntXp())
    survivorUi.SurvivalCounter:Set(survivor:Survival())
    survivorUi.InsanityCounter:Set(survivor:Insanity())
    survivorUi.CourageCounter:Set(survivor:Courage())
    survivorUi.UnderstandingCounter:Set(survivor:Understanding())
    survivorUi.MovementCounter:Set(survivor:Movement())
    survivorUi.SpeedCounter:Set(survivor:Speed())
    survivorUi.AccuracyCounter:Set(survivor:Accuracy())
    survivorUi.StrengthCounter:Set(survivor:Strength())
    survivorUi.EvasionCounter:Set(survivor:Evasion())
    survivorUi.LuckCounter:Set(survivor:Luck())
    survivorUi.WeaponProficiencyRankCounter:Set(survivor:WeaponProficiencyRank())

    Population.UpdateSurvivorUiCards(survivorUi)
end

---------------------------------------------------------------------------------------------------

function Population.ClearSurvivorUi(survivorUi)
    Log.Debugf("Linking survivor UI row %d", survivorUi.row)

    if survivorUi.survivor then
        Population.survivorUiBySurvivor[survivorUi.survivor] = nil
    end

    survivorUi.survivor = nil
    survivorUi.panel:Hide()
end

---------------------------------------------------------------------------------------------------

function Population.MaxUiPage()
    return Util.Max(1, math.ceil(#Population.survivors / Population.MAX_UI_ROWS))
end

---------------------------------------------------------------------------------------------------

function Population.SetUiPage(page)
    local maxPages = Population.MaxUiPage()
    assert(Check(page >= 1 and page <= maxPages, "Invalid page: %d", page))

    Log.Debugf("Setting Population UI page to %d", page)
    Population.ui.page = page

    local startIndex = (Population.ui.page - 1) * 5 + 1
    local endIndex = Util.Min(startIndex + (Population.MAX_UI_ROWS - 1), #Population.survivors)
    for i = startIndex, endIndex do
        Population.SetSurvivorUi(Population.ui.survivorUiRows[i - startIndex + 1], Population.survivors[i])
    end
    for i = endIndex + 1, startIndex + (Population.MAX_UI_ROWS - 1) do
        Population.ClearSurvivorUi(Population.ui.survivorUiRows[i - startIndex + 1])
    end

    Population.ui.pageText:SetText("Page "..page.."/"..maxPages)
end

function Population.PreviousUiPage()
    if Population.ui.page > 1 then
        Population.SetUiPage(Population.ui.page - 1)
    end
end

function Population.NextUiPage()
    if Population.ui.page < Population.MaxUiPage() then
        Population.SetUiPage(Population.ui.page + 1)
    end
end

---------------------------------------------------------------------------------------------------

function Population.CreateSurvivor()
    local survivor = Survivor.Create({ id = Population.NextSurvivorId() })
    table.insert(Population.survivors, survivor)
    Population.survivorsById[survivor:Id()] = survivor

    Population.UpdateLivingDead()

    Population.SetUiPage(Population.MaxUiPage())

    Log.Debugf("Created new survivor %d", survivor:Id())

    return survivor
end

---------------------------------------------------------------------------------------------------

function Population.DeleteSurvivor(survivor)
    Log.Debugf("Deleting survivor %d", survivor:Id())

    local boxOrSheet = Population.survivorBoxesBySurvivor[survivor] or Population.survivorSheetsBySurvivor[survivor]
    if boxOrSheet then
        Population.HideUi()
        Log.Broadcastf("Please delete survivor sheet / box from the game board first.")
        Util.Highlight(boxOrSheet:Object())
        return
    end

    MessageBox.Show(string.format("Are you sure you want to delete '%s'", survivor:NameOrUnnamed()), function()
        -- We have to check again for the pathological case of spawning a box while the message box is up
        local boxOrSheet = Population.survivorBoxesBySurvivor[survivor] or Population.survivorSheetsBySurvivor[survivor]
        if boxOrSheet then
            Population.HideUi()
            Log.Broadcastf("Please delete this survivor's sheet / box from the game board first.")
            Util.Highlight(boxOrSheet:Object())
            return
        end

        local index = nil
        for i, s in ipairs(Population.survivors) do
            if s == survivor then
                index = i
                break
            end
        end

        if not index then
            return Log.Debugf("Survivor %d not found, it must have already been deleted", survivor:Id())
        end

        table.remove(Population.survivors, index)
        Population.survivorsById[survivor:Id()] = nil

        local maxPage = Population.MaxUiPage()
        if Population.ui.page > maxPage then
            Log.Debugf("Deleted last survivor from last page %d, moving to page %d", Population.ui.page, maxPage)
            Population.SetUiPage(maxPage)
        else
            Population.SetUiPage(Population.ui.page)
        end

        Population.UpdateLivingDead()

        EventManager.FireEvent("onDeleteSurvivor", survivor)

        Log.Printf("Deleted survivor '%s'", survivor:NameOrUnnamed())
    end)
end

---------------------------------------------------------------------------------------------------

function Population.MoveSurvivorUp(survivorUi)
    local index = (Population.ui.page - 1) * Population.MAX_UI_ROWS + survivorUi.row
    if index <= 1 then
        return
    end

    local survivor = Population.survivors[index]
    local otherSurvivor = Population.survivors[index - 1]

    assert(survivorUi.survivor == survivor)

    Population.survivors[index] = otherSurvivor
    Population.survivors[index - 1] = survivor

    local page = math.ceil((index - 1) / Population.MAX_UI_ROWS)
    Population.SetUiPage(page)
end

---------------------------------------------------------------------------------------------------

function Population.MoveSurvivorDown(survivorUi)
    local index = (Population.ui.page - 1) * Population.MAX_UI_ROWS + survivorUi.row
    if index >= #Population.survivors then
        return
    end

    local survivor = Population.survivors[index]
    local otherSurvivor = Population.survivors[index + 1]

    assert(survivorUi.survivor == survivor)

    Population.survivors[index] = otherSurvivor
    Population.survivors[index + 1] = survivor

    local page = math.ceil((index + 1) / Population.MAX_UI_ROWS)
    Population.SetUiPage(page)
end

---------------------------------------------------------------------------------------------------

function Population.OnDestroy(object)
    local survivorBox = Population.survivorBoxesByObject[object]
    if survivorBox then
        Log.Debugf("Survivor box %s for survivor %d left play", object.getGUID(), survivorBox:Survivor():Id())
        Population.survivorBoxesBySurvivor[survivorBox:Survivor()] = nil
        Population.survivorBoxesByObject[object] = nil
    end

    local survivorSheet = Population.survivorSheetsByObject[object]
    if survivorSheet then
        Log.Debugf("Survivor sheet %s for survivor %d left play", object.getGUID(), survivorSheet:Survivor():Id())
        Population.survivorSheetsBySurvivor[survivorSheet:Survivor()] = nil
        Population.survivorSheetsByObject[object] = nil
    end
end

---------------------------------------------------------------------------------------------------

function Population.UpdateSurvivorBoxCards(survivorBox)
    local cards = {}
    for _, type in ipairs(Survivor.CARD_TYPES) do
        cards[type] = {}
    end

    for _, objectInBox in ipairs(survivorBox:Object().getObjects()) do
        if cards[objectInBox.gm_notes] then
            table.insert(cards[objectInBox.gm_notes], objectInBox.name)
        end
    end
    --Log.Debugf("Survivor %d updated cards: %s", survivorBox:Survivor():Id(), cards)
    survivorBox:Survivor():SetCards(cards)
end

---------------------------------------------------------------------------------------------------

Population.ui.statSetters = {}
for _, stat in ipairs({ "Name", "WeaponProficiencyType", "Notes1", "Notes2", "Notes3", "Notes4" }) do
    Population.ui.statSetters[stat] = function(survivorUi, value)
        survivorUi[stat.."Input"]:Set(value)
    end
end
for _, stat in ipairs({ "Dead", "Male", "Female", "Reroll" }) do
    Population.ui.statSetters[stat] = function(survivorUi, value)
        survivorUi[stat.."CheckBox"]:Set(value)
    end
end
for _, stat in ipairs({ "HuntXp", "Survival", "Insanity", "Courage", "Understanding", "Movement", "Speed", "Accuracy", "Strength", "Evasion", "Luck", "WeaponProficiencyRank" }) do
    Population.ui.statSetters[stat] = function(survivorUi, value)
        survivorUi[stat.."Counter"]:Set(value)
    end
end

---------------------------------------------------------------------------------------------------

function Population.PostInit()
    Population.SetUiPage(1)
    Population.UpdateLivingDead()

    EventManager.AddHandler("onObjectDestroy", Population.OnDestroy)

    EventManager.AddHandler("onObjectEnterContainer", function(container, object)
        local survivorBox = Population.survivorBoxesByObject[container]
        if survivorBox then
            Population.UpdateSurvivorBoxCards(survivorBox)
        end
    end)

    EventManager.AddHandler("onObjectLeaveContainer", function(container, object)
        local survivorBox = Population.survivorBoxesByObject[container]
        if survivorBox then
            Population.UpdateSurvivorBoxCards(survivorBox)
        end
    end)

    EventManager.AddHandler("filterObjectEnterContainer", function(container, object, previousReturnValue)
        if previousReturnValue == false then
            return false
        end

        if Population.survivorBoxesByObject[object] or Population.survivorSheetsByObject[object] then
            Log.Printf("Survivor sheets and boxes cannot be put into containers.")
            return false
        end

        return true
    end)

    EventManager.AddHandler("onSurvivorStatChange", function(survivor, stat, value)
        if stat == "Name" then
            local survivorBox = Population.survivorBoxesBySurvivor[survivor]
            if survivorBox then
                survivorBox:SetName(value)
                survivorBox:Object().setName(value)
            end
        end

        local survivorSheet = Population.survivorSheetsBySurvivor[survivor]
        if survivorSheet then
            survivorSheet:SetStat(stat, value)
        end

        local survivorUi = Population.survivorUiBySurvivor[survivor]
        if survivorUi then
            local setter = Population.ui.statSetters[stat]
            if setter then  -- some stats we don't have UI/setters for, such as "skip next hunt"
                setter(survivorUi, value)
            end
        end

        if stat == "Dead" then
            Population.UpdateLivingDead()
        end
    end)

    EventManager.AddHandler("onChangeSurvivorCards", function(survivor)
        local survivorUi = Population.survivorUiBySurvivor[survivor]
        if survivorUi then
            Population.UpdateSurvivorUiCards(survivorUi)
        end
    end)
end

---------------------------------------------------------------------------------------------------

function Population.Save()
    local survivors = {}
    for _, survivor in ipairs(Population.survivors) do
        table.insert(survivors, survivor:Save())
    end

    local survivorBoxes = {}
    for _, survivorBox in pairs(Population.survivorBoxesBySurvivor) do
        table.insert(survivorBoxes, survivorBox:Save())
    end

    local survivorSheets = {}
    for _, survivorSheet in pairs(Population.survivorSheetsBySurvivor) do
        table.insert(survivorSheets, survivorSheet:Save())
    end

    return {
        newSurvivorBonuses = Population.newSurvivorBonuses,
        survivors = survivors,
        survivorBoxes = survivorBoxes,
        survivorSheets = survivorSheets,
    }
end

---------------------------------------------------------------------------------------------------

function Population.Export()
    local survivors = {}
    for _, survivor in ipairs(Population.survivors) do
        table.insert(survivors, survivor:Save())
    end
    return {
        newSurvivorBonuses = Population.newSurvivorBonuses,
        survivors = survivors,
    }
end

---------------------------------------------------------------------------------------------------

function Population.Import(data)
    Population.nextSurvivorId = 1

    Population.survivors = {}
    Population.survivorsById = {}
    Population.survivorUiBySurvivor = {}

    for object, survivorBox in pairs(Population.survivorBoxesByObject) do
        object.destruct()
    end
    Population.survivorBoxesBySurvivor = {}
    Population.survivorBoxesByObject = {}

    for object, survivorSheet in pairs(Population.survivorSheetsByObject) do
        object.destruct()
    end
    Population.survivorSheetsBySurvivor = {}
    Population.survivorSheetsByObject = {}

    for _, survivorSaveState in ipairs(data.survivors or {}) do
        local survivor = Survivor.Create(survivorSaveState)
        table.insert(Population.survivors, survivor)
        Population.survivorsById[survivor:Id()] = survivor
        Population.nextSurvivorId = Util.Max(Population.nextSurvivorId, survivor:Id() + 1)
    end

    Population.newSurvivorBonuses = data.newSurvivorBonuses
    Population.ui.newSurvivorBonusesInput:Set(Population.newSurvivorBonuses)

    Population.UpdateLivingDead()
    Population.SetUiPage(1)
end

---------------------------------------------------------------------------------------------------

function Population.SurvivorForId(id)
    return Population.survivorsById[id]
end

function Population.SurvivorBoxForObject(object)
    return Population.survivorBoxesByObject[object]
end

function Population.SurvivorSheetForObject(object)
    return Population.survivorSheetsByObject[object]
end

---------------------------------------------------------------------------------------------------

Console.AddCommand("pop_boxes", function(args)
    for object, survivorBox in pairs(Population.survivorBoxesByObject) do
        Log.Printf("%s -> %d/%s", object.getGUID(), survivorBox:Survivor():Id(), survivorBox:Object().getGUID())
    end
end)

Console.AddCommand("pop_sheets", function(args)
    for object, survivorSheet in pairs(Population.survivorSheetsByObject) do
        Log.Printf("%s -> %d/%s", object.getGUID(), survivorSheet:Survivor():Id(), survivorSheet:Object().getGUID())
    end
end)

---------------------------------------------------------------------------------------------------

return {
    Init = Population.Init,
    PostInit = Population.PostInit,

    Save = Population.Save,

    Import = Population.Import,
    Export = Population.Export,

    SurvivorForId = Population.SurvivorForId,
    SurvivorSheetForObject = Population.SurvivorSheetForObject,
    SurvivorBoxForObject = Population.SurvivorBoxForObject,

    CreateSurvivorBox = Population.CreateSurvivorBox,
    CreateAndLinkSurvivorSheet = Population.CreateAndLinkSurvivorSheet,
    ReplaceSurvivorBoxWithSheet = Population.ReplaceSurvivorBoxWithSheet,
    DestroySurvivorSheetAndCreatePackedSurvivorBox = Population.DestroySurvivorSheetAndCreatePackedSurvivorBox,

    ShowUi = Population.ShowUi,
    HideUi = Population.HideUi,
    IsUiOpen = Population.IsUiOpen,
}
