local Check = require("Kdm/Util/Check")
local Util = require("Kdm/Util/Util")
local log = require("Kdm/Log").ForModule("Timeline")
local Trie = require("Kdm/Trie")
local Ui = require("Kdm/Ui")
local EventManager = require("Kdm/Util/EventManager")
local Container = require("Kdm/Util/Container")
local Location = require("Kdm/Location")

local Archive = nil
local Rules = nil
local Setup = nil
local Showdown = nil
local Hunt = nil

-------------------------------------------------------------------------------------------------

local Timeline = {
    MAX_YEARS = 30,
    MAX_YEAR_EVENTS = 6,
    MAX_SURVIVAL_ACTIONS = 6,
    MAX_MILESTONES = 4,
    MAX_QUARRIES = 10,
    MAX_NOTES = 6,
    MAX_TIMELINE_EVENT_POPUP_RESULTS = 5,

    RIGHT_MOUSE_BUTTON = "-2",
    EVENT_TYPE_ICONS = {
        ["RulebookEvent"] =  "RulebookEventIcon",
        ["HuntEvent"] = "HuntEventIcon",
        ["ShowdownEvent"] = "ShowdownEventIcon",
        ["SettlementEvent"] = "SettlementEventIcon",
    },
    EVENT_TYPE_IMAGES = {
        ["RulebookEvent"] = "RulebookEventButton",
        ["HuntEvent"] = "HuntEventButton",
        ["ShowdownEvent"] = "ShowdownEventButton",
        ["SettlementEvent"] = "SettlementEventButton",
    },

    trie = Trie(),
}

Timeline.defaultEvents = {
    {
        keywords = { "Unspecified", "Nemesis"},
        event = {
            type = "ShowdownEvent",
            name = "Unspecified Nemesis",
            nemesis = true,
        },
    },
}
for level = 1, 3 do
    table.insert(Timeline.defaultEvents, {
        keywords = { "Unspecified", "Nemesis", "Level", tostring(level) },
        event = {
            type = "ShowdownEvent",
            name = "Unspecified Nemesis - Level "..level,
            nemesis = true,
        },
    })
end
for _, event in ipairs(Timeline.defaultEvents) do
    for _, keyword in ipairs(EventManager.keywords) do
        Timeline.trie:Set(keyword, EventManager.event)
    end
end

---------------------------------------------------------------------------------------------------

function Timeline.Init(modules, saveState, expansions, ui)
    Timeline.InitModules(modules)
    Timeline.InitState(saveState)
    Timeline.InitExpansions(expansions)
    Timeline.InitUi(ui)
end

---------------------------------------------------------------------------------------------------

function Timeline.InitModules(modules)
    Archive = modules.Archive
    Rules = modules.Rules
    Showdown = modules.Showdown
    Hunt = modules.Hunt
    Setup = modules.Setup
end

---------------------------------------------------------------------------------------------------

function Timeline.InitState(saveState)
    saveState = saveState or {}
    Timeline.state = {}
    Timeline.state.name = saveState.name
    Timeline.state.survivalLimit = saveState.survivalLimit or 1
    Timeline.state.departingBonuses = saveState.departingBonuses
    Timeline.state.arrivalBonuses = saveState.arrivalBonuses
    Timeline.state.survivalActions = saveState.survivalActions or {}
    Timeline.state.milestones = saveState.milestones or {}
    Timeline.state.quarries = saveState.quarries or {}
    Timeline.state.notes = saveState.notes or {}
    Timeline.state.timeline = {}
    local saveStateTimeline = saveState.timeline or {}
    for year = 1, Timeline.MAX_YEARS do
        local saveStateTimelineYear = saveStateTimeline[year] or {}
        Timeline.state.timeline[year] = {
            checked = saveStateTimelineYear.checked,
            events = saveStateTimelineYear.events or {},
        }
    end
end

---------------------------------------------------------------------------------------------------

function Timeline.InitExpansions(expansions)
    for _, expansion in ipairs(expansions) do
        for _, rulebook in ipairs(expansion.rulebooks or {}) do
            for name, page in pairs(rulebook.pages) do
                if page.timelineEvent then
                    local event = {
                        name = name,
                        type = "RulebookEvent",
                        rulebook = rulebook.name,
                        state = page.state,
                        expansion = expansion,
                    }
                    for _, keyword in ipairs(page.keywords) do
                        Timeline.trie:Set(keyword, event)
                    end
                end
            end
        end

        for _, monster in ipairs(expansion.monsters or {}) do
            local monsterKeywords = Util.Split(monster.name, " ")
            if #monster.levels == 1 then
                local event = {
                    type = monster.nemesis and "ShowdownEvent" or "HuntEvent",
                    name = Timeline.ShowdownEventTimelineName(monster.name, nil, monster.nemesis),
                    monster = monster.name,
                    expansion = expansion,
                }
                for _, keyword in ipairs(monsterKeywords) do
                    Timeline.trie:Set(keyword, event)
                end
            else
                for _, level in ipairs(monster.levels) do
                    local levelKeywords = Util.Split(level.name, " ")
                    local event = {
                        type = monster.nemesis and "ShowdownEvent" or "HuntEvent",
                        name = Timeline.ShowdownEventTimelineName(monster.name, level.name, monster.nemesis),
                        monster = monster.name,
                        level = level.name,
                        expansion = expansion,
                    }
                    for _, keyword in ipairs(Util.ConcatArrays(monsterKeywords, levelKeywords)) do
                        Timeline.trie:Set(keyword, event)
                    end
                end
            end
        end

        for _, settlementEvent in ipairs(expansion.settlementEvents or {}) do
            for _, keyword in ipairs(Util.Split(settlementEvent, " ")) do
                Timeline.trie:Set(keyword, {
                    name = settlementEvent,
                    type = "SettlementEvent",
                    expansion = expansion,
                })
            end
        end
    end
end

---------------------------------------------------------------------------------------------------

function Timeline.InitUi(ui)
    Timeline.ui = { open = false }
    local panel = Ui.Panel(ui, { id = "Timeline", width = 1600, height = 935, x = 30, y = -20, active = false })
    Timeline.ui.panel = panel
    Ui.Image(panel, { id = "Timeline", rectAlignment = "MiddleCenter", image = "Settlement", width = 1600, height = 935 })

    Ui.InvisibleButton(panel, { id = "Close", x = 1570, y = 905,  width = 30, height = 30, onClick = function ()
        Timeline.HideUi()
    end })

    Timeline.ui.nameInput = Ui.DarkInput(panel, { id = "Name", x = 198, y = 851, width = 482, height = 40, fontSize = 24, onValueChanged = function(value)
        log:Debugf("Setting settlement name to %s", value)
        Timeline.state.name = value
    end })

    Timeline.ui.survivalLimitCounter = Ui.Counter(panel, { id = "SurvivalLimit", x = 793, y = 830, width = 50, height = 50, fontSize = 36, onValueChanged = function(delta)
        local value = Timeline.state.survivalLimit + delta
        Timeline.state.survivalLimit = value
        log:Debugf("Setting survival limit to %d", value)
        Timeline.ui.survivalLimitCounter:Set(value)
    end })

    Timeline.ui.departingBonusesInput = Ui.DarkInput(panel, { id = "DepartingBonus", x = 980, y = 865, width = 288, height = 25, onValueChanged = function(value)
        log:Debugf("Setting departing bonuses to %s", value)
        Timeline.state.departingBonuses = value
        Timeline.ui.departingBonusesInput:Set(value)
    end })
    Timeline.ui.arrivalBonusesInput = Ui.DarkInput(panel, { id = "ArrivalBonus", x = 980, y = 830, width = 288, height = 25, onValueChanged = function(value)
        log:Debugf("Setting arrival bonuses to %s", value)
        Timeline.state.arrivalBonuses = value
        Timeline.ui.arrivalBonusesInput:Set(value)
    end })

    Timeline.ui.survivalActionCheckBoxes = {}
    Timeline.ui.survivalActionTexts = {}
    local coords = {
        { x = 1301, y = 803 },
        { x = 1301, y = 773 },
        { x = 1301, y = 743 },
        { x = 1435, y = 803 },
        { x = 1435, y = 773 },
        { x = 1435, y = 743 },
    }
    for i = 1, Timeline.MAX_SURVIVAL_ACTIONS do
        local x, y = coords[i].x, coords[i].y
        Timeline.ui.survivalActionCheckBoxes[i] = Ui.CheckBox(panel, { id = "SurvivalAction"..i, x = x, y = y, width = 20, height = 20, active = false, onClick = function()
            local survivalAction = Timeline.state.survivalActions[i]
            if survivalAction then
                local value = not survivalAction.checked
                log:Debugf("%s survival action %s", value and "Checking" or "Unchecking", survivalAction.name)
                survivalAction.checked = value
                Timeline.ui.survivalActionCheckBoxes[i]:Set(value)
            end
        end })
        Timeline.ui.survivalActionTexts[i] = Ui.DarkText(panel, { id = "SurvivalAction"..i, x = x+26, y = y-5, width = 100, height = 30, fontSize = 12, fontStyle = "Bold", active = false })
    end

    Timeline.ui.milestones = {}
    local checkBoxY = 638
    local textY = checkBoxY - 5
    local buttonY = 633
    local dy = 40
    for i = 1, Timeline.MAX_MILESTONES do
        local milestoneUi = {}
        Timeline.ui.milestones[i] = milestoneUi

        milestoneUi.checkBox = Ui.CheckBox(panel, { id = "Milestone"..i, x = 1301, y = checkBoxY, width = 20, height = 20, active = false, onClick = function()
            local milestone = Timeline.state.milestones[i]
            assert(milestone)
            local value = not milestone.checked
            log:Debugf("%s milestone %s", value and "Checking" or "Unchecking", milestone.name)
            milestone.checked = value
            Timeline.ui.milestones[i].checkBox:Set(value)
        end })
        milestoneUi.text = Ui.DarkText(panel, { id = "Milestone"..i, x = 1326, y = textY, width = 86, fontSize = 12, fontStyle = "Bold", active = false })
        milestoneUi.eventButton = Ui.ImageButton(panel, { id = "MilestoneEvent"..i, x = 1417, y = buttonY, width = 145, height = 30, image = "MilestoneButton", active = false, onClick = function()
            local milestone = Timeline.state.milestones[i]
            assert(milestone)
            Timeline.HideUi()
            local rulebook, state = Rules.RulebookAndState(milestone.event)
            Rules.SpawnRules(rulebook, state)
        end })
        milestoneUi.eventText = Ui.LightText(panel, { id = "MilestoneEvent"..i, x = 1447, y = buttonY, width = 108, height = 30, fontSize = 12, active = false })

        checkBoxY = checkBoxY- dy
        textY = textY - dy
        buttonY = buttonY - dy
    end

    local dy = 27
    Timeline.ui.quarryInputs = {}
    for i = 1, Timeline.MAX_QUARRIES do
        local x = (i <= 5) and 1301 or 1437
        local row = (i - 1) % 5
        Timeline.ui.quarryInputs[i] = Ui.DarkInput(panel, { id = "Quarries"..i, x = x, y = 412.000 - (row * dy), width = 125, height = 25, fontSize = 12, fontStyle = "Bold", onValueChanged = function(value)
            log:Debugf("Setting quarries[%d] to %s", i, value)
            Timeline.state.quarries[i] = value
            Timeline.ui.quarryInputs[i]:Set(value)
        end })
    end

    Timeline.ui.notesInputs = {}
    local dy = 27
    for i = 1, Timeline.MAX_NOTES do
        Timeline.ui.notesInputs[i] = Ui.DarkInput(panel, { id = "Notes"..i, x = 1301, y = 192 - (i - 1) * dy, width = 261, height = 25, onValueChanged = function(value)
            log:Debugf("Setting settlement notes %d to %s", i, value)
            Timeline.state.notes[i] = value
            Timeline.ui.notesInputs[i]:Set(value)
        end })
    end

    -----------------------------------------------------------------------------------------------

    local scroll = Ui.VerticalScroll(panel, { x = 23, y = 23, width = 1242, height = 760 - 6 })
    local timelinePanel = Ui.Panel(scroll, { id = "Timeline", width = 1242, height = 1563 })
    Ui.Image(timelinePanel, { id = "Timeline", rectAlignment = "MiddleCenter", image = "Timeline30", width = 1242, height = 1563 })

    local x1 = 78
    local width = 172
    local dx = 192
    local dy = -52
    local offset = 30

    Timeline.ui.timeline = {}
    for year = 1, Timeline.MAX_YEARS do
        local yearData = Timeline.state.timeline[year]

        local yearUi = {}
        Timeline.ui.timeline[year] = yearUi

        local y = 1528 + ((year - 1) * dy)
        yearUi.checkBox = Ui.CheckBox(timelinePanel, { id = "Year"..year, x = 10, y = y, width = 20, height = 20, onClick = function()
            local value = not Timeline.state.timeline[year].checked
            log:Debugf("%s year %d", value and "Checking" or "Unchecking", year)
            Timeline.state.timeline[year].checked = value
            yearUi.checkBox:Set(value)
        end })

        yearUi.events = {}
        local y = 1523 + ((year - 1) * dy)
        for event = 1, Timeline.MAX_YEAR_EVENTS do
            local eventUi = {}
            yearUi.events[event] = eventUi

            local id = "Year"..year.."Event"..event
            local x = x1 + ((event - 1) * dx)
            eventUi.button = Ui.InvisibleButton(timelinePanel, { id = id, x = x, y = y, width = width, height = 30, onClick = function(mouseButton)
                Timeline.ShowTimelineEventPopup(year, event)
            end })
            eventUi.text = Ui.LightText(timelinePanel, { id = id, x = x + offset, y = y, width = width - offset, height = 30, fontSize = 12, active = false })
        end
    end

    -----------------------------------------------------------------------------------------------

    local popupUi = { open = false }
    Timeline.ui.timelineEventPopup = popupUi

    local addTimelineEventPanel = Ui.Panel(panel, { id = "AddTimelineEvent", width = 376, height = 493, active = false })
    popupUi.panel = addTimelineEventPanel

    Ui.Image(addTimelineEventPanel, { id = "AddTimelineEvent", rectAlignment = "MiddleCenter", image = "AddTimelineEvent", width = 376, height = 493 })

    Ui.InvisibleButton(addTimelineEventPanel, { id = "Close", x = 336, y = 453, width = 30, height = 30, onClick = function()
        Timeline.HideTimelineEventPopup()
    end })

    popupUi.searchInput = Ui.LightInput(addTimelineEventPanel, { id = "Search", x = 13+3, y = 411, width = 350-6, height = 30, placeholder = "search events...", onValueChanged = Timeline.SearchEvents })

    popupUi.results = {}
    popupUi.resultButtons = {}
    popupUi.resultIcons = {}
    popupUi.resultTexts = {}
    for i = 1, Timeline.MAX_TIMELINE_EVENT_POPUP_RESULTS do
        local y = (246 + 150) - (i * 30)
        local x = 13+3
        popupUi.resultButtons[i] = Ui.InvisibleButton(addTimelineEventPanel, { id = "SearchResult"..i, x = x, y = y, width = 350-6, height = 30, active = false, onClick = function()
            local data = popupUi
            Timeline.AddTimelineEvent(data.year, data.event, data.results[i])
            Timeline.HideTimelineEventPopup()
        end })
        x = x + 2   -- 2 padding
        popupUi.resultIcons[i] = Ui.Image(addTimelineEventPanel, { id = "SearchResult"..i, rectAlignment = "LowerLeft", x = x, y = y+5, width = 24, height = 20, active = false })
        x = x + 24 + 3  -- 3 padding
        popupUi.resultTexts[i] = Ui.LightText(addTimelineEventPanel, { id = "SearchResult"..i, x = x, y = y, width = 350-6-24-6, height = 30, fontSize = 14, active = false })
    end

    popupUi.customNameInput = Ui.LightInput(addTimelineEventPanel, { id = "CustomName", x = 13+3, y = 108, width = 350-6, height = 30, placeholder = "enter event name...", onValueChanged = function(value)
        log:Debugf("Setting custom name to %s", value)
        popupUi.customName = value
    end })

    popupUi.type = "RulebookEvent"
    popupUi.typeOptions = Ui.OptionBoxGroup(addTimelineEventPanel, { id = "Type", onClick = function(option)
        local type = option:Value()
        log:Debugf("Selecting custom event type %s", type)
        popupUi.type = type
        popupUi.typeOptions:Set(option)
    end })
    popupUi.rulebookEventOption = Ui.OptionBox(popupUi.typeOptions, { x = 58, y = 68, width = 20, height = 20, value = true, value = "RulebookEvent" })
    popupUi.showdownEventOption = Ui.OptionBox(popupUi.typeOptions, { x = 166, y = 68, width = 20, height = 20, value = "ShowdownEvent" })
    popupUi.settlementEventOption = Ui.OptionBox(popupUi.typeOptions, { x = 270, y = 68, width = 20, height = 20, value = "SettlementEvent" })

    Ui.InvisibleButton(addTimelineEventPanel, { id = "Add", x = 65, y = 13, width = 100, height = 30, onClick = function()
        local data = popupUi
        if data.customName == nil or data.customName == "" then
            return log:Broadcastf("Please enter the event's name.")
        end

        Timeline.AddTimelineEvent(data.year, data.event,  { name = data.customName, type = data.type, custom = true })
        Timeline.HideTimelineEventPopup()
    end })
    Ui.InvisibleButton(addTimelineEventPanel, { id = "Cancel", x = 211, y = 13, width = 100, height = 30, onClick = Timeline.HideTimelineEventPopup })
end

---------------------------------------------------------------------------------------------------

function Timeline.PostInit()
    Timeline.SetUiFromState()
end

---------------------------------------------------------------------------------------------------

function Timeline.SetUiFromState()
    Timeline.ui.nameInput:Set(Timeline.state.name)
    Timeline.ui.survivalLimitCounter:Set(Timeline.state.survivalLimit)
    Timeline.ui.departingBonusesInput:Set(Timeline.state.departingBonuses)
    Timeline.ui.arrivalBonusesInput:Set(Timeline.state.arrivalBonuses)

    for i, survivalAction in ipairs(Timeline.state.survivalActions) do
        Timeline.ui.survivalActionCheckBoxes[i]:Show()
        Timeline.ui.survivalActionCheckBoxes[i]:Set(survivalAction.checked)
        Timeline.ui.survivalActionTexts[i]:Show()
        Timeline.ui.survivalActionTexts[i]:SetText(survivalAction.name)
    end
    for i = #Timeline.state.survivalActions + 1, Timeline.MAX_SURVIVAL_ACTIONS do
        Timeline.ui.survivalActionCheckBoxes[i]:Hide()
        Timeline.ui.survivalActionTexts[i]:Hide()
    end

    for i, milestone in ipairs(Timeline.state.milestones) do
        local milestoneUi = Timeline.ui.milestones[i]
        milestoneUi.checkBox:Show()
        milestoneUi.checkBox:Set(milestone.checked)
        milestoneUi.text:Show()
        milestoneUi.text:SetText(milestone.name)
        milestoneUi.eventButton:Show()
        milestoneUi.eventText:Show()
        milestoneUi.eventText:SetText(milestone.event)
    end
    for i = #Timeline.state.milestones + 1, Timeline.MAX_MILESTONES do
        local milestoneUi = Timeline.ui.milestones[i]
        milestoneUi.checkBox:Hide()
        milestoneUi.text:Hide()
        milestoneUi.eventButton:Hide()
        milestoneUi.eventText:Hide()
    end

    for i = 1, Timeline.MAX_QUARRIES do
        Timeline.ui.quarryInputs[i]:Set(Timeline.state.quarries[i])
    end

    for i = 1, Timeline.MAX_NOTES do
        Timeline.ui.notesInputs[i]:Set(Timeline.state.notes[i])
    end

    for year = 1, Timeline.MAX_YEARS do
        local yearData = Timeline.state.timeline[year]
        local yearUi = Timeline.ui.timeline[year]
        yearUi.checkBox:Set(yearData.checked)
        for event = 1, Timeline.MAX_YEAR_EVENTS do
            local eventData = yearData.events[event]
            if eventData then
                Timeline.AddTimelineEvent(year, event, eventData)
            else
                Timeline.RemoveTimelineEvent(year, event)
            end
        end
    end
end

-----------------------------------------------------------------------------------------------

function Timeline.Save()
    local saveData = {
        name = Timeline.state.name,
        survivalLimit = Timeline.state.survivalLimit,
        departingBonuses = Timeline.state.departingBonuses,
        arrivalBonuses = Timeline.state.arrivalBonuses,
        survivalActions = Timeline.state.survivalActions,
        milestones = Timeline.state.milestones,
        quarries = Timeline.state.quarries,
        notes = Timeline.state.notes,
    }

    saveData.timeline = {}
    for year, yearData in pairs(Timeline.state.timeline) do
        saveData.timeline[year] = {
            checked = yearData.checked,
            events = {},
        }
        for event, eventData in pairs(yearData.events) do
            saveData.timeline[year].events[event] = eventData
        end
    end

    return saveData
end

---------------------------------------------------------------------------------------------------

function Timeline.Import(importState)
    Timeline.InitState(importState)
    Timeline.SetUiFromState()
end

---------------------------------------------------------------------------------------------------

function Timeline.Export()
    return Timeline.Save()
end

---------------------------------------------------------------------------------------------------

function Timeline.ShowUi()
    log:Debugf("Showing settlement ui")
    Timeline.ui.panel:Show()
    Timeline.ui.open = true
end

---------------------------------------------------------------------------------------------------

function Timeline.HideUi()
    log:Debugf("Hiding settlement ui")
    Timeline.ui.panel:Hide()
    Timeline.ui.open = false
end

---------------------------------------------------------------------------------------------------

function Timeline.IsUiOpen()
    return Timeline.ui.open
end

---------------------------------------------------------------------------------------------------

function Timeline.ShowTimelineEventPopup(year, event)
    if Timeline.ui.timelineEventPopup.open then
        log:Debugf("Timeline event panel already open")
        return
    end

    log:Debugf("Showing timeline event panel for year %d, event %d", year, event)

    Timeline.ui.timelineEventPopup.panel:Show()
    Timeline.ui.timelineEventPopup.open = true
    Timeline.ui.timelineEventPopup.year = year
    Timeline.ui.timelineEventPopup.event = event
end

---------------------------------------------------------------------------------------------------

function Timeline.HideTimelineEventPopup()
    log:Debugf("Hiding Timeline event popup")

    Timeline.ui.timelineEventPopup.panel:Hide()
    Timeline.ui.timelineEventPopup.open = nil
    Timeline.ui.timelineEventPopup.year = nil
    Timeline.ui.timelineEventPopup.event = nil

    Timeline.ui.timelineEventPopup.searchInput:Set(nil)
    Timeline.SetEventSearchResults({})

    Timeline.ui.timelineEventPopup.customName = nil
    Timeline.ui.timelineEventPopup.customNameInput:Set(nil)

    Timeline.ui.timelineEventPopup.type = "RulebookEvent"
    Timeline.ui.timelineEventPopup.typeOptions:Set(Timeline.ui.timelineEventPopup.rulebookEventOption)
end

---------------------------------------------------------------------------------------------------

function Timeline.SearchEvents(searchTerms)
    if searchTerms == nil or searchTerms == "" then
        Timeline.SetEventSearchResults({})
    end

    -- only accept results that match all terms
    local matchIndex = {}
    local i = 1
    for term in string.gmatch(searchTerms, "%S+") do
        local termMatches = Timeline.trie:Get(term)
        local termIndex = Util.Index(termMatches, "name")
        matchIndex = (i == 1) and termIndex or Util.Intersect(matchIndex, termIndex)
        i = i + 1
    end

    -- sort matches
    local enabledExpansions = Setup.EnabledExpansions()
    local sortedMatches = {}
    for _, m in pairs(matchIndex) do
        if not m.expansion or enabledExpansions[m.expansion] then
            table.insert(sortedMatches, m)
        end
    end
    table.sort(sortedMatches, function(x, y) return x.name < y.name end)

    log:Debugf("Search results for %s: %s", searchTerms, Util.Map(sortedMatches, function(m) return m.name end))
    Timeline.SetEventSearchResults(sortedMatches)
end

---------------------------------------------------------------------------------------------------

function Timeline.SetEventSearchResults(results)
    Timeline.ui.timelineEventPopup.results = results
    for i = 1, Util.Min(Timeline.MAX_TIMELINE_EVENT_POPUP_RESULTS, #results) do
        local result = results[i]
        log:Debugf("Setting result %d to %s", i, result.name)

        local button = Timeline.ui.timelineEventPopup.resultButtons[i]
        button:Show()

        local icon = Timeline.ui.timelineEventPopup.resultIcons[i]
        icon:Show()
        icon:SetImage(Timeline.EVENT_TYPE_ICONS[result.type])

        local text = Timeline.ui.timelineEventPopup.resultTexts[i]
        text:Show()
        text:SetText(result.name)
    end

    for i = #results + 1, 5 do
        local button = Timeline.ui.timelineEventPopup.resultButtons[i]
        button:Hide()

        local icon = Timeline.ui.timelineEventPopup.resultIcons[i]
        icon:Hide()
        icon:SetImage(nil)

        local text = Timeline.ui.timelineEventPopup.resultTexts[i]
        text:Hide()
        text:SetText(nil)
    end
end

---------------------------------------------------------------------------------------------------

function Timeline.AddTimelineEvent(year, event, params)
    assert(Check.Num(year))
    assert(Check.Num(event))

    local name, type = params.name, params.type
    if type == "ShowdownEvent" or type == "HuntEvent" then
        name = params.custom and params.name or Timeline.ShowdownEventTimelineName(params.monster, params.level, params.nemesis)
    end
    assert(Check.Str(name))

    log:Debugf("Adding event %s to year %d, event %d", name, year, event)

    local eventData = Timeline.ui.timeline[year].events[event]
    eventData.button:SetImage(Timeline.EVENT_TYPE_IMAGES[type])
    eventData.button:SetOnClick(function(mouseButton) Timeline.DoEvent(year, event, mouseButton) end)
    eventData.text:Show()
    eventData.text:SetText(name)

    Timeline.state.timeline[year].events[event] = {
        name = name,
        type = type,
        custom = params.custom,
        monster = params.monster,
        nemesis = params.nemesis,
        level = params.level,
    }
end

---------------------------------------------------------------------------------------------------

Timeline.levelAbbr ={
    ["Level 1"] = "Lvl 1",
    ["Level 2"] = "Lvl 2",
    ["Level 3"] = "Lvl 3",
    ["Level 4"] = "Lvl 4",
}

function Timeline.ShowdownEventTimelineName(monster, level, nemesis)
    level = Timeline.levelAbbr[level] or level
    monster = (monster and monster:len() > 0)  and monster or nil
    if monster and level then
        if nemesis then
            return "Nemesis - "..monster.." "..level
        else
            return monster.." "..level
        end
    elseif monster then
        if nemesis then
            return "Nemesis - "..monster
        else
            return monster
        end
    elseif level then
        --assert(nemesis)
        return "Nemesis - "..level
    else
        --assert(nemesis)
        return "Nemesis"
    end
end

---------------------------------------------------------------------------------------------------

function Timeline.DoEvent(year, event, mouseButton)
    local eventData = Timeline.state.timeline[year].events[event]
    assert(Check(eventData, "No event data for year %d, event %d", year, event))

    log:Debugf("Processing year %d, event %d: %s", year, event, eventData)

    if mouseButton == Timeline.RIGHT_MOUSE_BUTTON then
        log:Debugf("RMB clicked, removing year %d, event %d", year, event)
        Timeline.RemoveTimelineEvent(year, event)

    else
        local handler = Timeline.eventHandlersByType[eventData.type]
        assert(Check(handler, "Unrecognized event type: %s", eventData))
        handler(eventData)
    end
end

---------------------------------------------------------------------------------------------------

function Timeline.RemoveTimelineEvent(year, event)
    assert(Check.Num(year))
    assert(Check.Num(event))

    local eventData = Timeline.ui.timeline[year].events[event]
    eventData.button:SetImage(nil)
    eventData.button:SetOnClick(function() Timeline.ShowTimelineEventPopup(year, event) end)
    eventData.text:Hide()
    eventData.text:SetText(nil)

    Timeline.state.timeline[year].events[event] = nil
end

---------------------------------------------------------------------------------------------------

Timeline.eventHandlersByType = {
    ["RulebookEvent"] = function(eventData)
        if eventData.custom then
            return log:Debugf("Custom timeline event button, no effect")
        end

        Timeline.HideUi()
        rulebook, state = Rules.RulebookAndState(eventData.name)
        Rules.SpawnRules(rulebook, state)
    end,

    ["ShowdownEvent"] = function(eventData)
        Timeline.HideUi()
        Showdown.ShowUi()
        -- TTS has no way to scroll the scroll view, so if we select a monster out of the current view, it will be selected but the button won't be visible
        -- this is a bad user experience and worse than just not selecting anything
        -- if eventData.monster then
        --     Showdown.SelectMonster(eventData.monster)
        --     if eventData.level then
        --         Showdown.SelectLevel(eventData.level)
        --     end
        -- end
    end,

    ["HuntEvent"] = function(eventData)
        Timeline.HideUi()
        Hunt.ShowUi()
    end,

    ["SettlementEvent"] = function(eventData)
        Timeline.HideUi()

        local settlementEventsLocation = Location.Get("Settlement Events")
        local deck = settlementEventsLocation:FirstObject("Settlement Events")
        if deck == nil then
            log:Broadcastf("Couldn't find Settlement Event deck in the highlighted location, so created a new one.")
            deck = Archive.Take({ name = "Settlement Events", type = "Settlement Events", location = settlementEventsLocation, rotation = { x = 0, y = 180, z = 180 } })
            Util.Highlight(deck)
        end
        local card = Container(deck):Take({ name = eventData.name, type = "Settlement Events", location = Location.Get("Drawn Settlement Events"), allowMissing = true })
        if not card then
            log:Broadcastf("Couldn't find the '%s' card in the Settlement Events Deck", eventData.name)
            Util.Highlight(deck)
            return
        end

        Util.LookAt({ object = card, pitch = 75, distance = 10 })
    end
}

---------------------------------------------------------------------------------------------------

return {
    Init = Timeline.Init,
    PostInit = Timeline.PostInit,

    Save = Timeline.Save,

    Import = Timeline.Import,
    Export = Timeline.Export,

    ShowUi = Timeline.ShowUi,
    HideUi = Timeline.HideUi,
    IsUiOpen = Timeline.IsUiOpen,

    MAX_YEARS = Timeline.MAX_YEARS,
    MAX_YEAR_EVENTS = Timeline.MAX_YEAR_EVENTS,
}
