require("Kdm/Check")
local Log = require("Kdm/Log").ForPackage("BattleReference")
local Util = require("Kdm/Util")
local NamedObject = require("Kdm/NamedObject")
local EventManager = require("Kdm/EventManager")
local Ui = require("Kdm/Ui")
local Location = require("Kdm/Location")

local PlayerBoard = nil
local Showdown = nil

---------------------------------------------------------------------------------------------------

local BattleReference_ui = {}

local BATTLE_UI_RELEVANT_ATTRIBUTES = {
    name = true,
    toughness = true,
    speed = true,
    accuracy = true,
    strength = true,
    evasion = true,
    luck = true,
}

local BATTLE_REFERENCE_MAX_WEAPONS = 3

---------------------------------------------------------------------------------------------------

local function BattleReference_CalcWeapons(playerBoard, charSheet)
    -- dedup and consolidate weapons
    local hiddenWeapons = charSheet:HiddenWeapons()
    local weapons = {}
    local weaponCounts = {}
    setmetatable(weaponCounts, {  __index = function() return 0 end })
    for _, weapon in pairs(playerBoard:Weapons()) do
        local name = weapon.name
        if not hiddenWeapons[name] then
            local count = weaponCounts[name]
            weaponCounts[name] = count + 1
            if count == 0 then
                table.insert(weapons, weapon)
            end
        end
    end
    table.sort(weapons, function(w1, w2) return w1.name < w2.name end)

    local charSpeed = charSheet:Speed()
    local charAccuracy = charSheet:Accuracy()
    local charStrength = charSheet:Strength()
    local charLuck = charSheet:Luck()
    local monsterEvasion = Showdown.MonsterEvasion()
    local monsterToughness = Showdown.MonsterToughness()
    local monsterLuck = Showdown.MonsterLuck()

    local results = {}
    for _, weapon in ipairs(weapons) do
        local name, stats = weapon.name, weapon.stats

        local speed = stats.speed + charSpeed
        -- accuracy goes the opposite way
        local accuracy = stats.accuracy - charAccuracy
        local strength = stats.strength + charStrength
        local luck = (stats.deadly or 0) + charLuck

        for _, modifier in ipairs(weapon.modifiers) do
            if modifier.stat == "speed" then
                speed = speed + modifier.value
            elseif modifier.stat == "accuracy" then
                -- accuracy goes the opposite way
                accuracy = accuracy - modifier.value
            elseif modifier.stat == "strength" then
                strength = strength + modifier.value
            elseif modifier.stat == "luck" then
                luck = luck + modifier.value
            end
        end

        hit = Util.Clamp(accuracy - monsterEvasion, 2, 10)
        wound = Util.Clamp(monsterToughness - strength, 2, 10)
        crit = Util.Max(2, 10 - luck - monsterLuck) -- impossible crits are allowed, so no clamping to 10

        if stats.paired and weaponCounts[name] > 1 then
            speed = speed + stats.speed
        end
        if stats.slow then
            speed = 1
        end

        table.insert(results, {
            name = name,
            speed = speed,
            hit = hit,
            wound = wound,
            strength = strength,
            crit = crit,
        })
    end

    return results
end

---------------------------------------------------------------------------------------------------

local function BattleReference_UpdatePositions()
    local y = 0
    for i = 1, 4 do
        local player = BattleReference_ui.players[i]
        player.panel:SetOffsetXY("0 "..y)
        if player.open then
            y = y - BattleReference_ui.players[i].height - 16
        end
    end
    BattleReference_ui.panel:SetHeight(-y - 16)
end

---------------------------------------------------------------------------------------------------

local function BattleReference_UpdatePlayerInternal(playerBoard)
    local player = BattleReference_ui.players[playerBoard:Number()]

    local charSheet = playerBoard:CharSheet()
    if not charSheet then
        player.open = false
        player.height = 0
        player.panel:Hide()
        return
    end

    player.open = true
    player.panel:Show()

    player.nameText:SetText(charSheet:NameOrUnnamed())
    player.showWeaponsButton:Show()
    local weapons = BattleReference_CalcWeapons(playerBoard, charSheet)
    local numShownWeapons = Util.Min(#weapons, BATTLE_REFERENCE_MAX_WEAPONS)
    for i = 1, numShownWeapons do
        local weapon = weapons[i]
        player.weaponImages[i]:Show()
        player.weaponShowWeaponsButtons[i]:Show()
        player.weaponNameTexts[i]:Show()
        player.weaponNameTexts[i]:SetText(weapon.name)
        player.weaponSpeedTexts[i]:Show()
        player.weaponSpeedTexts[i]:SetText(weapon.speed)
        player.weaponHitTexts[i]:Show()
        player.weaponHitTexts[i]:SetText(weapon.hit)
        player.weaponWoundTexts[i]:Show()
        player.weaponWoundTexts[i]:SetText(string.format("%d (%s%d)", weapon.wound, weapon.strength > 0 and "+" or "", weapon.strength))
        player.weaponCritTexts[i]:Show()
        player.weaponCritTexts[i]:SetText(weapon.crit)
    end
    for i = numShownWeapons + 1, BATTLE_REFERENCE_MAX_WEAPONS do
        player.weaponImages[i]:Hide()
        player.weaponShowWeaponsButtons[i]:Hide()
        player.weaponNameTexts[i]:Hide()
        player.weaponSpeedTexts[i]:Hide()
        player.weaponHitTexts[i]:Hide()
        player.weaponWoundTexts[i]:Hide()
        player.weaponCritTexts[i]:Hide()
    end
    player.height = 8 + (numShownWeapons + 1) * 33
    player.panel:SetHeight(player.height)
end

local function BattleReference_UpdatePlayer(playerBoard)
    BattleReference_UpdatePlayerInternal(playerBoard)
    BattleReference_UpdatePositions()
end

---------------------------------------------------------------------------------------------------

local function BattleReference_Update()
    for i = 1, 4 do
        BattleReference_UpdatePlayerInternal(PlayerBoard.ForPlayer(i))
    end
    BattleReference_UpdatePositions()
end

---------------------------------------------------------------------------------------------------

local function BattleReference_Show()
    Log.Debugf("Showing battle reference")
    BattleReference_ui.panel:Show()
    BattleReference_ui.open = true
end

---------------------------------------------------------------------------------------------------

local function BattleReference_Hide()
    Log.Debugf("Hiding battle reference")
    BattleReference_ui.panel:Hide()
    BattleReference_ui.open = false
end

---------------------------------------------------------------------------------------------------

local function BattleReference_Init(saveState, expansions, modules, ui)
    PlayerBoard = modules.PlayerBoard
    Showdown = modules.Showdown

    -----------------------------------------------------------------------------------------------

    local TEXT_COLOR = "#ffffffdc"
    local DISABLED_TEXT_COLOR = "#ffffff60"

    local DARK_COLORS = "#00000000|#ffffff10|#ffffff20|#ffffffff"
    local DARK_SELECTED_COLORS = "#ffffff20|#ffffff30|#ffffff40|#ffffffff"

    Ui.Image(ui, { id = "BattleUi", rectAlignment = "MiddleLeft", x = 10, y = -20, width = 50, height = 50, image = "BattleUi" })
    Ui.Button(ui, { id = "BattleUi", rectAlignment = "MiddleLeft", x = 10-1, y = -20+1, width = 50+2, height = 50+2, colors = DARK_COLORS, onClick = function()
        if BattleReference_ui.open then
            BattleReference_Hide()
        else
            BattleReference_Show()
        end
    end })

    local playerCircleImages = {
        "RedCircle",
        "GreenCircle",
        "BlueCircle",
        "WhiteCircle",
    }

    Ui.Image(ui, { id = "NextTurn", rectAlignment = "MiddleLeft", x = 10, y = -80, width = 50, height = 50, image = "NextTurn" })
    Ui.Button(ui, { id = "NextTurn", rectAlignment = "MiddleLeft", x = 10-1, y = -80+1, width = 50+2, height = 50+2, colors = DARK_COLORS, onClick = function()
        Log.Printf("Resetting survival actions")
        for i = 1, 4 do
            local survivalTokens = Location.Get("Player "..i.." Survival Tokens"):FindAll("Survival Token")
            for _, token in ipairs(survivalTokens) do
                rot = token.getRotation()
                if rot.z >= 15 and rot.z <= 345    then
                    token.flip()
                end
            end
        end

        Log.Printf("Resetting player turns")
        for i = 1, 4 do
            local player = BattleReference_ui.players[i]
            player.turnEnded = false
            player.playerCircleImage:SetImage(playerCircleImages[i])
            player.nameText:SetColor(TEXT_COLOR)
            player.nameText:SetFontStyle("Normal")
            player.endTurnButton:SetColors(DARK_COLORS)
        end
    end })

    BattleReference_ui.open = false
    BattleReference_ui.panel = Ui.Panel(ui, { id = "BattleReference", rectAlignment = "MiddleLeft", x = 80, y = 70, width = 436, height = 608, color = "#00000000", active = BattleReference_ui.open })
    BattleReference_ui.panel.attributes.allowDragging = true
    BattleReference_ui.panel.attributes.returnToOriginalPositionWhenReleased = false

    BattleReference_ui.players = {}
    for playerNumber = 1, 4 do
        local playerBoard = PlayerBoard.ForPlayer(playerNumber)
        local player = { height = 140 }
        BattleReference_ui.players[playerNumber] = player

        player.open = true
        player.panel = Ui.Panel(BattleReference_ui.panel, { id = "Player"..playerNumber, rectAlignment = "UpperLeft", x = 0, y = -(player.height + 16) * (playerNumber - 1), width = 436, height = player.height, color = "#121212ff" })
        player.playerCircleImage = Ui.Image(player.panel, { id = "PlayerCircle", rectAlignment = "UpperLeft", x = 8, y = -8, width = 25, height = 25, image = playerCircleImages[playerNumber] })
        player.nameText = Ui.Text(player.panel, { id = "Name", rectAlignment = "UpperLeft", x = 38, y = -8, width = 280, height = 25, fontSize = 16, color = TEXT_COLOR, text = "Survivor with a very long name" })

        player.turnEnded = false
        Ui.Image(player.panel, { id = "EndTurn", rectAlignment = "UpperLeft", x = 324, y = -8, width = 48, height = 25, image = "BR_Sleep" })
        player.endTurnButton = Ui.Button(player.panel, { id = "EndTurn", rectAlignment = "UpperLeft", x = 324-1, y = -8+1, width = 48+2, height = 25+2, colors = DARK_COLORS, onClick = function()
            player.turnEnded = not player.turnEnded
            if player.turnEnded then
                Log.Printf("Player %d: %s turn ended", playerNumber, playerBoard:CharSheet():NameOrUnnamed())
                player.playerCircleImage:SetImage("GreyCircle")
                player.nameText:SetColor(DISABLED_TEXT_COLOR)
                player.nameText:SetFontStyle("Italic")
                player.endTurnButton:SetColors(DARK_SELECTED_COLORS)
            else
                Log.Printf("Player %d: %s next turn", playerNumber, playerBoard:CharSheet():NameOrUnnamed())
                player.playerCircleImage:SetImage(playerCircleImages[playerNumber])
                player.nameText:SetColor(TEXT_COLOR)
                player.nameText:SetFontStyle("Normal")
                player.endTurnButton:SetColors(DARK_COLORS)
            end
        end})

        player.showWeaponsImage = Ui.Image(player.panel, { id = "ShowWeapons", rectAlignment = "UpperLeft", x = 380, y = -8, width = 48, height = 25, image = "BR_Show" })
        player.showWeaponsButton = Ui.Button(player.panel, { id = "ShowWeapons", rectAlignment = "UpperLeft", x = 380-1, y = -8+1, width = 48+2, height = 25+2, colors = DARK_COLORS, onClick = function()
            local charSheet = playerBoard:CharSheet()
            Log.Printf("Showing all weapons for %s", charSheet:NameOrUnnamed())
            charSheet:ShowAllWeapons()
            BattleReference_UpdatePlayer(playerBoard)
        end})

        player.weaponImages = {}
        player.weaponShowWeaponsButtons = {}
        player.weaponNameTexts = {}
        player.weaponSpeedTexts = {}
        player.weaponHitTexts = {}
        player.weaponWoundTexts = {}
        player.weaponCritTexts = {}
        local y = -41
        for i = 1, BATTLE_REFERENCE_MAX_WEAPONS do
            player.weaponImages[i] = Ui.Image(player.panel, { id = "Weapon"..i, rectAlignment = "UpperLeft", x = 8, y = y, width = 420, height = 25, image = "BR_Weapon" })
            player.weaponShowWeaponsButtons[i] = Ui.Button(player.panel, { id = "WeaponName"..i, rectAlignment = "UpperLeft", x = 8-1, y = y+1, width = 8+19+8+2, height = 25+2, colors = DARK_COLORS, onClick = function()
                local weaponName = player.weaponNameTexts[i]:Text()
                local charSheet = playerBoard:CharSheet()
                Log.Printf("Hiding %s for %s", weaponName, charSheet:NameOrUnnamed())
                charSheet:HideWeapon(weaponName)
                BattleReference_UpdatePlayer(playerBoard)
            end })
            player.weaponNameTexts[i]  = Ui.Text(player.panel, { id = "WeaponName"..i,  rectAlignment = "UpperLeft", x =  43, y = y, width = 172, height = 25, color = TEXT_COLOR, fontSize = 14, text = "Calcified Juggernaut Blade" })
            player.weaponSpeedTexts[i] = Ui.Text(player.panel, { id = "WeaponSpeed"..i, rectAlignment = "UpperLeft", x = 243, y = y, width = 20, height = 25, color = TEXT_COLOR, fontSize = 16, text = "44" })
            player.weaponHitTexts[i]   = Ui.Text(player.panel, { id = "WeaponHit"..i,   rectAlignment = "UpperLeft", x = 288, y = y, width = 20, height = 25, color = TEXT_COLOR, fontSize = 16, text = "44" })
            player.weaponWoundTexts[i] = Ui.Text(player.panel, { id = "WeaponWound"..i, rectAlignment = "UpperLeft", x = 334, y = y, width = 55, height = 25, color = TEXT_COLOR, fontSize = 16, text = "44 (+44)" })
            player.weaponCritTexts[i]  = Ui.Text(player.panel, { id = "WeaponCrit"..i,  rectAlignment = "UpperLeft", x = 407, y = y, width = 20, height = 25, color = TEXT_COLOR, fontSize = 16, text = "44" })
            y = y - 33
        end
    end
end

---------------------------------------------------------------------------------------------------

local function BattleReference_PostInit()
    EventManager.AddHandler("onShowdownStart", BattleReference_Show)
    EventManager.AddHandler("onShowdownCleanup", BattleReference_Hide)
    EventManager.AddHandler("onPlayerBoardLinkCharSheet", function(playerBoard) BattleReference_UpdatePlayer(playerBoard) end)
    EventManager.AddHandler("onPlayerBoardUnlinkCharSheet", function(playerBoard) BattleReference_UpdatePlayer(playerBoard) end)
    EventManager.AddHandler("onMonsterChangeStat", function(attribute)
        if BATTLE_UI_RELEVANT_ATTRIBUTES[attribute] then
            BattleReference_Update()
        end
    end)
    EventManager.AddHandler("onSurvivorChangeStat", function(charSheet, attribute)
        if BATTLE_UI_RELEVANT_ATTRIBUTES[attribute] then
            BattleReference_Update()
        end
    end)
    EventManager.AddHandler("onPlayerBoardLinkWeapon", function(playerBoard) BattleReference_UpdatePlayer(playerBoard) end)
    EventManager.AddHandler("onPlayerBoardUpdateWeapon", function(playerBoard) BattleReference_UpdatePlayer(playerBoard) end)
    EventManager.AddHandler("onPlayerBoardUnlinkWeapon", function(playerBoard) BattleReference_UpdatePlayer(playerBoard) end)

    BattleReference_Update()
--    BattleReference_Show()
end

---------------------------------------------------------------------------------------------------

return {
    Init = BattleReference_Init,
    PostInit = BattleReference_PostInit,
    Update = BattleReference_Update,
}
