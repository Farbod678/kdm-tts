require("Kdm/Check")
require("Kdm/Constants")
local Util = require("Kdm/Util")
local Log = require("Kdm/Log").ForPackage("Action")
local Container = require("Kdm/Container")
local Location = require("Kdm/Location")

local Archive = nil

---------------------------------------------------------------------------------------------------

local function Action_ArchiveSource(name, type)
    return {
        source = "Archive",
        name = name,
        type = type,
    }
end

---------------------------------------------------------------------------------------------------

local function Action_ContainerSource(container, name, type)
    return {
        source = "Container",
        container = container,
        name = name,
        type = type,
    }
end

---------------------------------------------------------------------------------------------------

local function Action_CreateDeck(params)
    local sources, location, rotation = params.sources,  Location.Get(params.location), (params.rotation or FACE_UP)

    local objects = {}
    for i, source in ipairs(sources) do
        local takeParams = { name = source.name, type = source.type, location = location, height = (i - 1) * 0.5, rotation = rotation }
        if source.source == "Archive" then
            table.insert(objects, Archive.Take(takeParams))
        elseif source.source == "Container" then
            table.insert(objects, source.container:Take(takeParams))
        else
            assert(CheckFail("Unrecognized source: %s", source))
        end
    end

    local deckObject
    if #objects > 1 then
        deckObject = group(objects)[1]
        assert(Check(deckObject))
    else
        Log.Debugf("CreateDeck only asked for one object %s (%s), so not grouping", objects[1].getName(), objects[1].getGUID())
        deckObject = objects[1]
    end

    deckObject.setName(params.name)
    deckObject.setGMNotes(params.type)
    deckObject.setPositionSmooth(location:Center(), false, true)
    deckObject.setRotation(rotation)

    Log.Debugf("Created deck %s (%s) at %s", deckObject.getName(), deckObject.getGUID(), location:Name())

    return Container(deckObject)
end

---------------------------------------------------------------------------------------------------

local function Action_Clone(params)
    local object, location, rotation = params.object, Location.Get(params.location), params.rotation
    assert(CheckTagged(location, "Location"))
    local height = params.height or DEFAULT_SPAWN_HEIGHT
    local position = location:Center()
    position.y = position.y + height

    Log.Debugf("Cloning %s (%s) to %s", object.getName(), object.getGUID(), location:Name())

    local clonedObject = object.clone({ position =  position })
    if rotation then
        Wait.frames(function() clonedObject.setRotation(rotation) end, 2)
    end

    return clonedObject
end


---------------------------------------------------------------------------------------------------

local function Action_Init(saveState, expansions, modules)
    Archive = modules.Archive
    assert(Archive)
end

---------------------------------------------------------------------------------------------------

return {
    Init = Action_Init,
    ArchiveSource = Action_ArchiveSource,
    ContainerSource = Action_ContainerSource,
    CreateDeck = Action_CreateDeck,
    Clone = Action_Clone,
}
