require("Kdm/Util/Check")
local Util = require("Kdm/Util/Util")
local Log = require("Kdm/Util/Log").ForPackage("Action")
local Archive = require("Kdm/Archive")
local Location = require("Kdm/Location")
local Container = require("Kdm/Container")

local Action = {}

local OBJ_CLEAN_IGNORE_TAGS = { "Board", "Table" }

---------------------------------------------------------------------------------------------------

function Action.Matches(obj, tags, types)
    local matchesTags = tags and Util.ArrayContains(tags, obj.tag)
    local matchesTypes = types and Util.ArrayContains(types, obj.getGMNotes())

    return matchesTags or matchesTypes
end

---------------------------------------------------------------------------------------------------

local function Action_Clean(params, castFunc)
    location, tags, types, debug = params.location, params.tags, params.types, params.debug
    Log.Debugf("Cleaning %s", location)

    local hits = castFunc(location, debug)
    local blocking = {}
    local ignore
    for _, hit in ipairs(hits) do
        local obj = hit.hit_object

        if Action.Matches(obj, OBJ_CLEAN_IGNORE_TAGS, params.ignoreTypes) then
            -- ignore

        elseif Action.Matches(obj, tags, types) then
            Log.Debugf("Destroying hit object %s (%s) with matching type %s/tag %s", obj.getName(), obj.getGUID(), obj.getGMNotes(), obj.tag)
            obj.destruct()

        else
            Log.Debugf("Hit blocking object %s/%s (%s)", obj.getName(), obj.tag, obj.getGUID())
            table.insert(blocking, obj)
        end
    end

    return blocking
end

function Action.BoxClean(params) return Action_Clean(params, Location.BoxCast) end
function Action.RayClean(params) return Action_Clean(params, Location.RayCast) end

---------------------------------------------------------------------------------------------------

function Action.ArchiveSource(name, type)
    return {
        source = "Archive",
        name = name,
        type = type,
    }
end

---------------------------------------------------------------------------------------------------

function Action.ContainerSource(container, name, type)
    return {
        source = "Container",
        container = container,
        name = name,
        type = type,
    }
end

---------------------------------------------------------------------------------------------------

function Action.CreateDeck(params)
    local sources = params.sources
    local location = params.location
    local rotation = params.rotation or Location.FACE_UP

    local objects = {}
    for i, source in ipairs(sources) do
        local takeParams = { name = source.name, type = source.type, location = location, height = (i - 1) * 0.5, rotation = rotation }
        if source.source == "Archive" then
            table.insert(objects, Archive.Take(takeParams))
        elseif source.source == "Container" then
            table.insert(objects, source.container:Take(takeParams))
        else
            assert(CheckFail("Unrecognized source: %s", source))
        end
    end

    local deckObject
    if #objects > 1 then
        deckObject = group(objects)[1]
        assert(Check(deckObject))
    else
        Log.Debugf("CreateDeck only asked for one object %s (%s), so not grouping", objects[1].getName(), objects[1].getGUID())
        deckObject = objects[1]
    end

    deckObject.setName(params.name)
    deckObject.setGMNotes(params.type)
    deckObject.setPositionSmooth(Location.WorldCenter(location), false, true)
    deckObject.setRotation(rotation)

    Log.Debugf("Created deck %s (%s) at %s", deckObject.getName(), deckObject.getGUID(), location)

    return Container(deckObject)
end

---------------------------------------------------------------------------------------------------

function Action.Clone(params)
    local object, location, rotation = params.object, params.location, params.rotation
    local height = params.height or Location.DEFAULT_SPAWN_HEIGHT
    local position = Location.WorldCenter(params.location)
    position.y = position.y + height

    Log.Debugf("Cloning %s (%s) to %s", object.getName(), object.getGUID(), location)

    local clonedObject = object.clone({ position =  position })
    if rotation then
        clonedObject.setRotation(rotation)
    end

    return clonedObject
end


---------------------------------------------------------------------------------------------------

return Action
