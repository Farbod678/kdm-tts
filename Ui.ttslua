require("Kdm/Check")
local Log = require("Kdm/Log").ForPackage("Ui")
local Util = require("Kdm/Util")

local UI_DARK_BROWN = "#453824"
--local UI_MID_BROWN = "#7f7059"
local UI_MID_BROWN = "#71624c"
-- local UI_LIGHT_BROWN = "#bbb4a1"
local UI_LIGHT_BROWN = "#d3cdc3"


local UI_DARK_BROWN_COLORS = "#453824|#2f2410|#2f2410|#ffffff"
local UI_MID_BROWN_COLORS = "#7f7059|#655741|#655741|#ffffff"

local UI_INVISIBLE_COLORS = "#00000000|#00000088|#00000088|#00000000"
local UI_IMAGE_COLORS = "#ffffff|#dddddd|#dddddd|#ffffff"

-- local UI_INVISIBLE_COLORS = "#ff008888|#ff008888|#ff008888|#ff008888"
-- local UI_IMAGE_COLORS = "#ff008888|#ff008888|#ff008888|#ff008888"

local UI_LEFT_MOUSE_BUTTON = "-1"

---------------------------------------------------------------------------------------------------

local Ui_BaseClass = {
    Show = function(elem)
        Log.Debugf("Showing %s", elem.id)
        elem.object.UI.setAttribute(elem.id, "active", true)
    end,

    Hide = function(elem)
        Log.Debugf("Hiding %s", elem.id)
        elem.object.UI.setAttribute(elem.id, "active", false)
    end,

    SetOffsetXY = function(elem, offsetXY)
        Log.Debugf("Moving %s to %s", elem.id, offsetXY)
        elem.object.UI.setAttribute(elem.id, "offsetXY", offsetXY)
    end,

    Width = function(elem)
        return elem.object.UI.getAttribute(elem.id, "width")
    end,

    SetWidth = function(elem, width)
        Log.Debugf("Setting %s width to %d", elem.id, width)
        elem.object.UI.setAttribute(elem.id, "width", width)
    end,

    Height = function(elem)
        return elem.object.UI.getAttribute(elem.id, "height")
    end,

    SetHeight = function(elem, height)
        Log.Debugf("Setting %s height to %d", elem.id, height)
        elem.object.UI.setAttribute(elem.id, "height", height)
    end
}
Ui_BaseClass.__index = Ui_BaseClass

---------------------------------------------------------------------------------------------------

local function Ui_Panel(parent, params)
    assert(CheckStr(params.id))

    local id = parent.id.."_"..params.id.."Panel"
    Log.Debugf("Creating Panel %s", id)

    local panel = {
        id = id,
        object = params.object or self,
        children = {},
        attributes = {
            id = id,
            rectAlignment = params.rectAlignment or "MiddleCenter",
            offsetXY = params.x and params.x.." "..params.y or nil,
            width = params.width,
            height = params.height,
            color = params.color or "#00000000",
            active = params.active,
        },
    }
    setmetatable(panel, Ui_BaseClass)

    local elem = {
        tag = "Panel",
        attributes = panel.attributes,
        children = panel.children,
    }
    table.insert(parent.children, elem)

    return panel
end

---------------------------------------------------------------------------------------------------

local Ui_TextClass = {
    Text = function(elem)
        return elem.object.UI.getAttribute(elem.id, "text")
    end,
    SetText = function(elem, text)
        text = text or ""   -- nil will not actually clear the text
        Log.Debugf("Setting text for %s to '%s'", elem.id, text)
        elem.object.UI.setAttributes(elem.id, {
            text = text,
            color = elem.color, -- color is required otherwise TTS will reset it to black
        })
    end,
    SetColor = function(elem, color)
        Log.Debugf("Setting text color for %s to %s", elem.id, color)
        elem.object.UI.setAttribute(elem.id, "color", color)
        elem.color = color  -- must track this for future SetText() invocations
    end,
    SetFontStyle = function(elem, fontStyle)
        Log.Debugf("Setting font style for %s to %s", elem.id, fontStyle)
        elem.object.UI.setAttribute(elem.id, "fontStyle", fontStyle)
    end,
}
Ui_TextClass.__index = Ui_TextClass
setmetatable(Ui_TextClass, { __index = Ui_BaseClass })

local function Ui_Text(parent, params)
    assert(CheckStr(params.id))
    assert(Check(params.color, "Text color is required"))

    local id = parent.id.."_"..params.id.."Text"

    local text = {
        id = id,
        object = params.object or self,
        color = params.color
    }
    setmetatable(text, Ui_TextClass)

    table.insert(parent.children, {
        tag = "Text",
        attributes = {
            id = id,
            rectAlignment = params.rectAlignment or "LowerLeft",
            offsetXY = params.x.." "..params.y,
            width = params.width,
            height = params.height or 30,
            text = params.text,
            color = params.color,
            alignment = params.alignment or "MiddleLeft",
            fontSize = params.fontSize or 36,
            fontStyle = params.fontStyle,
            textOffset = "0 0 0 0",
            active = params.active,
        },
    })

    return text
end

local function Ui_DarkText(parent, params)
    params.color = params.color or UI_DARK_BROWN
    return Ui_Text(parent, params)
end

local function Ui_LightText(parent, params)
    params.color = params.color or UI_LIGHT_BROWN
    return Ui_Text(parent, params)
end

---------------------------------------------------------------------------------------------------

local Ui_ImageClass = {
    SetImage = function(elem, image)
        Log.Debugf("Setting image for %s to '%s'", elem.id, image)
        elem.object.UI.setAttribute(elem.id, "image", image)
    end
}
Ui_ImageClass.__index = Ui_ImageClass
setmetatable(Ui_ImageClass, { __index = Ui_BaseClass })

local function Ui_Image(parent, params)
    local id = parent.id.."_"..params.id.."Image"
    Log.Debugf("Creating Image %s", id)

    local image = {
        id = id,
        object = params.object or self,
    }
    setmetatable(image, Ui_ImageClass)

    table.insert(parent.children, {
        tag = "Image",
        attributes = {
            id = id,
            image = params.image,
            rectAlignment = params.rectAlignment or "LowerLeft",
            offsetXY = params.x and (params.x.." "..params.y) or nil,
            width = params.width,
            height = params.height,
            active = params.active,
            horizontalOverflow = "Overflow",
            verticalOverflow = "Overflow",
        },
    })

    return image
end

---------------------------------------------------------------------------------------------------

local Ui_InputClass = {
    Set = function(elem, value)
        value = value or ""   -- nil will not actually clear the text
        Log.Debugf("Setting text for %s to '%s'", elem.id, value)
        elem.object.UI.setAttributes(elem.id, {
            text = value,
            textColor = elem.textColor,
        })
    end,
}
Ui_InputClass.__index = Ui_InputClass
setmetatable(Ui_InputClass, { __index = Ui_BaseClass })

local function Ui_Input(parent, params)
    assert(CheckStr(params.id))
    assert(CheckFunc(params.onValueChanged))

    local id = parent.id.."_"..params.id.."Input"

    Log.Debugf("Creating Input %s", id)

    local input = {
        id = id,
        object = params.object or self,
        onValueChanged = params.onValueChanged,
        textColor = params.textColor,
    }
    setmetatable(input, Ui_InputClass)

    local onValueChanged = id.."_OnValueChanged"
    input.object.setVar(onValueChanged, function(_, value)
        input.onValueChanged(value)
    end)

    table.insert(parent.children, {
        tag = "InputField",
        attributes = {
            id = id,
            rectAlignment = params.rectAlignment or "LowerLeft",
            offsetXY = params.x.." "..params.y,
            width = params.width,
            height = params.height or 30,
            colors = params.colors,
            placeholder = params.placeholder or " " ,
            text = params.text,
            readOnly = params.readOnly,
            fontSize = params.fontSize or 16,
            fontStyle = params.fontStyle,
            textColor = params.textColor,
            lineType = params.lineType,
            onValueChanged = onValueChanged,
            selectionColor = params.selectionColor or "#44444488",
            textAlignment = params.textAlignment or "MiddleLeft",
            textOffset = params.textOffset or "0 0 0 0",
        }
    })

    return input
end

local function Ui_DarkInput(parent, params)
    params.textColor = UI_DARK_BROWN
    params.colors = UI_INVISIBLE_COLORS
    return Ui_Input(parent, params)
end

local function Ui_LightInput(parent, params)
    params.textColor = UI_LIGHT_BROWN
    params.colors = UI_INVISIBLE_COLORS
    params.selectionColor = "#888888"
    return Ui_Input(parent, params)
end

---------------------------------------------------------------------------------------------------

local Ui_ButtonClass = {
    SetOnClick = function(elem, onClick)
        elem.onClick = onClick
    end,
    SetText = function(elem, text)
        text = text or ""
        Log.Debugf("Setting %s text to %s", elem.id, text)
        elem.object.UI.setAttributes(elem.id, {
            text = text,
            textColor = elem.textColor,
        })
    end,
    SetImage = function(elem, image)
        if image then
            Log.Debugf("Setting button %s image to %s", elem.id, image)
            elem.object.UI.setAttributes(elem.id, {
                image = image,
                colors = UI_IMAGE_COLORS,
            })
        else
            Log.Debugf("Clearing %s image", elem.id)
            elem.object.UI.setAttributes(elem.id, {
                image = nil,
                colors = UI_INVISIBLE_COLORS,
            })
        end
    end,
    SetColors = function(elem, colors)
        Log.Debugf("Setting color for %s to %s", elem.id, colors)
        elem.object.UI.setAttribute(elem.id, "colors", colors)
    end,
}
Ui_ButtonClass.__index = Ui_ButtonClass
setmetatable(Ui_ButtonClass, { __index = Ui_BaseClass })

local function Ui_Button(parent, params)
    assert(CheckStr(params.id))
    assert(CheckFuncOrNil(params.onClick))

    local id = parent.id.."_"..params.id.."Button"

    Log.Debugf("Creating Button %s", id)

    local button = {
        id = id,
        object = params.object or self,
        textColor = params.textColor or UI_LIGHT_BROWN,
        onClick = params.onClick,
    }
    setmetatable(button, Ui_ButtonClass)

    local onClickFunctionName = id.."_OnClick"
    button.object.setVar(onClickFunctionName, function(_, mouseButton) button.onClick(mouseButton) end)

    table.insert(parent.children, {
        tag = "Button",
        attributes = {
            id = id,
            rectAlignment = params.rectAlignment or "LowerLeft",
            offsetXY = params.x.." "..params.y,
            width = params.width,
            height = params.height,
            image = params.image,
            colors = params.colors,
            text = params.text,
            textColor = button.textColor,
            fontSize = params.fontSize or 12,
            textAlignment = params.textAlignment or "MiddleLeft",
            onClick = onClickFunctionName,
        },
    })

    return button
end

local function Ui_InvisibleButton(parent, params)
     params.colors = UI_INVISIBLE_COLORS
     return Ui_Button(parent, params)
end

local function Ui_ImageButton(parent, params)
     params.colors = UI_IMAGE_COLORS
     return Ui_Button(parent, params)
end

---------------------------------------------------------------------------------------------------

local Ui_CheckButtonClass = {
    Set = function(checkButton, value)
        if value then
            checkButton.object.UI.setAttributes(checkButton.id, {
                colors = checkButton.selectedColors,
                textColor = checkButton.textColor,
            })
        else
            checkButton.object.UI.setAttributes(checkButton.id, {
                colors = checkButton.unselectedColors,
                textColor = checkButton.textColor,
            })
        end
    end,
}
Ui_CheckButtonClass.__index = Ui_CheckButtonClass
setmetatable(Ui_CheckButtonClass, { __index = Ui_BaseClass })


local function Ui_CheckButton(parent, params)
    assert(CheckStr(params.id))
    assert(CheckFunc(params.onClick))

    local id = parent.id.."_"..params.id.."CheckButton"

    Log.Debugf("Creating CheckButton %s", id)

    local checkButton = {
        id = id,
        object = params.object or self,
        selectedColors = params.selectedColors or UI_DARK_BROWN_COLORS,
        unselectedColors = params.unselectedColors or UI_MID_BROWN_COLORS,
        textColor = params.textColor or UI_LIGHT_BROWN,
        onClick = params.onClick,
    }
    setmetatable(checkButton, Ui_CheckButtonClass)

    local onClick = id.."_OnClick"
    checkButton.object.SetVar(onClick, function(_, _, id)
        checkButton.onClick()
    end)

    table.insert(parent.children, {
        tag = "Button",
        attributes = {
            id = id,
            rectAlignment = params.rectAlignment or "LowerLeft",
            offsetXY = params.x.." "..params.y,
            width = params.width,
            height = params.height,
            text = params.text,
            colors = params.checked and checkButton.selectedColors or checkButton.unselectedColors,
            textColor = checkButton.textColor,
            fontSize = params.fontSize,
            textAlignment = "MiddleCenter",
            onClick = onClick,
        },
    })

    return checkButton
end

---------------------------------------------------------------------------------------------------

local Ui_CheckBoxClass = {
    Set = function(checkBox, checked)
        checkBox.object.UI.setAttribute(checkBox.id, "image", checked and checkBox.filledImage or checkBox.emptyImage)
    end,
}
Ui_CheckBoxClass.__index = Ui_CheckBoxClass
setmetatable(Ui_CheckBoxClass, { __index = Ui_BaseClass })

local function Ui_CheckBox(parent, params)
    assert(CheckStr(params.id))
    assert(CheckFunc(params.onClick))

    local id = parent.id.."_"..params.id.."CheckBox"
    Log.Debugf("Creating CheckBox %s", id)

    local checkBox = {
        id = id,
        object = params.object or self,
        emptyImage = params.emptyImage or "CheckBoxEmpty",
        filledImage = params.filledImage or "CheckBoxFilled",
        onClick = params.onClick,
    }
    setmetatable(checkBox, Ui_CheckBoxClass)

    local onClick = id.."_OnClick"
    checkBox.object.setVar(onClick, function()
        checkBox.onClick()
    end)

    table.insert(parent.children, {
        tag = "Button",
        attributes = {
            id = id,
            rectAlignment = params.rectAlignment or "LowerLeft",
            offsetXY = params.x.." "..params.y,
            width = params.width or 30,
            height = params.height or 30,
            colors = UI_IMAGE_COLORS,
            image = params.checked and checkBox.filledImage or checkBox.emptyImage,
            active = params.active,
            onClick = onClick,
        },
    })

    return checkBox
end

---------------------------------------------------------------------------------------------------

local Ui_OptionButtonGroupClass = {
    Set = function(group, option)
        local selectedId = option and option.id or nil
        for _, option in ipairs(group.options) do
            if option.id != selectedId then
                group.object.UI.setAttributes(option.id, {
                    colors = group.unselectedColors,
                    textColor = group.textColor,
                })
            else
                group.object.UI.setAttributes(option.id, {
                    colors = group.selectedColors,
                    textColor = group.textColor,
                })
            end
        end
    end,
}
Ui_OptionButtonGroupClass.__index = Ui_OptionButtonGroupClass

local function Ui_OptionButtonGroup(parent, params)
    assert(CheckStr(params.id))
    assert(CheckFunc(params.onClick))

    local id = parent.id.."_"..params.id.."OptionButtons"

    Log.Debugf("Creating OptionButtonGroup %s", id)

    local group = {
        parent = parent,
        id = id,
        object = params.object or self,
        options = {},
        selectedColors = params.selectedColors or UI_DARK_BROWN_COLORS,
        unselectedColors = params.unselectedColors or UI_MID_BROWN_COLORS,
        textColor = params.textColor or UI_LIGHT_BROWN,
        textAlignment = params.textAlignment or "MiddleCenter",
        fontSize = params.fontSize or 16,
        onClick = params.onClick,
    }
    setmetatable(group, Ui_OptionButtonGroupClass)

    return group
end

local Ui_OptionButtonClass = {
    Value = function(optionButton)
        return optionButton.value
    end,
    SetValue = function(optionButton, value)
        optionButton.value = value
    end,
    SetText = function(optionButton, text)
        text = text or ""
        Log.Debugf("Setting %s text to %s", optionButton.id, text)
        optionButton.object.UI.setAttributes(optionButton.id, {
            text = text,
            textColor = optionButton.group.textColor,
        })
    end,
}
Ui_OptionButtonClass.__index = Ui_OptionButtonClass
setmetatable(Ui_OptionButtonClass, { __index = Ui_BaseClass })

local function Ui_OptionButton(group, params)
    local id = group.id.."_"..(#group.options + 1)

    Log.Debugf("Creating OptionButton %s", id)

    local optionButton = {
        id = id,
        object = group.object,
        group = group,
        value = params.value,
    }
    setmetatable(optionButton, Ui_OptionButtonClass)

    table.insert(group.options, optionButton)

    local onClick = id.."_OnClick"
    group.object.SetVar(onClick, function()
        group.onClick(optionButton)
    end)
    table.insert(group.parent.children, {
        tag = "Button",
        attributes = {
            id = id,
            rectAlignment = params.rectAlignment or "LowerLeft",
            offsetXY = params.x.." "..params.y,
            width = params.width,
            height = params.height,
            text = params.text,
            colors = params.selected and group.selectedColors or group.unselectedColors,
            textColor = group.textColor,
            fontSize = group.fontSize,
            textAlignment = group.textAlignment,
            onClick = onClick,
            active = params.active,
        },
    })

    return optionButton
end

---------------------------------------------------------------------------------------------------

local Ui_OptionBoxGroupClass = {
    Set = function(group, option)
        local selectedId = option and option.id or nil
        for _, option in ipairs(group.options) do
            if option.id != selectedId then
                group.object.UI.setAttribute(option.id, "image", "CheckBoxEmpty")
            else
                group.object.UI.setAttribute(option.id, "image", "CheckBoxFilled")
            end
        end
    end,
}
Ui_OptionBoxGroupClass.__index = Ui_OptionBoxGroupClass

local function Ui_OptionBoxGroup(parent, params)
    assert(CheckStr(params.id))
    assert(CheckFunc(params.onClick))

    local id = parent.id.."_"..params.id.."OptionBoxes"

    Log.Debugf("Creating OptionBoxGroup %s", id)

    local group = {
        parent = parent,
        id = id,
        object = params.object or self,
        options = {},
        onClick = params.onClick,
    }
    setmetatable(group, Ui_OptionBoxGroupClass)

    return group
end

local Ui_OptionBoxClass = {
    Value = function(optionButton)
        return optionButton.value
    end,
    SetValue = function(optionButton, value)
        optionButton.value = value
    end,
}
Ui_OptionBoxClass.__index = Ui_OptionBoxClass
setmetatable(Ui_OptionBoxClass, { __index = Ui_BaseClass })

local function Ui_OptionBox(group, params)
    local id = group.id.."_"..(#group.options + 1)

    Log.Debugf("Creating OptionBox %s", id)

    local optionBox = {
        id = id,
        object = group.object,
        group = group,
        value = params.value,
    }
    setmetatable(optionBox, Ui_OptionBoxClass)
    table.insert(group.options, optionBox)

    local onClick = id.."_OnClick"
    group.object.SetVar(onClick, function()
        group.onClick(optionBox)
    end)

    table.insert(group.parent.children, {
        tag = "Button",
        attributes = {
            id = id,
            rectAlignment = params.rectAlignment or "LowerLeft",
            offsetXY = params.x.." "..params.y,
            width = params.width or 30,
            height = params.height or 30,
            colors = UI_IMAGE_COLORS,
            image = params.checked and "CheckBoxFilled" or "CheckBoxEmpty",
            onClick = onClick,
        },
    })

    return optionBox
end

---------------------------------------------------------------------------------------------------

local function Ui_VerticalScroll(parent, params)
    -- hack/pass-through to make the ID concatenation work
    local verticalScroll = {
        id = parent.id,
        children = {},
    }

    table.insert(parent.children, {
        tag = "VerticalScrollView",
        attributes = {
            rectAlignment = "LowerLeft",
            offsetXY = params.x.." "..params.y,
            width = params.width,
            height = params.height,
            color = "#00000000",
        },
        children = verticalScroll.children,
    })

    return verticalScroll
end

---------------------------------------------------------------------------------------------------

local Ui_CounterClass = {
    Set = function(counter, value)
        assert(CheckNum(value))
        Log.Debugf("Changing %s to %d", counter.textId, value)
        counter.object.UI.setAttribute(counter.textId, "text", tostring(value))
    end,
}
Ui_CounterClass.__index = Ui_CounterClass

local function Ui_Counter(parent, params)
    assert(CheckStr(params.id))
    assert(CheckFunc(params.onValueChanged))

    local id = parent.id.."_"..params.id.."Counter"
    Log.Debugf("Creating Counter %s", id)

    local textId = id.."Text"

    local counter = {
        textId = textId,
        object = params.object or self,
        onValueChanged = params.onValueChanged,
    }
    setmetatable(counter, Ui_CounterClass)

    local value = params.value or 0
    table.insert(parent.children, {
        tag = "Text",
        attributes = {
            id = textId,
            rectAlignment = params.rectAlignment or "LowerLeft",
            offsetXY = params.x.." "..params.y,
            width = params.width,
            height = params.height * 0.85,   -- hack to get the counter value to appear below the +/- in the top of the counter box
            text = tostring(value),
            color = params.textColor or UI_DARK_BROWN,
            fontSize = params.fontSize,
            textAlignment = "MiddleCenter",
            horizontalOverflow = "Overflow",
            verticalOverflow = "Overflow",
        }
    })

    local minusId = id.."Minus"
    local minusOnClick = id.."Minus_OnClick"
    self.setVar(minusOnClick, function(_, mouseButton)
        counter.onValueChanged((mouseButton == UI_LEFT_MOUSE_BUTTON) and -1 or -10)
    end)
    table.insert(parent.children, {
        tag = "Button",
        attributes = {
            id = minusId,
            rectAlignment = params.rectAlignment or "LowerLeft",
            offsetXY = params.x.." "..params.y,
            width = params.width / 2,
            height = params.height,
            colors = UI_INVISIBLE_COLORS,
            textAlignment = "MiddleCenter",
            onClick = minusOnClick,
        }
    })

    local plusId = id.."Plus"
    local plusOnClick = id.."Plus_OnClick"
    self.setVar(plusOnClick, function(_, mouseButton)
        counter.onValueChanged((mouseButton == UI_LEFT_MOUSE_BUTTON) and 1 or 10)
    end)
    table.insert(parent.children, {
        tag = "Button",
        attributes = {
            id = plusId,
            rectAlignment = params.rectAlignment or "LowerLeft",
            offsetXY = (params.x + (params.width / 2)).." "..params.y,
            width = params.width / 2,
            height = params.height,
            colors = UI_INVISIBLE_COLORS,
            textAlignment = "MiddleCenter",
            onClick = plusOnClick,
        }
    })

    return counter
end

---------------------------------------------------------------------------------------------------

return {
    Panel = Ui_Panel,
    Text = Ui_Text,
    DarkText = Ui_DarkText,
    LightText = Ui_LightText,
    Image = Ui_Image,
    Input = Ui_Input,
    DarkInput = Ui_DarkInput,
    LightInput = Ui_LightInput,
    Button = Ui_Button,
    InvisibleButton = Ui_InvisibleButton,
    ImageButton = Ui_ImageButton,
    CheckButton = Ui_CheckButton,
    CheckBox = Ui_CheckBox,
    OptionButtonGroup = Ui_OptionButtonGroup,
    OptionButton = Ui_OptionButton,
    OptionBoxGroup = Ui_OptionBoxGroup,
    OptionBox = Ui_OptionBox,
    VerticalScroll = Ui_VerticalScroll,
    Counter = Ui_Counter,

    DARK_BROWN = UI_DARK_BROWN,
    MID_BROWN = UI_MID_BROWN,
    LIGHT_BROWN = UI_LIGHT_BROWN,

    DARK_BROWN_COLORS = UI_DARK_BROWN_COLORS,
    MID_BROWN_COLORS = UI_MID_BROWN_COLORS,

    INVISIBLE_COLORS = UI_INVISIBLE_COLORS,
    IMAGE_COLORS = UI_IMAGE_COLORS,
}
