local Check = require("Kdm/Util/Check")
local log = require("Kdm/Log").ForModule("Ui")
local Util = require("Kdm/Util/Util")

---------------------------------------------------------------------------------------------------

local Ui = {}

Ui.DEFAULT_Z = 10.5
Ui.SCALE = 0.1
Ui.DARK_BROWN = "#453824"
Ui.LIGHT_BROWN = "#bbb4a1"
Ui.INVISIBLE_COLORS = "#00000000|#00000088|#00000088|#00000000"
Ui.INVISIBLE_COLORS = "#ff008888|#ff0088cc|#ff008888|#ff008888"
Ui.IMAGE_COLORS = "#ffffff|#dddddd|#dddddd|#ffffff"
Ui.LEFT_MOUSE_BUTTON = "-1"

Ui.uisByObject = {}

---------------------------------------------------------------------------------------------------

function Ui.Init()
    Ui.globalUi = {
        tag = "Ui2d",
        children = self.UI.getXmlTable(),
        object = self,
        attributes = {
            id = "G",
        },
        Apply = Ui.Apply,
    }
    Ui.AddCreateFunctions(Ui.globalUi, Ui.CreateElem2d)
    Ui.uisByObject = {
        [self] = Ui.globalUi
    }
end

---------------------------------------------------------------------------------------------------

function Ui.Get2d()
    return Ui.globalUi
end

---------------------------------------------------------------------------------------------------

function Ui.Create3d(id, object, z)
    assert(Check.Str(id))
    assert(Check.Object(object))
    assert(Check.Num(z))

    local ui = Ui.uisByObject[object]
    if ui == nil then
        local objectSize = object.getBounds().size
        local scaleX, scaleY
        if objectSize.x > objectSize.z then
            scaleX = 1
            scaleY = objectSize.x / objectSize.z
        else
            -- seems to only be needed for very *wide* objects, like the Survivor Board?
            -- scaleX = objectSize.z / objectSize.x
            scaleX = 1
            scaleY = 1
        end

        ui = {
            tag = "Ui3d",
            object = object,
            z = z * -100,
            rotation = "0 0 180",
            positionFactor = 100,
            widthFactor = 1000 / scaleX,
            heightFactor = 1000 / scaleY,
            scale = (scaleX / 10).." "..(scaleY / 10),
            children = object.UI.getXmlTable(),
            attributes = {
                id = id,
            },
            Apply = Ui.Apply,
        }
        Ui.AddCreateFunctions(ui, Ui.CreateElem3d)

        Ui.uisByObject[object] = ui
    end

    return ui
end

---------------------------------------------------------------------------------------------------

function Ui.CreateElem2d(tag, parent, params)
    assert(Check.Str(params.id))

    local id = parent.attributes.id.."_"..params.id..tag

    log:Debugf("Creating %s %s", tag, id)

    assert(Check.Num(params.x))
    assert(Check.Num(params.y))
    assert(Check.Num(params.width))
    assert(Check.Num(params.height))

    local elem = {
        tag = tag,
        object = parent.object,
        children = {},
        attributes = {
            id = id,
            rectAlignment = params.rectAlignment or "UpperLeft",
            offsetXY = params.x.." "..params.y,
            width = params.width,
            height = params.height,
            active = params.active == nil or params.active,
        },
    }

    if params.onClick then
        elem.onClick = params.onClick
        local onClickFunctionName = id.."_OnClick"
        self.setVar(onClickFunctionName, function(_, mouseButton)
            elem.onClick(mouseButton)
        end)
        elem.attributes.onClick = "Global/"..onClickFunctionName
    end

    if params.onValueChanged then
        elem.onValueChanged = params.onValueChanged
        local onValueChangedFunctionName = id.."_OnValueChanged"
        self.setVar(onValueChangedFunctionName, function(_, value)
            elem.onValueChanged(value)
        end)
        elem.attributes.onValueChanged = "Global/"..onValueChangedFunctionName
    end

    table.insert(parent.children, elem)

    return elem
end

---------------------------------------------------------------------------------------------------

function Ui.CreateElem3d(tag, parent, params)
    assert(Check.Str(params.id))

    local id = parent.attributes.id.."_"..params.id..tag

    log:Debugf("Creating %s %s", tag, id)

    assert(Check.Vec2(params.topLeft))
    assert(Check.Vec2(params.bottomRight))

    local topLeft = params.topLeft
    local bottomRight = params.bottomRight
    local centerX = ((topLeft.x + bottomRight.x) / 2) * parent.positionFactor
    local centerY = ((topLeft.y + bottomRight.y) / 2) * parent.positionFactor
    local centerZ = params.z and (params.z * -100) or parent.z

    local elem = {
        tag = tag,
        object = parent.object,
        children = {},
        attributes = {
            id = id,
            position = centerX.." "..centerY.." "..centerZ,
            width = math.abs(bottomRight.x - topLeft.x) * parent.widthFactor,
            height = math.abs(bottomRight.y - topLeft.y) * parent.heightFactor,
            scale = parent.scale,
            rotation = parent.rotation,
            active = params.active == nil or params.active,
        },
    }

    if params.onClick then
        elem.onClick = params.onClick
        local onClickFunctionName = id.."_OnClick"
        self.setVar(onClickFunctionName, function(_, mouseButton)
            elem.onClick(mouseButton)
        end)
        elem.attributes.onClick = "Global/"..onClickFunctionName
    end

    if params.onValueChanged then
        elem.onValueChanged = params.onValueChanged
        local onValueChangedFunctionName = id.."_OnValueChanged"
        self.setVar(onValueChangedFunctionName, function(_, value)
            elem.onValueChanged(value)
        end)
        elem.attributes.onValueChanged = "Global/"..onValueChangedFunctionName
    end

    table.insert(parent.children, elem)

    return elem
end

---------------------------------------------------------------------------------------------------

Ui.BaseClass = {
    Show = function(elem)
        log:Debugf("Showing %s", elem.attributes.id)
        elem.attributes.active = true
        elem.object.UI.setAttribute(elem.attributes.id, "active", true)
    end,

    Hide = function(elem)
        log:Debugf("Hiding %s", elem.attributes.id)
        elem.attributes.active = false
        elem.object.UI.setAttribute(elem.attributes.id, "active", false)
    end,
}
Ui.BaseClass.__index = Ui.BaseClass

---------------------------------------------------------------------------------------------------

Ui.TextClass = {
    Text = function(textValue)
        return text.object.UI.getAttribute(text.attributes.id, "text")
    end,

    SetText = function(text, textValue)
        textValue = textValue or ""   -- nil will not actually clear the text
        log:Debugf("Setting text for %s to '%s'", text.attributes.id, textValue)
        text.attributes.text = textValue
        text.object.UI.setAttributes(text.attributes.id, {
            text = textValue,
            color = text.attributes.color, -- color is required otherwise TTS will reset it to black
        })
    end,

    SetColor = function(text, color)
        log:Debugf("Setting text color for %s to %s", text.attributes.id, color)
        text.attributes.color = color  -- must track this for future SetText() invocations
        text.object.UI.setAttribute(text.attributes.id, "color", color)
    end,

    SetFontStyle = function(text, fontStyle)
        log:Debugf("Setting font style for %s to %s", text.attributes.id, fontStyle)
        text.attributes.fontStyle = fontStyle
        text.object.UI.setAttribute(text.attributes.id, "fontStyle", fontStyle)
    end,
}

Ui.TextClass.__index = Ui.TextClass
setmetatable(Ui.TextClass, { __index = Ui.BaseClass })

---------------------------------------------------------------------------------------------------

function Ui.Text(parent, params)
    assert(Check.Num(params.fontSize))
    local text = parent.CreateElem("Text", parent, params)
    text.attributes.text = params.text or ""
    text.attributes.color = params.color or Ui.DARK_BROWN
    text.attributes.alignment = params.alignment or "MiddleLeft"
    text.attributes.fontSize = params.fontSize
    text.attributes.fontStyle = params.fontStyle
    text.attributes.textOffset = params.textOffset or "0 0 0 0"
    text.attributes.horizontalOverflow = params.horizontalOverflow or "Overflow"
    text.attributes.verticalOverflow = params.verticalOverflow or "Overflow"
    setmetatable(text, Ui.TextClass)

    return text
end

---------------------------------------------------------------------------------------------------

Ui.ButtonClass = {
    SetOnClick = function(button, onClick)
        button.onClick = onClick
    end,

    SetText = function(button, text)
        text = text or ""
        log:Debugf("Setting %s text to %s", button.attributes.id, text)
        button.attributes.text = text
        button.object.UI.setAttributes(button.attributes.id, {
            text = text,
            textColor = button.attributes.textColor,
        })
    end,

    SetImage = function(button, image)
        button.attributes.image = image
        if image then
            log:Debugf("Setting button %s image to %s", button.attributes.id, image)
            button.attributes.colors = Ui.IMAGE_COLORS
            button.object.UI.setAttributes(button.attributes.id, {
                image = image,
                colors = Ui.IMAGE_COLORS,
            })
        else
            log:Debugf("Clearing %s image", button.attributes.id)
            button.attributes.colors = Ui.INVISIBLE_COLORS
            button.object.UI.setAttributes(button.attributes.id, {
                image = nil,
                colors = Ui.INVISIBLE_COLORS,
            })
        end
    end,

    SetColors = function(button, colors)
        log:Debugf("Setting colors for %s to %s", button.id, colors)
        button.attributes.colors = colors
        button.object.UI.setAttribute(button.attributes.id, "colors", colors)
    end,
}

Ui.ButtonClass.__index = Ui.ButtonClass
setmetatable(Ui.ButtonClass, { __index = Ui.BaseClass })

---------------------------------------------------------------------------------------------------

function Ui.Button(parent, params)
    assert(Check.Func(params.onClick))

    local button = parent.CreateElem("Button", parent, params)
    if params.image then
        button.attributes.image = params.image
        button.attributes.colors = Ui.IMAGE_COLORS
    else
        button.attributes.colors = Ui.INVISIBLE_COLORS
    end
    button.attributes.text = params.text
    button.attributes.textColor = params.textColor
    button.attributes.fontSize = params.fontSize
    button.attributes.textAlignment = params.textAlignment or "MiddleLeft"
    setmetatable(button, Ui.ButtonClass)

    return button
end

---------------------------------------------------------------------------------------------------

Ui.InputClass = {
    Set = function(input, text)
        text = text or ""   -- nil will not actually clear the text
        log:Debugf("Setting text for %s to '%s'", input.attributes.id, text)
        input.attributes.text = text
        input.object.UI.setAttributes(input.attributes.id, {
            text = text,
            textColor = input.attributes.textColor,
        })
    end,
}

Ui.InputClass.__index = Ui.InputClass
setmetatable(Ui.InputClass, { __index = Ui.BaseClass })

---------------------------------------------------------------------------------------------------

function Ui.Input(parent, params)
    assert(Check.Func(params.onValueChanged))

    local input = parent.CreateElem("InputField", parent, params)
    input.attributes.colors = params.colors or Ui.INVISIBLE_COLORS
    input.attributes.text = params.text
    input.attributes.placeholder = params.placeholder or " "
    input.attributes.textColor = params.textColor or Ui.DARK_BROWN
    input.attributes.selectionColor = params.selectionColor or "#44444488"
    input.attributes.fontSize = params.fontSize
    input.attributes.fontStyle = params.fontStyle
    input.attributes.textAlignment = params.textAlignment or "MiddleLeft"
    input.attributes.textOffset = params.textOffset or "0 0 0 0"
    input.attributes.readOnly = params.readOnly
    input.attributes.lineType = params.lineType
    setmetatable(input, Ui.InputClass)

    return input
end

---------------------------------------------------------------------------------------------------

Ui.CheckBoxClass = {
    Set = function(checkBox, checked)
        if checked then
            checkBox.attributes.image = "CheckBoxFilled"
            checkBox.attributes.colors = Ui.IMAGE_COLORS
            checkBox.object.UI.setAttribute(checkBox.attributes.id, "image", "CheckBoxFilled")
            checkBox.object.UI.setAttribute(checkBox.attributes.id, "colors", Ui.IMAGE_COLORS)
        else
            checkBox.attributes.image = nil
            checkBox.attributes.colors = Ui.INVISIBLE_COLORS
            checkBox.object.UI.setAttribute(checkBox.attributes.id, "image", nil)
            checkBox.object.UI.setAttribute(checkBox.attributes.id, "colors", Ui.INVISIBLE_COLORS)
        end
    end,
}
Ui.CheckBoxClass.__index = Ui.CheckBoxClass
setmetatable(Ui.CheckBoxClass, { __index = Ui.BaseClass })

---------------------------------------------------------------------------------------------------

function Ui.CheckBox(parent, params)
    assert(Check.Func(params.onClick))

    local checkBox = parent.CreateElem("Button", parent, params)
    if params.checked then
        checkBox.attributes.image = "CheckBoxFilled"
        checkBox.attributes.colors = Ui.IMAGE_COLORS
    else
        checkBox.attributes.image = nil
        checkBox.attributes.colors = Ui.INVISIBLE_COLORS
    end
    setmetatable(checkBox, Ui.CheckBoxClass)

    return checkBox
end

---------------------------------------------------------------------------------------------------

Ui.CounterClass = {
    Set = function(counter, value)
        assert(Check.Num(value))
        value = tostring(value)
        log:Debugf("Changing %s to %d", counter.text.attributes.id, value)
        counter.text.attributes.text = value
        counter.object.UI.setAttribute(counter.text.attributes.id, "text", value)
    end
}
Ui.CounterClass.__index = Ui.CounterClass

---------------------------------------------------------------------------------------------------

function Ui.Counter(parent, params)
    assert(Check.Func(params.onValueChanged))

    local midX = (params.topLeft.x + params.bottomRight.x) / 2

    local counter = {
        object = parent.object,

        text = Ui.Text(parent, {
            id = params.id,
            topLeft = params.topLeft,
            bottomRight = params.bottomRight,
            text = params.value or 0,
            color = Ui.LIGHT_BROWN,
            fontSize = params.fontSize,
            alignment = "LowerCenter",
            horizontalOverflow = "Overflow",
            verticalOverflow = "Overflow",
        }),

        minusButton = Ui.Button(parent, {
            id = params.id.."Minus",
            topLeft = params.topLeft,
            bottomRight = { x = midX, y = params.bottomRight.y },
            onClick = function(mouseButton)
                params.onValueChanged((mouseButton == Ui.LEFT_MOUSE_BUTTON) and -1 or -10)
            end,
        }),

        plusButton = Ui.Button(parent, {
            id = params.id.."Plus",
            topLeft = { x = midX, y = params.topLeft.y },
            bottomRight = params.bottomRight,
            onClick = function(mouseButton)
                params.onValueChanged((mouseButton == Ui.LEFT_MOUSE_BUTTON) and 1 or 10)
            end,
        }),
    }
    setmetatable(counter, Ui.CounterClass)

    return counter
end

---------------------------------------------------------------------------------------------------

Ui.PanelClass = {}
Ui.PanelClass.__index = Ui.PanelClass
setmetatable(Ui.PanelClass, { __index = Ui.BaseClass })

function Ui.Panel(parent, params)
    local panel = parent.CreateElem("Panel", parent, params)
    panel.attributes.color = params.color or "#00000000"
    panel.z = parent.z
    panel.rotation = "0 0 0"
    panel.positionFactor = parent.positionFactor
    panel.widthFactor = parent.widthFactor
    panel.heightFactor = parent.heightFactor
    panel.scale = parent.scale
    Ui.AddCreateFunctions(panel, parent.CreateElem)
    setmetatable(panel, Ui.PanelClass)

    return panel
end

---------------------------------------------------------------------------------------------------

Ui.ImageClass = {
    SetImage = function(image, imageValue)
        log:Debugf("Setting image for %s to '%s'", image.attributes.id, imageValue)
        image.attributes.image = imageValue
        image.object.UI.setAttribute(image.attributes.id, "image", imageValue)
    end
}
Ui.ImageClass.__index = Ui.ImageClass
setmetatable(Ui.ImageClass, { __index = Ui.BaseClass })

---------------------------------------------------------------------------------------------------

function Ui.Image(parent, params)
    local image = parent.CreateElem("Image", parent, params)
    image.attributes.image = params.image
    image.attributes.color = params.color or "#ffffffff";
    setmetatable(image, Ui.ImageClass)
    return image
end

---------------------------------------------------------------------------------------------------

function Ui.AddCreateFunctions(elem, createElemFunc)
    elem.CreateElem = createElemFunc
    elem.Text = Ui.Text
    elem.Button = Ui.Button
    elem.Input = Ui.Input
    elem.CheckBox = Ui.CheckBox
    elem.Counter = Ui.Counter
    elem.Image = Ui.Image
    elem.Panel = Ui.Panel
end

---------------------------------------------------------------------------------------------------

function Ui.Apply(ui)
    if #ui.children > 0 then
        ui.object.UI.setXmlTable(ui.children)
    end
end

---------------------------------------------------------------------------------------------------

return {
    Init = Ui.Init,
    PostInit = Ui.PostInit,
    Get2d = Ui.Get2d,
    Create3d = Ui.Create3d,
    LEFT_MOUSE_BUTTON = Ui.LEFT_MOUSE_BUTTON,
}
