local Util = require("Kdm/Util/Util")
local Assert = require("Kdm/Util/Assert")
local Log = require("Kdm/Util/Log").ForPackage("Hunt")
local EventManager = require("Kdm/Util/EventManager")
local Ui = require("Kdm/XmlUi")
local Action = require("Kdm/Action")
local Archive = require("Kdm/Archive")
local Container = require("Kdm/Container")
local Locations = require("Kdm/Locations")

---------------------------------------------------------------------------------------------------

local Hunt = {
    setups = {},
    setupMap = {},
    monsterExpansions = {},
    settingUp = false,
    enabledExpansions = {},
}

---------------------------------------------------------------------------------------------------

function Hunt.RegisterExpansion(expansion)
    for monster, setup in pairs(expansion.setups or {}) do
        if setup.huntTrack then
            local levels = {}
            for _, level in ipairs(setup.levels) do
                if level.monsterHuntPosition then
                    table.insert(levels, level)
                end
            end
            local huntSetup = {
                monster = monster,
                huntTrack = setup.huntTrack,
                huntEventsDeck = setup.huntEventsDeck or monster.." Hunt Events",
                levels = levels,
                levelMap = levelMap,
            }
            if setup.resourcesDeck != false then
                huntSetup.resourceDeck = monster.." Resources"
            end
            table.insert(Hunt.setups, huntSetup)
            Hunt.setupMap[monster] = huntSetup
        end
    end

    for _, monster in ipairs(expansion.monsters or {}) do
        Assert(Hunt.monsterExpansions[monster] == nil, "Monster %s already registered to %s", monster, Hunt.monsterExpansions[monster])
        Hunt.monsterExpansions[monster] = expansion.name
    end
end

---------------------------------------------------------------------------------------------------

function Hunt.CleanupInternal()
    Archive.CleanupBags()

    local blocking = Action.BoxClean({ location = "Hunt Cards", types = {
        "Hunt Events",
        "Monster Hunt Events",
        "Special Hunt Events",
    } })
    blocking = Util.ConcatArrays(blocking, Action.BoxClean({ location = "Hunt Track", types = {
        "Hunt Events",
        "Monster Hunt Events",
        "Special Hunt Events",
        "Monster Figurine",
        "Hunt Party",
    } }))

    return blocking
end

---------------------------------------------------------------------------------------------------

function Hunt.Cleanup()
    Hunt.CleanupInternal()
    EventManager.FireEvent("onHuntCleanup")
    Log.Printf("Cleaned up hunt.")
end

---------------------------------------------------------------------------------------------------

function Hunt.Setup(monsterSetup, levelSetup)
    if Hunt.settingUpHunt == true then
        Log.Errorf("Hunt setup currently in progress, please wait until finished before setting up another hunt. If the hunt appears to be stuck, click 'Cleanup Hunt' from the 'Cleanup' menu to reset.")
        return 1
    end

    local blocking = Hunt.CleanupInternal()
    blocking = Util.ConcatArrays(blocking, Action.RayClean({ location = "Monster Resources", types = { "Monster Resources" } }))
    if #blocking > 0 then
        Log.Broadcastf("Something is blocking hunt setup. Please move the highlighted objects out of the way and try again.")
        Util.HighlightAll(blocking)
        return
    end

    Log.Printf("Setting up hunt for %s %s...", monsterSetup.monster, levelSetup.name)

    Hunt.settingUpHunt = true

    local huntEventsDeck = Container(Archive.Take({ name = "Hunt Events", type = "Hunt Events", location = "Hunt Events", rotation = Locations.FACE_DOWN }))
    huntEventsDeck:Shuffle()
    local monsterHuntEventsDeck = Container(Archive.Take({ name = monsterSetup.huntEventsDeck, type = "Monster Hunt Events",  location = "Monster Hunt Events", rotation = Locations.FACE_DOWN }))
    monsterHuntEventsDeck:Shuffle()
    Archive.Take({ name = "Herb Gathering", type = "Special Hunt Events", location = "Herb Gathering" })
    Archive.Take({ name = "Mineral Gathering", type = "Special Hunt Events", location = "Mineral Gathering" })
    Archive.Take({ name = "Sky Fishing", type = "Special Hunt Events", location = "Sky Fishing" })

    if monsterSetup.resourcesDeck then
        local monsterResourcesDeck = Archive.Take({ name = monsterSetup.resourcesDeck, type = "Monster Resources", location = "Monster Resources", rotation = Locations.FACE_DOWN })
        monsterResourcesDeck.shuffle()
    end

    for i, c in ipairs(monsterSetup.huntTrack) do
        if c == 'H' then
            huntEventsDeck:Take({ location = "Hunt Track "..i, rotation = Locations.FACE_DOWN })
        elseif c == 'M' then
            monsterHuntEventsDeck:Take({ location = "Hunt Track "..i, rotation = Locations.FACE_DOWN })
        elseif c == 'O' then
            -- Overwhelming Darkness, no card
        elseif c == 'F' then
            Archive.Take({ name = "The Forest Gate", type = "Special Hunt Events", location = "Hunt Track "..i })
        else
            Assert.Fail("Unrecognized setup element %s at position %d in hunt setup %s %s", c, i, monsterSetup.monster, levelSetup.name)
        end
    end

    local monsterFigurine = Archive.Take({
        name = monsterSetup.monster,
        type = "Monster Figurine",
        location = "Hunt Track "..levelSetup.monsterHuntPosition,
        rotation = { x = 0, y = -90, z = 0 },
    })
    monsterFigurine.use_snap_points = true

    Archive.Take({
        name = "Hunt Party",
        type = "Hunt Party",
        location = levelSetup.partyHuntPosition and "Hunt Track "..levelSetup.partyHuntPosition or "Hunt Track Start",
        rotation = { x = 0, y = 90, z =0 },
    })

    Archive.CleanupBags()

    Log.Printf("Hunt ready. May your lanterns guide you in the darkness.")

    Hunt.settingUpHunt = false

    EventManager.FireEvent("onHuntStart")
end

---------------------------------------------------------------------------------------------------

Hunt.ui = {
    open = nil,
}

function Hunt.ShowUi()
    Log.Debugf("Showing Hunt UI")
    Hunt.ui.panel:Show()
    Hunt.ui.open = true
end

function Hunt.HideUi()
    Log.Debugf("Hiding Hunt UI")
    Hunt.ui.panel:Hide()
    Hunt.ui.open = nil
end

---------------------------------------------------------------------------------------------------

function Hunt.SelectMonster(monster)
    local button = Hunt.ui.monsterButtons[monster]
    Assert(button, "No hunt for %s", monster)
    Hunt.ui.monsterButtonGroup:Select(button)
end

function Hunt.SelectMonsterInternal(monsterSetup)
    Log.Debugf("Selected %s", monsterSetup.setup)
    Hunt.ui.monsterSetup = monsterSetup

    for i, level in ipairs(monsterSetup.levels) do
        local levelButton = Hunt.ui.levelButtons[i]
        levelButton:SetText(level.name)
        levelButton:SetValue(level)
        levelButton:Show()
    end

    for i = #monsterSetup.levels + 1, 7 do
        local levelButton = Hunt.ui.levelButtons[i]
        levelButton:SetText(nil)
        levelButton:SetValue(nil)
        levelButton:Hide()
    end

    Hunt.ui.levelButtonGroup:Select(Hunt.ui.levelButtons[1])
end

---------------------------------------------------------------------------------------------------

function Hunt.SelectLevel(level)
    Assert(Hunt.ui.monsterSetup, "No monster selected")
    for _, levelButton in ipairs(Hunt.ui.levelButtons) do
        if levelButton.value == level then
            Hunt.ui.levelButtonGroup:Select(levelButtons)
            return
        end
    end
    Assert.Fail("Selected monster %s doesn't have level %s", Hunt.ui.monsterSetup.monster, level)
end

function Hunt.SelectLevelInternal(levelSetup)
    Log.Debugf("Selected %s, %s", Hunt.ui.monsterSetup.monster, levelSetup.name)
    Hunt.ui.levelSetup = levelSetup
end

---------------------------------------------------------------------------------------------------

function Hunt.Init(saveState, ui)
    EventManager.AddHandler("onExpansionsChanged", function(enabledExpansions)
        Hunt.enabledExpansions = enabledExpansions
    end)

    table.sort(Hunt.setups, function(x, y) return x.monster < y.monster end)

    Ui.ImageButton(ui, { id = "Hunt", rectAlignment = "UpperLeft", image = "HuntButton", x = 80+110, y = -10, width = 100, height = 30, onClick = function()
        if Hunt.ui.open then
            Hunt.HideUi()
        else
            Hunt.ShowUi()
        end
    end })

    local panel = Ui.Panel(ui, { id = "Hunt", width = 667, height = 632, active = false })
    Hunt.ui.panel = panel
    Ui.Image(panel, { id = "Hunt", image = "Hunt", width = 667, height = 632 })

    Ui.InvisibleButton(panel, { id = "Close", x = 627, y = 592, width = 30, height = 30, onClick = Hunt.HideUi })

    local monsterScroll = Ui.VerticalScroll(panel, { x = 20+3, y = 307+3, width = 306-6, height = 216-6 })

    local monsterPanel = Ui.Panel(monsterScroll, { id = "Monster", width = 280, height = #Hunt.setups * 30 })
    local monsterButtonGroup = Ui.OptionButtonGroup(monsterPanel, { id = "Monster", selectedColors = Ui.DARK_BROWN_BUTTON_COLORS, unselectedColors = Ui.INVISIBLE_BUTTON_COLORS, textAlignment = "MiddleLeft", fontSize = 16, onSelect = Hunt.SelectMonsterInternal })
    Hunt.ui.monsterButtonGroup = monsterButtonGroup

    Hunt.ui.monsterButtons = {}
    local y = 0
    for i, setup in ipairs(Hunt.setups) do
        Hunt.ui.monsterButtons[setup.monster] = Ui.OptionButton(monsterButtonGroup, { rectAlignment = "UpperLeft", x = 0, y = y, width = 280, height = 30, text = setup.monster, value = setup })
        y = y - 30
    end

    local levelPanel = Ui.Panel(panel, { id = "Level", rectAlignment = "LowerLeft", x = 341+3, y = 307+3, width = 306-6, height = 216-6 })
    local levelButtonGroup = Ui.OptionButtonGroup(levelPanel, { id = "Level", selectedColors = Ui.DARK_BROWN_BUTTON_COLORS, unselectedColors = Ui.INVISIBLE_BUTTON_COLORS, textAlignment = "MiddleLeft", fontSize = 16, onSelect = Hunt.SelectLevelInternal })
    Hunt.ui.levelButtonGroup = levelButtonGroup

    Hunt.ui.levelButtons = {}
    local y = 0
    for i = 1, 7 do
        Hunt.ui.levelButtons[i] = Ui.OptionButton(levelButtonGroup, { rectAlignment = "UpperLeft", x = 0, y = y, width = 300, height = 30, active = false })
        y = y - 30
    end

    Ui.InvisibleButton(panel, { id = "Begin", x = 183, y = 227, width = 301, height = 60, onClick = function()
        if not Hunt.ui.monsterSetup or not Hunt.ui.levelSetup then
            Log.Broadcastf("Please select a monster and level")
            return
        end

        local expansion = Hunt.monsterExpansions[Hunt.ui.monsterSetup.monster]
        if not Hunt.enabledExpansions[expansion] then
            return Log.Broadcastf("%s expansion required. You can add expansions in the 'Setup' menu.", expansion)
        end

        Log.Debugf("Begin hunt clicked for monster %s, level %s", Hunt.ui.monsterSetup.monster, Hunt.ui.levelSetup.level)
        Hunt.HideUi()
        Hunt.Setup(Hunt.ui.monsterSetup, Hunt.ui.levelSetup)
    end })

    Ui.InvisibleButton(panel, { id = "Cleanup", x = 183, y = 20, width = 301, height = 60, onClick = function()
        Log.Debugf("Cleanup hunt clicked")
        Hunt.Cleanup()
    end })
end

---------------------------------------------------------------------------------------------------

return Hunt
