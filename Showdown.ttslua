local Assert = require("Kdm/Util/Assert")
local Log = require("Kdm/Util/Log").ForPackage("Showdown")
local Guids = require("Kdm/Guids")
local UiCounter = require("Kdm/UiCounter")
local UiButton = require("Kdm/UiButton")
local Grid = require("Kdm/Grid")
local Overlay = require("Kdm/Overlay")
local Script = require("Kdm/Script")
local PlayerBoard = require("Kdm/PlayerBoard")
local EventManager = require("Kdm/Util/EventManager")
local Locations = require("Kdm/Locations")

---------------------------------------------------------------------------------------------------

local Showdown = {
    setups = {},
    settingUp = false,
    monsterSizes = {},
}

SHOWDOWN_UI_HEIGHT = 10.75

---------------------------------------------------------------------------------------------------

function Showdown.RegisterSetups(setups)
    for monster, setup in pairs(setups or {}) do
        Assert(Showdown.setups[monster] == nil, "Showdown setup for monster %s already registered", monster)
        if setup.resourcesDeck == nil then setup.resourcesDeck = monster.." Resources" end
        if setup.info == nil then setup.info = monster.." Info" end
        if setup.basicAction == nil then setup.basicAction = monster.." Basic Action" end
        if setup.basicAiDeck == nil then setup.basicAiDeck = monster.." Basic AI" end
        if setup.advancedAiDeck == nil then setup.advancedAiDeck = monster.." Advanced AI" end
        if setup.legendaryAiDeck == nil then setup.legendaryAiDeck = monster.." Legendary AI" end
        if setup.specialAiDeck == nil then setup.specialAiDeck = monster.." Special AI" end
        if setup.hitLocationsDeck == nil then setup.hitLocationsDeck = monster.." Hit Locations" end
        Showdown.setups[monster] = setup
    end
end

---------------------------------------------------------------------------------------------------

function Showdown.RegisterMonsterSizes(monsterSizes)
    for monster, size in pairs(monsterSizes or {}) do
        Assert(Showdown.monsterSizes[monster] == nil, "Monster %s already registered", monster)
        Showdown.monsterSizes[monster] = size
    end
end

---------------------------------------------------------------------------------------------------

function Showdown.GetMovement()
    return Showdown.movement
end

---------------------------------------------------------------------------------------------------

function Showdown.GetToughness()
    return Showdown.toughness
end

---------------------------------------------------------------------------------------------------

function Showdown.GetSpeed()
    return Showdown.speed
end

---------------------------------------------------------------------------------------------------

function Showdown.GetEvasion()
    return Showdown.evasion
end

---------------------------------------------------------------------------------------------------

function Showdown.GetLuck()
    return Showdown.luck
end

---------------------------------------------------------------------------------------------------

function Showdown.SetAttribute(attribute, value)
    Assert.Str(attribute)
    Assert.Num(value)

    Assert(Showdown[attribute] != nil, "No such attribute: %s", attribute)

    Log.Debugf("Setting monster attribute %s to %d", attribute, value)

    local oldValue = Showdown[attribute]
    if oldValue != value then
        Showdown[attribute] = value
        UiCounter.Set(Showdown[attribute.."UiCounter"], value)
        EventManager.FireEvent("onMonsterChangeAttribute", attribute, value)
    end
end

---------------------------------------------------------------------------------------------------

local function Showdown_OnObjectDrop(_, object)
    if object.getGMNotes() != "Monster Figurine" then
        return
    end

    local size = Showdown.monsterSizes[object.getName()]
    if not size then
        Log.Debugf("Monster %s (%s) has no registered size", object.getName(), object.getGUID())
        return
    end

    Log.Debugf("Monster %s (%s) dropped", object.getName(), object.getGUID())

    object.setPositionSmooth(
        Grid.Snap(object, size),
        false,  -- collide
        true   -- smooth
    )

    Overlay.Destroy(object)
end

---------------------------------------------------------------------------------------------------

local function Showdown_OnObjectPickUp(_, object)
    if object.getGMNotes() != "Monster Figurine" then
        return
    end

    local size = Showdown.monsterSizes[object.getName()]
    if not size then
        Log.Debugf("Monster %s (%s) has no registered size", object.getName(), object.getGUID())
        return
    end

    Log.Debugf("Monster %s (%s) picked up", object.getName(), object.getGUID())

    if Showdown.movement == nil or Showdown.movement == 0 then
        Log.Debugf("Movement zero")
        return
    end

    Overlay.Create(
        object.getPosition(),
        size,
        Showdown.movement,
        { 0.0, 0.0, 0.0, 0.9 }
    )
end

---------------------------------------------------------------------------------------------------

function Showdown.AddCleanupStage(script, ignoreBlocking)
    local cleanupStage = Script.Stage(script, "Cleanup Showdown and Monster Boards")

    local types = {
        "AI",
        "Hit Locations",
        "Terrain",
        "Terrain Tiles",
        "Monster Figurine",
        "Token",
    }

    -- TODO: replace with a single terrain swatch clean
    Script.CleanAction(cleanupStage, { from = "Terrain", types = types, ignoreBlocking = ignoreBlocking })
    Script.CleanAction(cleanupStage, { from = "Terrain 1", types = types, ignoreBlocking = ignoreBlocking })
    Script.CleanAction(cleanupStage, { from = "Terrain 2", types = types, ignoreBlocking = ignoreBlocking })
    Script.CleanAction(cleanupStage, { from = "Terrain 3", types = types, ignoreBlocking = ignoreBlocking })
    Script.CleanAction(cleanupStage, { from = "Terrain 4", types = types, ignoreBlocking = ignoreBlocking })
    Script.CleanAction(cleanupStage, { from = "Terrain 5", types = types, ignoreBlocking = ignoreBlocking })
    Script.CleanAction(cleanupStage, { from = "Terrain 6", types = types, ignoreBlocking = ignoreBlocking })
    Script.CleanAction(cleanupStage, { from = "Terrain 7", types = types, ignoreBlocking = ignoreBlocking })
    Script.CleanAction(cleanupStage, { from = "Terrain 8", types = types, ignoreBlocking = ignoreBlocking })
    Script.CleanAction(cleanupStage, { from = "Monster Board", tags = { "Deck" }, types = types, ignoreBlocking = ignoreBlocking })

    -- don't block for the huge showdown board clean
    Script.CleanAction(cleanupStage, { ignoreBlocking = true, from = "Showdown Board", types = types })

    return cleanupStage
end

---------------------------------------------------------------------------------------------------

function Showdown.Cleanup()
    startLuaCoroutine(self, "Showdown_CleanupCoroutine")
end

function Showdown_CleanupCoroutine()
    Showdown.settingUp = false

    local script = Script.Create("Cleanup Showdown")
    local cleanupStage = Showdown.AddCleanupStage(script, true) -- ignoreBlocking = true
    Script.CleanAction(cleanupStage, { from = "Monster Resources", types = { "Monster Resources" }, ignoreBlocking = true })
    Script.Run(script)

    for _, attribute in ipairs({ "movement", "toughness", "speed", "damage", "accuracy", "luck" }) do
        Showdown.SetAttribute(attribute, 0)
    end

    Log.Printf("Cleaned up showdown.")

    EventManager.FireEvent("onShowdownCleanup")

    return 1
end

---------------------------------------------------------------------------------------------------

function Showdown.Setup(monster, level)
    Showdown.setupShowdownMonster, Showdown.setupShowdownLevel = monster, level
    startLuaCoroutine(self, "Showdown_SetupCoroutine")
end

function Showdown_SetupCoroutine()
    if Showdown.settingUp then
        Log.Errorf("Showdown setup currently in progress, please wait until finished before setting up another hunt. If the showdown appears to be stuck, click 'Cleanup Showdown' from the 'Cleanup' menu to reset.")
        return 1
    end

    local monster, level = Showdown.setupShowdownMonster, Showdown.setupShowdownLevel

    local monsterSetup = SetupData.setups[monster]
    Assert(monsterSetup, "No setup for %s", monster)
    local levelSetup = monsterSetup.levels[level]
    Assert(levelSetup, "No setup for %s, %s", monster, level)
    local showdownSetup = levelSetup.showdown
    Assert(showdownSetup, "No showdown setup for %s, %s", monster, level)

    local setupData = {
        monster = monster,
        level = level,

        monsterSetup = monsterSetup,
        levelSetup = levelSetup,
        showdownSetup = showdownSetup,

        savedAiDeck = nil,
        savedHitLocationsDeck = nil,

        nextMiscLocation = 1,

        nextTraitLocation = 1,
        traitOverflowCol = 21,
        traitOverflowRow = 2,

        nextTerrainLocation = 1,
        terrainOverflowCol = 2,
        terrainOverflowRow = 2,

        unfixedTerrain = {},
        savedTerrainTiles = {},
    }

    Showdown.settingUp = true

    Log.Printf("Setting up showdown against %s %s...", monster, level)

    local rules = showdownSetup.rules or monsterSetup.rules
    Rules.SpawnRules(rules[1], rules[2])

    local script = Script.Create("Showdown")

    local cleanupStage = Showdown.AddCleanupStage(script, false) -- ignoreBlocking = false

    ---------------------------------------------------------------------------
    -- spawn objects

    local spawnStage = Script.Stage(script, "Spawn Objects")

    Script.TakeAction(spawnStage, { monster = monsterSetup.info, type = "AI", to = "Monster Info" })
    Script.TakeAction(spawnStage, { monster = monsterSetup.basicAction, type = "AI", to = "Basic Action" })

    Script.TakeAction(spawnStage, { monster = monsterSetup.basicAiDeck, type = "AI", to = "Unused Basic AI", rotation = Script.FACE_DOWN })

    if monsterSetup.advancedAiDeck then
        Script.TakeAction(spawnStage, { monster = monsterSetup.advancedAiDeck, type = "AI", to = "Unused Advanced AI", rotation = Script.FACE_DOWN })
    end

    if monsterSetup.legendaryAiDeck then
        Script.TakeAction(spawnStage, { monster = monsterSetup.legendaryAiDeck, type = "AI", to = "Unused Legendary AI", rotation = Script.FACE_DOWN })
    end

    Script.TakeAction(spawnStage, { monster = monsterSetup.specialAiDeck, type = "AI", to = "Unused Special AI", rotation = Script.FACE_DOWN, saveId = "Special AI Deck" })

    Script.TakeAction(spawnStage, { monster = monsterSetup.hitLocationsDeck, type = "Hit Locations", to = "HL", rotation = Script.FACE_DOWN, saveId = "Hit Locations Deck" })

    Script.TakeAction(spawnStage, { monster = "Terrain", type = "Terrain", to = "Terrain", rotation = Script.FACE_DOWN })

    Script.TakeAction(spawnStage, { monster = "Terrain Tiles", type = "Terrain Tiles", to = "Terrain Tiles" })

    for _, miscObject in ipairs(showdownSetup.miscObjects or monsterSetup.miscObjects or {}) do
        Showdown.AddMiscObject(miscObject.monster, miscObject.type, spawnStage, setupData)
    end

    if monsterSetup.resourcesDeck then
        local hits = Locations.BoxCast("Monster Resources")
        local monsterResourcesAlreadySpawned = false
        for _, hit in ipairs(hits) do
            local obj = hit.hit_object
            if obj.getmonster() == monsterSetup.resourcesDeck and obj.getGMNotes() == "Monster Resources" then
                Log.Debugf("Found monster resources: %s (%s), skipping spawn", obj.getmonster(), obj.getGUID())
                monsterResourcesAlreadySpawned = true
                break
            end
        end
        if not monsterResourcesAlreadySpawned then
            Script.CleanAction(cleanupStage, { from = "Monster Resources", types = { "Monster Resources" }, false })
            Script.TakeAction(spawnStage, { monster = monsterSetup.resourcesDeck, type = "Monster Resources", to = "Monster Resources", rotation = Script.FACE_DOWN })
        end
    end

    ---------------------------------------------------------------------------
    -- misc deck merges with the special AI deck, so needs to be it's own stage to ensure special AI deck is fully spawned

    local spawnMiscAiStage = Script.Stage(script, "Spawn Misc AI Deck")
    if (showdownSetup.starting and showdownSetup.starting.misc) or showdownSetup.life then
        Script.TakeAction(spawnMiscAiStage, { monster = "Misc AI", type = "AI", to = "id:Special AI Deck", rotation = Script.FACE_DOWN })
    end

    ---------------------------------------------------------------------------
    -- shuffle decks

    local shuffleBeforeBuildStage = Script.Stage(script, "Shuffle Before Build")
    Script.WaitAction(shuffleBeforeBuildStage, 60)
    Script.ShuffleAction(shuffleBeforeBuildStage, { from = "Unused Basic AI" })
    if monsterSetup.advancedAiDeck then
        Script.ShuffleAction(shuffleBeforeBuildStage, { from = "Unused Advanced AI" })
    end
    if monsterSetup.legendaryAiDeck then
        Script.ShuffleAction(shuffleBeforeBuildStage, { from = "Unused Legendary AI" })
    end
    Script.ShuffleAction(shuffleBeforeBuildStage, { from = "Terrain" })

    ---------------------------------------------------------------------------
    -- build AI decks and setup terrain

    local buildStage = Script.Stage(script, "Build")

    -- player positions
    local playerPositions = showdownSetup.playerPositions or monsterSetup.playerPositions
    local playerRotations = showdownSetup.playerRotations or monsterSetup.playerRotations or { { 0, 0, 0 }, { 0, 0, 0 }, { 0, 0, 0 }, { 0, 0, 0 } }
    for i = 1, 4 do
        local figurine = PlayerBoard.GetFigurine(PlayerBoard.GetPlayerBoard(i))
        if figurine then
            Script.MoveAction(buildStage, {
                from = figurine,
                to = playerPositions[i],
                rotation = playerRotations[i],
            })
        end
    end

    -- starting cards
    if showdownSetup.starting then
        for _, card in ipairs(showdownSetup.starting.basic or {}) do
            Showdown.AddStartingCard(card, "Unused Basic AI", buildStage, setupData)
        end
        for _, card in ipairs(showdownSetup.starting.advanced or {}) do
            Showdown.AddStartingCard(card, "Unused Advanced AI", buildStage, setupData)
        end
        for _, card in ipairs(showdownSetup.starting.legendary or {}) do
            Showdown.AddStartingCard(card, "Unused Legendary AI", buildStage, setupData)
        end
        local allSpecial = Util.ConcatArrays((showdownSetup.starting.special or {}), (showdownSetup.starting.misc or {}))
        for _, card in ipairs(allSpecial) do
            Showdown.AddStartingCard(card, "Unused Special AI", buildStage, setupData)
        end
    end
    -- special case life, which "replaces" wound stack
    if showdownSetup.life then
        Script.TakeAction(buildStage, { monster = "Life", type = "AI", from = "Unused Special AI", to = "Wound Stack", rotation = Script.FACE_UP })
    end

    -- custom cards
    for _, card in ipairs(showdownSetup.customBasic or {}) do
        Showdown.AddAiCard(card, "Unused Basic AI", buildStage, setupData)
    end
    for _, card in ipairs(showdownSetup.customAdvanced or {}) do
        Showdown.AddAiCard(card, "Unused Advanced AI", buildStage, setupData)
    end
    for _, card in ipairs(showdownSetup.customLegendary or {}) do
        Showdown.AddAiCard(card, "Unused Legendary AI", buildStage, setupData)
    end
    for _, card in ipairs(showdownSetup.customSpecial or {}) do
        Showdown.AddAiCard(card, "Unused Special AI", buildStage, setupData)
    end

    -- random cards
    for i = 1, (showdownSetup.basic or 0) do
        Showdown.AddAiCard(nil, "Unused Basic AI", buildStage, setupData)
    end
    for i = 1, (showdownSetup.advanced or 0) do
        Showdown.AddAiCard(nil, "Unused Advanced AI", buildStage, setupData)
    end
    for i = 1, (showdownSetup.legendary or 0) do
        Showdown.AddAiCard(nil, "Unused Legendary AI", buildStage, setupData)
    end

    -- remove any unused hit locations
    for _, hl in ipairs(showdownSetup.removeHitLocations or {}) do
        Script.TakeAction(buildStage, { monster = hl, type = "Hit Locations", from = "HL", to = "Unused HL" })
    end

    -- spawn survivor statuses
    if showdownSetup.survivorStatus then
        for i = 1, 4 do
            Script.TakeAction(buildStage, { monster = showdownSetup.survivorStatus[i], from = "Unused Special AI", type = "AI", to = "Survivor Status "..i, rotation = Script.FACE_UP })
        end
    end

    -- special terrain
    for _, terrainSetup in ipairs(showdownSetup.specialTerrain or monsterSetup.specialTerrain or {}) do
        if terrainSetup.terrain then
            Showdown.AddTerrain(terrainSetup.terrain, nil, false, buildStage, setupData)
        end
    end
    -- fixed terrain
    for _, terrainSetup in ipairs(showdownSetup.fixedTerrain or monsterSetup.fixedTerrain or {}) do
        Showdown.AddTerrain(terrainSetup.terrain, "Terrain", false, buildStage, setupData)
    end
    -- unfixed terrain
    for _, terrain in ipairs(showdownSetup.unfixedTerrain or monsterSetup.unfixedTerrain or {}) do
        Showdown.AddTerrain(terrain, "Terrain", true, buildStage, setupData)
    end
    -- random terrain
    for i = 1, (showdownSetup.randomTerrain or monsterSetup.randomTerrain or 0) do
        Showdown.AddTerrain(nil, "Terrain", true, buildStage, setupData)
    end

    ---------------------------------------------------------------------------

    -- shuffle AI/HL
    local shuffleStage = Script.Stage(script, "Shuffle Decks")
    Script.WaitAction(shuffleStage, 60)
    Script.ShuffleAction(shuffleStage, { from = "AI" })
    Script.ShuffleAction(shuffleStage, { from = "HL" })

    ---------------------------------------------------------------------------

    local deckOrderStage = Script.Stage(script, "Deck Order")
    Script.WaitAction(deckOrderStage, 30)
    if showdownSetup.topAiCards or showdownSetup.bottomAiCards then
        Script.OrderAction(deckOrderStage, {
            from = "id:"..setupData.savedAiDeck,
            top = showdownSetup.topAiCards,
            bottom = showdownSetup.bottomAiCards,
        })
    end
    if showdownSetup.topHitLocationCards then
        Script.OrderAction(deckOrderStage, {
            from = "id:Hit Locations Deck",
            top = showdownSetup.topHitLocationCards,
        })
    end

    ---------------------------------------------------------------------------

    -- we have to break the script up into two pieces because the terrain tile spawning stage depends on the random terrain cards actually being drawn from the top of the deck
    local _, blockingObj, locationBlocked = Script.Run(script)
    if blockingObj != nil then
        Showdown.Cleanup()
        Log.Broadcastf("Found an object %s(%s) blocking %s of the showdown setup. Please move it out of the way and try again.", blockingObj.getmonster(), blockingObj.tag, locationBlocked)
        return 1
    end

    local script = Script.Create("Showdown, part 2", true)

    ---------------------------------------------------------------------------
    -- spawn terrain tiles

    local spawnTerrainTilesStage = Script.Stage(script, "Spawn Terrain Tiles")

    for _, terrainSetup in ipairs(showdownSetup.specialTerrain or monsterSetup.specialTerrain or {}) do
        if terrainSetup.terrainTile then
            Script.TakeAction(spawnTerrainTilesStage, { monster = terrainSetup.terrainTile, type = "Terrain Tiles", to = terrainSetup.position, rotation = terrainSetup.rotation })
        end
    end

    for _, terrainSetup in ipairs(showdownSetup.fixedTerrain or monsterSetup.fixedTerrain or {}) do
        local data = Showdown.terrainData[terrainSetup.terrain]
        Assert(data, "No terrain data for %s", terrainSetup.terrain)

        for i, pos in ipairs(terrainSetup.positions) do
            Showdown.AddTerrainTile(data.terrainTile, pos, terrainSetup.rotations[i], spawnTerrainTilesStage, setupData)
        end

        for _, miscObject in ipairs(data.miscObjects or {}) do
            Showdown.AddMiscObject(miscObject.monster, miscObject.type, spawnTerrainTilesStage, setupData)
        end

        for _, starting in ipairs(data.starting or {}) do
            Showdown.AddStartingCard(starting, nil, spawnTerrainTilesStage, setupData)
        end
    end

    for _, unfixedTerrain in ipairs(setupData.unfixedTerrain) do
        local data = Showdown.terrainData[unfixedTerrain.terrain]
        Assert(data, "No terrain data for %s", unfixedTerrain.terrain)

        local count = data.count
        if count == "*" then
            count = levelSetup.level
        end
        if terrain == "Egg Sacs" and monster == "Spidicules" then
            count = count * 2
        end

        for i = 1, count do
            Log.Debugf("Adding %s -> %s", data.terrainTile, unfixedTerrain.location)
            Showdown.AddTerrainTile(data.terrainTile, unfixedTerrain.location, nil, spawnTerrainTilesStage, setupData)
        end

        for _, miscObject in ipairs(data.miscObjects or {}) do
            Showdown.AddMiscObject(miscObject.monster, miscObject.type, spawnTerrainTilesStage, setupData)
        end

        for _, starting in ipairs(data.starting or {}) do
            Showdown.AddStartingCard(starting, nil, spawnTerrainTilesStage, setupData)
        end
    end

    -- this has problem with slow loads
    -- local lockFixedTerrainTilesStage = Script.Stage(script, "Lock Fixed Terrain Tiles")
    -- Script.WaitAction(lockFixedTerrainTilesStage, 60)
    -- Script.LockAction(lockFixedTerrainTilesStage, {
    --     from = "Showdown Grid",
    --     types = { "Terrain Tiles" },
    -- })

    -- must do this after terrain since some monsters spawn on top of terrain (Phoenix)
    local spawnMonsterStage = Script.Stage(script, "Spawn Monster")
    Script.TakeAction(spawnMonsterStage, {
        monster = monster,
        type = "Monster Figurine",
        to = showdownSetup.position or monsterSetup.position,
        rotation = showdownSetup.rotation or monsterSetup.rotation or Script.FACE_UP,
    })

    local _, blockingObj, locationBlocked = Script.Run(script)
    if blockingObj != nil then
        Showdown.Cleanup()
        Log.Broadcastf("Found an object %s(%s) blocking %s of the showdown setup. Please move it out of the way and try again.", blockingObj.getmonster(), blockingObj.tag, locationBlocked)
        return 1
    end

    -- set monster stats
    for _, attribute in ipairs({ "movement", "toughness", "speed", "damage", "accuracy", "evasion", "luck" }) do
        Showdown.SetAttribute(attribute, showdownSetup[attribute] or 0)
    end

    Showdown.settingUp = false
    Log.Printf("Showdown setup finished. Death awaits.")

    EventManager.FireEvent("onShowdownStart")

    return 1
end

---------------------------------------------------------------------------------------------------

function Showdown.AddStartingCard(card, from, stage, setupData)
    if setupData.nextTraitLocation <= LOCATIONS_MAX_TRAITS_MOODS then
        Script.TakeAction(stage, { monster = card, type = "AI", from = from, to = "Trait/Mood "..setupData.nextTraitLocation, rotation = Script.FACE_UP })
        setupData.nextTraitLocation = setupData.nextTraitLocation + 1
    else
        Log.Errorf("Not enough trait/mood spaces for '%s'!", card)
        local to = string.format("(%d, %d)", setupData.traitOverflowCol, setupData.traitOverflowRow)
        Script.TakeAction(stage, { monster = card, type = "AI", from = location, to = to, rotation = Script.FACE_UP })
        setupData.traitOverflowRow = setupData.traitOverflowRow + 3
        if setupData.traitOverflowRow > 16 then
            setupData.traitOverflowRow = 2
            setupData.traitOverflowCol = setupData.traitOverflowCol - 2
        end
    end
end

---------------------------------------------------------------------------------------------------

function Showdown.AddAiCard(card, from, stage, setupData)
    if setupData.savedAiDeck then
        Script.TakeAction(stage, {
            monster = card,
            type = "AI",
            from = from,
            to = "id:"..setupData.savedAiDeck,
        })
    else
        Script.TakeAction(stage, {
            monster = card,
            type = "AI",
            from = from,
            to = "AI",
            saveId = "Ai Deck",
        })
        setupData.savedAiDeck = "Ai Deck"
    end
end

---------------------------------------------------------------------------------------------------

function Showdown.AddTerrain(terrain, from, recordUnfixed, stage, setupData)
    local location = nil
    if setupData.nextTerrainLocation <= LOCATIONS_MAX_TERRAIN then
        location = "Terrain "..setupData.nextTerrainLocation
        setupData.nextTerrainLocation = setupData.nextTerrainLocation + 1
    else
        Log.Errorf("Not enough terrain spaces for '%s'!", terrain)
        location = string.format("(%d, %d)", setupData.terrainOverflowCol, setupData.terrainOverflowRow)
        setupData.terrainOverflowRow = setupData.terrainOverflowRow + 3
        if setupData.terrainOverflowRow >= 16 then
            setupData.terrainOverflowRow = 2
            setupData.terrainOverflowCol = setupData.terrainOverflowCol + 2
        end
    end

    local spawnFunc = nil
    if recordUnfixed then
        spawnFunc = function(obj)
            table.insert(setupData.unfixedTerrain, { terrain = obj.getmonster(), location = location })
        end
    end

    Script.TakeAction(stage, {
        monster = terrain,
        type = "Terrain",
        from = from,
        to = location,
        rotation = Script.FACE_UP,
        spawnFunc = spawnFunc,
    })
end

---------------------------------------------------------------------------------------------------

function Showdown.AddTerrainTile(terrainTile, location, rotation, stage, setupData)
    if not setupData.savedTerrainTiles[terrainTile] then
        Script.TakeAction(stage, {
            monster = terrainTile,
            type = "Terrain Tiles",
            from = "Terrain Tiles",
            to = location,
            rotation = rotation or Script.FACE_UP,
            saveId = terrainTile,
        })
        setupData.savedTerrainTiles[terrainTile] = true
    else
        Script.CloneAction(stage, {
            from = "id:"..terrainTile,
            to = location,
            rotation = rotation or Script.FACE_UP,
        })
    end
end

---------------------------------------------------------------------------------------------------

function Showdown.AddMiscObject(monster, type, stage, setupData)
    Script.TakeAction(stage, { monster = monster, type = type, to = "Misc "..setupData.nextMiscLocation })
    if setupData.nextMiscLocation < LOCATIONS_MAX_MISC then
        setupData.nextMiscLocation = setupData.nextMiscLocation + 1
    else
        Log.Errorf("Ran out of misc locations for %s, %s", setupData.monster, setupData.level)
    end
end

---------------------------------------------------------------------------------------------------

function Showdown.Save()
    return {
        movement = Showdown.movement,
        toughness = Showdown.toughness,
        damage = Showdown.damage,
        speed = Showdown.speed,
        accuracy = Showdown.accuracy,
        evasion = Showdown.evasion,
        luck = Showdown.luck,
    }
end

---------------------------------------------------------------------------------------------------

function Showdown.Init(saveState)
    local showdownBoardObj = Guids.GetObject("Showdown Board")

    saveState = saveState or {}
    Showdown.movement = saveState.movement or 0
    Showdown.toughness = saveState.toughness or 0
    Showdown.damage = saveState.damage or 0
    Showdown.speed = saveState.speed or 0
    Showdown.accuracy = saveState.accuracy or 0
    Showdown.evasion = saveState.evasion or 0
    Showdown.luck = saveState.luck or 0

    local attributes = { "movement", "toughness", "damage", "speed", "accuracy", "evasion", "luck" }
    local x = 5.04
    local z = 0.01
    local dz = 0.555
    local size = 1000

    for i, attribute in ipairs(attributes) do
        Showdown[attribute.."UiCounter"] = UiCounter.Create({
            object = showdownBoardObj,
            name = attribute,
            value = Showdown[attribute],
            position = { x, SHOWDOWN_UI_HEIGHT, z + ((i - 1) * dz) },
            size = size,
            changeFunc = function(uiCounter, delta)
                Showdown.SetAttribute(attribute, Showdown[attribute] + delta)
            end
        })
    end

    EventManager.AddHandler("onObjectDrop", Showdown_OnObjectDrop)
    EventManager.AddHandler("onObjectPickUp", Showdown_OnObjectPickUp)
end

---------------------------------------------------------------------------------------------------

return Showdown
