local Util = require("Kdm/Util")

---------------------------------------------------------------------------------------------------

function Check(condition, fmt, ...)
    if not condition then
        return false, Util.SafeFormat(fmt, ...)
    end
    return true
end

---------------------------------------------------------------------------------------------------

function CheckFail(fmt, ...)
    if debug then
        log(debug.traceback(), nil, "error")
    end
    return false, Util.SafeFormat(fmt, ...)
end

---------------------------------------------------------------------------------------------------

function CheckStr(value, fmt, ...)
    if value == nil then
        return false, "Required string is nil: "..Util.SafeFormat(fmt, ...)
    end
    local t = type(value)
    if t != "string" then
        return false, Util.SafeFormat("Required string arg has type %s: "..(fmt or ""), t, ...)
    end
    return true
end

---------------------------------------------------------------------------------------------------

function CheckStrOrNil(value, fmt, ...)
    if value != nil then
        local t = type(value)
        if t != "string" then
            return false, Util.SafeFormat("Optional string arg has type %s: "..(fmt or ""), t, ...)
        end
    end
    return true
end

---------------------------------------------------------------------------------------------------

function CheckNum(value, fmt, ...)
    if value == nil then
        return false, Util.SafeFormat("Required number arg is nil: "..(fmt or ""), ...)
    end
    local t = type(value)
    if t != "number" then
        return false, Util.SafeFormat("Required number arg has type %s: "..(fmt or ""), t, ...)
    end
    return true
end

---------------------------------------------------------------------------------------------------

function CheckNumOrNil(value, fmt, ...)
    if value != nil then
        local t = type(value)
        if t != "number" then
            return false, Util.SafeFormat("Optional number arg has type %s: "..(fmt or ""), t, ...)
        end
    end
    return true
end

---------------------------------------------------------------------------------------------------

function CheckBool(value, fmt, ...)
    if value == nil then
        return false, Util.SafeFormat("Required boolean arg is nil: "..(fmt or ""), ...)
    end
    local t = type(value)
    if t != "boolean" then
        return false, Util.SafeFormat("Required boolean arg has type %s: "..(fmt or ""), t, ...)
    end
    return true
end

---------------------------------------------------------------------------------------------------

function CheckBoolOrNil(value, fmt, ...)
    if value != nil then
        local t = type(value)
        if t != "boolean" then
            return false, Util.SafeFormat("Optional boolean arg has type %s: "..(fmt or ""), t, ...)
        end
    end
    return true
end

---------------------------------------------------------------------------------------------------

function CheckTable(value, fmt, ...)
    if value == nil then
        return false, Util.SafeFormat("Required table arg is nil: "..(fmt or ""), ...)
    end
    local t = type(value)
    if t != "table" then
        return false, Util.SafeFormat("Required table arg has type %s: "..(fmt or ""), t, ...)
    end
    return true
end

---------------------------------------------------------------------------------------------------

function CheckTableOrNil(value, fmt, ...)
    if value != nil then
        local t = type(value)
        if t != "table" then
            return false, Util.SafeFormat("Optional table arg has type %s: "..(fmt or ""), t, ...)
        end
    end
    return true
end

---------------------------------------------------------------------------------------------------

function CheckFunc(value, fmt, ...)
    if value == nil then
        return false, Util.SafeFormat("Required function arg is nil: "..(fmt or ""), ...)
    end
    local t = type(value)
    if t != "function" then
        return false, Util.SafeFormat("Required function arg has type %s: "..(fmt or ""), t, ...)
    end
    return true
end

---------------------------------------------------------------------------------------------------

function CheckFuncOrNil(value, fmt, ...)
    if value != nil then
        local t = type(value)
        if t != "function" then
            return false, Util.SafeFormat("Optional function arg has type %s: "..(fmt or ""), t, ...)
        end
    end
    return true
end

---------------------------------------------------------------------------------------------------

function CheckVec3(value, fmt, ...)
    if value == nil then
        return false, Util.SafeFormat("Required vec3 arg is nil: "..(fmt or ""), ...)
    end
    local t = type(value)
    if t != "table" then
        return false, Util.SafeFormat("Required vec3 arg has type %s: "..(fmt or ""), t, ...)
    end
    if value.x == nil or value.y == nil or value.z == nil then
        return false, Util.SafeFormat("Required arg must be a vec3: %s "..(fmt or ""), value, ...)
    end
    return true
end

---------------------------------------------------------------------------------------------------

function CheckVec3OrNil(value, fmt, ...)
    if value != nil then
        local t = type(value)
        if t != "table" then
            return false, Util.SafeFormat("Optional vec3 arg has type %s: "..(fmt or ""), t, ...)
        end
        if value.x == nil or value.y == nil or value.z == nil then
            return false, Util.SafeFormat("Optional arg must be a vec3: %s "..(fmt or ""), value, ...)
        end
    end
    return true
end

---------------------------------------------------------------------------------------------------

function CheckVec2(value, fmt, ...)
    if value == nil then
        return false, Util.SafeFormat("Required vec2 arg is nil: "..(fmt or ""), ...)
    end
    local t = type(value)
    if t != "table" then
        return false, Util.SafeFormat("Required vec2 arg has type %s: "..(fmt or ""), t, ...)
    end
    if value.x == nil or value.y == nil then
        return false, Util.SafeFormat("Required arg must be a vec2: %s "..(fmt or ""), value, ...)
    end
    return true
end

---------------------------------------------------------------------------------------------------

function CheckVec2OrNil(value, fmt, ...)
    if value != nil then
        local t = type(value)
        if t != "table" then
            return false, Util.SafeFormat("Optional vec2 arg has type %s: "..(fmt or ""), t, ...)
        end
        if value.x == nil or value.y == nil then
            return false, Util.SafeFormat("Optional arg must be a vec2: %s "..(fmt or ""), value, ...)
        end
    end
    return true
end

---------------------------------------------------------------------------------------------------

function CheckColor(value, fmt, ...)
    if value == nil then
        return false, Util.SafeFormat("Required color arg is nil: "..(fmt or ""), ...)
    end
    local t = type(value)
    if t != "table" then
        return false, Util.SafeFormat("Required color arg has type %s: "..(fmt or ""), t, ...)
    end
    if #value != 3 and #value != 4 and (value.r == nil or value.g == nil or value.b == nil) then
        return false, Util.SafeFormat("Required arg must be a color: "..(fmt or ""), ...)
    end
    return true
end

---------------------------------------------------------------------------------------------------

function CheckColorOrNil(value, fmt, ...)
    if value != nil then
        local t = type(value)
        if t != "table" then
            return false, Util.SafeFormat("Optional color arg has type %s: "..(fmt or ""), t, ...)
        end
        if #value != 3 and #value != 4 and (value.r == nil or value.g == nil or value.b == nil) then
            return false, Util.SafeFormat("Optional arg must be a color: "..(fmt or ""), ...)
        end
    end
    return true
end

---------------------------------------------------------------------------------------------------

function CheckObject(value, fmt, ...)
    if value == nil then
        return false, Util.SafeFormat("Required userdata arg is nil: "..(fmt or ""), ...)
    end
    local t = type(value)
    if t != "userdata" then
        return false, Util.SafeFormat("Required userdata arg has type %s: "..(fmt or ""), t, ...)
    end
    return true
end

---------------------------------------------------------------------------------------------------

function CheckObjectOrNil(value, fmt, ...)
    if value != nil then
        local t = type(value)
        if t != "userdata" then
            return false, Util.SafeFormat("Optional userdata arg has type %s: "..(fmt or ""), t, ...)
        end
    end
    return true
end

---------------------------------------------------------------------------------------------------

function CheckTagged(value, tag, fmt, ...)
    if value == nil then
        return false, Util.SafeFormat("Required '%s' arg is nil: "..(fmt or ""), tag, ...)
    end
    local t = type(value)
    if t != "table" then
        return false, Util.SafeFormat("Required '%s' arg has type %s: "..(fmt or ""), tag, t, ...)
    end
    if value.tag != tag then
        return false, Util.SafeFormat("Required '%s' arg has invalid tag %s: "..(fmt or ""), tag, tostring(value.tag), ...)
    end
    return true
end

---------------------------------------------------------------------------------------------------
