local Check = require("Kdm/Util/Check")
local EventManager = require("Kdm/Util/EventManager")
local log = require("Kdm/Log").ForModule("Survivor")
local Util = require("Kdm/Util/Util")

-------------------------------------------------------------------------------------------------

local Survivor = {}
Survivor.__index = Survivor
function Survivor.Is(x) return getmetatable(x) == Survivor end

-------------------------------------------------------------------------------------------------

function Survivor.Init(saveState)
    Survivor.nextSurvivorId = 1

    Survivor.survivors = {}
    Survivor.survivorsById = {}
    for _, survivorSaveState in ipairs(saveState) do
        local survivor = Survivor.Create(survivorSaveState)
        Survivor.nextSurvivorId = Util.Max(Survivor.nextSurvivorId, survivor:Id() + 1)
    end
end

-------------------------------------------------------------------------------------------------

function Survivor.Create(params)
    params = params or {}

    if not params.id then
        params.id = Survivor.nextSurvivorId
        Survivor.nextSurvivorId = Survivor.nextSurvivorId + 1
    end

    local survivor = {
        tag = "Survivor",
        id = params.id,
        name = params.name,
        marker = params.marker,
        male = params.male,
        female = params.female,
        reroll = params.reroll,
        skipNextHunt = params.skipNextHunt,
        retired = params.retired,
        dead = params.dead,
        survival = params.survival or 0,
        movement = params.movement or 5,
        speed = params.speed or 0,
        accuracy = params.accuracy or 0,
        strength = params.strength or 0,
        evasion = params.evasion or 0,
        modifiers = {
            movement = 0,
            speed = 0,
            accuracy = 0,
            strength = 0,
            evasion = 0,
            luck = 0,
        },
        luck = params.luck or 0,
        huntXp = params.huntXp or 0,
        insanity = params.insanity or 0,
        brainInjury = params.brainInjury,
        courage = params.courage or 0,
        understanding = params.understanding or 0,
        weaponProficiencyType = params.weaponProficiencyType,
        weaponProficiencyRank = params.weaponProficiencyRank or 0,
        notes1 = params.notes1,
        notes2 = params.notes2,
        notes3 = params.notes3,
        notes4 = params.notes4,
        notes5 = params.notes5,
        cards = params.cards or {},
    }
    setmetatable(survivor, Survivor)

    table.insert(Survivor.survivors, survivor)
    Survivor.survivorsById[survivor:Id()] = survivor

    log:Debugf("Created new survivor %d", survivor:Id())

    EventManager.FireEvent(EventManager.ON_SURVIVOR_CREATED, survivor)

    return survivor
end

---------------------------------------------------------------------------------------------------

function Survivor.Destroy(survivor)
    local index = nil
    for i, s in ipairs(Survivor.survivors) do
        if s == survivor then
            index = i
            break
        end
    end

    if not index then
        return log:Debugf("Survivor %s not found, it must have already been deleted", survivor)
    end

    table.remove(Survivor.survivors, i)
    Survivor.survivorsById[survivor:Id()] = nil

    log:Printf("Deleted survivor %s", survivor:NameOrUnnamed())

    EventManager.FireEvent(EventManager.ON_SURVIVOR_DESTROYED, survivor)
end

---------------------------------------------------------------------------------------------------

function Survivor.Save(survivor)
    local saveState = {}
    for _, survivor in ipairs(Survivor.survivors) do
        table.insert(saveState, {
            id = survivor.id,
            name = survivor.name,
            male = survivor.male,
            female = survivor.female,
            reroll = survivor.reroll,
            skipNextHunt = survivor.skipNextHunt,
            retired = survivor.retired,
            dead = survivor.dead,
            marker = survivor.marker,
            survival = survivor.survival,
            movement = survivor.movement,
            speed = survivor.speed,
            accuracy = survivor.accuracy,
            strength = survivor.strength,
            evasion = survivor.evasion,
            luck = survivor.luck,
            huntXp = survivor.huntXp,
            insanity = survivor.insanity,
            brainInjury = survivor.brainInjury,
            courage = survivor.courage,
            understanding = survivor.understanding,
            weaponProficiencyType = survivor.weaponProficiencyType,
            weaponProficiencyRank = survivor.weaponProficiencyRank,
            notes1 = survivor.notes1,
            notes2 = survivor.notes2,
            notes3 = survivor.notes3,
            notes4 = survivor.notes4,
            notes5 = survivor.notes5,
            cards = survivor.cards,
        })
    end
    return saveState
end

---------------------------------------------------------------------------------------------------

function Survivor.Import(saveState)
    Survivor.Init(saveState)
end

---------------------------------------------------------------------------------------------------

function Survivor.Export()
    return Survivor.Save()
end

---------------------------------------------------------------------------------------------------

function Survivor.MoveBefore(survivor, beforeSurvivor)
    if survivor == beforeSurvivor then
        return
    end

    local survivorIndex = nil
    local beforeSurvivorIndex = nil
    for i, s in ipairs(Survivor.survivors) do
        if s == survivor then
            survivorIndex = i
        elseif s == beforeSurvivor then
            beforeSurvivorIndex = i
        end
    end

    assert(Check(survivorIndex != nil))
    assert(Check(beforeSurvivorIndex != nil))

    table.insert(Survivor.survivors, beforeSurvivorIndex, Survivor.survivors[survivorIndex])
    if survivorIndex < beforeSurvivorIndex then
        table.remove(Survivor.survivors, survivorIndex)
    else
        table.remove(Survivor.survivors, survivorIndex + 1)
    end
end

---------------------------------------------------------------------------------------------------

function Survivor.MoveAfter(survivor, afterSurvivor)
    if survivor == afterSurvivor then
        return
    end

    local survivorIndex = nil
    local afterSurvivorIndex = nil
    for i, s in ipairs(Survivor.survivors) do
        if s == survivor then
            survivorIndex = i
        elseif s == afterSurvivor then
            afterSurvivorIndex = i
        end
    end

    assert(Check(survivorIndex != nil))
    assert(Check(afterSurvivorIndex != nil))

    table.insert(Survivor.survivors, afterSurvivorIndex + 1, Survivor.survivors[survivorIndex])
    if survivorIndex < afterSurvivorIndex then
        table.remove(Survivor.survivors, survivorIndex)
    else
        table.remove(Survivor.survivors, survivorIndex + 1)
    end
end

---------------------------------------------------------------------------------------------------

function Survivor:__tostring()
    return Util.SafeFormat("Survivor{id=%s,name=%s}", self.id, self:NameOrUnnamed())
end

-------------------------------------------------------------------------------------------------

function Survivor:Id() return self.id end

---------------------------------------------------------------------------------------------------

function Survivor:FireStatChangeEvent(stat, value)
    log:Debugf("Firing self stat change event for %s", stat)
    EventManager.FireEvent(EventManager.ON_SURVIVOR_STAT_CHANGE, self, stat, value)
end

---------------------------------------------------------------------------------------------------

function Survivor:SetStr(stat, value)
    assert(Check.Str(value))
    log:Debugf("Setting %s to %s for %s", stat, value, self)
    self[stat] = value
    self:FireStatChangeEvent(stat, value)
end

function Survivor:Name() return self.name end
function Survivor:NameOrUnnamed() return (self.name and self.name != "") and self.name or "Unnamed Survivor" end
function Survivor:SetName(value) self:SetStr("name", value) end

function Survivor:Marker() return self.marker end
function Survivor:SetMarker(value) self:SetStr("marker", value) end

function Survivor:WeaponProficiencyType() return self.weaponProficiencyType end
function Survivor:SetWeaponProficiencyType(value) self:SetStr("weaponProficiencyType", value) end

function Survivor:Notes1() return self.notes1 end
function Survivor:SetNotes1(value) self:SetStr("notes1", value) end

function Survivor:Notes2() return self.notes2 end
function Survivor:SetNotes2(value) self:SetStr("notes2", value) end

function Survivor:Notes3() return self.notes3 end
function Survivor:SetNotes3(value) self:SetStr("notes3", value) end

function Survivor:Notes4() return self.notes4 end
function Survivor:SetNotes4(value) self:SetStr("notes4", value) end

function Survivor:Notes5() return self.notes5 end
function Survivor:SetNotes5(value) self:SetStr("notes5", value) end

---------------------------------------------------------------------------------------------------

function Survivor:GetModified(stat) return self[stat] + self.modifiers[stat] end
function Survivor:GetUnmodified(stat) return self[stat] end
function Survivor:SetModified(stat, value)
    assert(Check.Num(value))
    log:Debugf("Setting %s to %d for %s", stat, value, self)
    self[stat] = value
    self:FireStatChangeEvent(stat, value)
    self:FireStatChangeEvent(stat.."Modified", self[stat] + self.modifiers[stat])
end

function Survivor:Movement() return self:GetUnmodified("movement") end
function Survivor:ModifiedMovement() return self:GetModified("movement") end
function Survivor:SetMovement(value) self:SetModified("movement", value) end

function Survivor:Speed() return self:GetUnmodified("speed") end
function Survivor:ModifiedSpeed() return self:GetModified("speed") end
function Survivor:SetSpeed(value) self:SetModified("speed", value) end

function Survivor:Accuracy() return self:GetUnmodified("accuracy") end
function Survivor:ModifiedAccuracy() return self:GetModified("accuracy") end
function Survivor:SetAccuracy(value) self:SetModified("accuracy", value) end

function Survivor:Strength() return self:GetUnmodified("strength") end
function Survivor:ModifiedStrength() return self:GetModified("strength") end
function Survivor:SetStrength(value) self:SetModified("strength", value) end

function Survivor:Evasion() return self:GetUnmodified("evasion") end
function Survivor:ModifiedEvasion() return self:GetModified("evasion") end
function Survivor:SetEvasion(value) self:SetModified("evasion", value) end

function Survivor:Luck() return self:GetUnmodified("luck") end
function Survivor:ModifiedLuck() return self:GetModified("luck") end
function Survivor:SetLuck(value) self:SetModified("luck", value) end

---------------------------------------------------------------------------------------------------

function Survivor:SetNum(stat, value, min, max)
    assert(Check.Num(value))
    if min != nil and value < min then
        value = min
    end
    if max != nil and value > max then
        value = max
    end
    log:Debugf("Setting %s to %s for %s", stat, value, self)
    self[stat] = value
    self:FireStatChangeEvent(stat, value)
end

function Survivor:Survival() return self.survival end
function Survivor:SetSurvival(value) self:SetNum("survival", value, 0) end

function Survivor:Insanity() return self.insanity end
function Survivor:SetInsanity(value) self:SetNum("insanity", value, 0) end

function Survivor:HuntXp() return self.huntXp end
function Survivor:SetHuntXp(value) self:SetNum("huntXp", value, 0, 16) end

function Survivor:Courage() return self.courage end
function Survivor:SetCourage(value) self:SetNum("courage", value, 0, 9) end

function Survivor:Understanding() return self.understanding end
function Survivor:SetUnderstanding(value) self:SetNum("understanding", value, 0, 9) end

function Survivor:WeaponProficiencyRank() return self.weaponProficiencyRank end
function Survivor:SetWeaponProficiencyRank(value) self:SetNum("weaponProficiencyRank", value, 0, 8) end

---------------------------------------------------------------------------------------------------

function Survivor:SetBool(stat, value)
    assert(Check.BoolOrNil(value))
    log:Debugf("Setting %s to %s for %s", stat, value and "true" or "false", self)
    self[stat] = value
    self:FireStatChangeEvent(stat, value)
end

function Survivor:Dead() return self.dead end
function Survivor:SetDead(value) self:SetBool("dead", value) end

function Survivor:Retired() return self.retired end
function Survivor:SetRetired(value) self:SetBool("retired", value) end

function Survivor:BrainInjury() return self.brainInjury end
function Survivor:SetBrainInjury(value) self:SetBool("brainInjury", value) end

function Survivor:Male() return self.male end
function Survivor:SetMale(value) self:SetBool("male", value) end

function Survivor:Female() return self.female end
function Survivor:SetFemale(value) self:SetBool("female", value) end

function Survivor:Reroll() return self.reroll end
function Survivor:SetReroll(value) self:SetBool("reroll", value) end

function Survivor:SkipNextHunt() return self.skipNextHunt end
function Survivor:SetSkipNextHunt(value) self:SetBool("skipNextHunt", value) end

---------------------------------------------------------------------------------------------------

function Survivor:Cards() return self.cards end
function Survivor:SetCards(cards)
    self.cards = cards
    EventManager.FireEvent(EventManager.ON_SURVIVOR_CARDS_CHANGE, self)
end

---------------------------------------------------------------------------------------------------

function Survivor:SetModifiers(modifiers)
    modifiers = modifiers or {}

    for _, stat in ipairs({ "movement", "speed", "accuracy", "strength", "evasion", "luck" }) do
        local oldValue = self:GetModified(stat)
        self.modifiers[stat] = modifiers[stat] or 0
        local newValue = self:GetModified(stat)
        log:Debugf("Changed modified %s from %d to %d for %s", stat, oldValue, newValue, self)
        if newValue != oldValue then
            EventManager.FireEvent(EventManager.ON_SURVIVOR_STAT_CHANGE, self, stat.."Modified", newValue)
        end
    end
end

---------------------------------------------------------------------------------------------------

return {
    Is = Survivor.Is,
    Init = Survivor.Init,
    Save = Survivor.Save,
    Import = Survivor.Import,
    Export = Survivor.Export,
    Create = Survivor.Create,
    Destroy = Survivor.Destroy,
    Survivors = function() return Survivor.survivors end,
    ForId = function(id) return Survivor.survivorsById[id] end,
    MoveBefore = Survivor.MoveBefore,
    MoveAfter = Survivor.MoveAfter,
}
