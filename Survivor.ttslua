require("Kdm/Check")
local Log = require("Kdm/Log").ForPackage("Survivor")
local Util = require("Kdm/Util")
local EventManager = require("Kdm/EventManager")

-------------------------------------------------------------------------------------------------

local SURVIVOR_CARD_TYPES = {
    "Abilities",
    "Fighting Arts",
    "Secret Fighting Arts",
    "Disorders",
    "Severe Injuries",
    "Weapon Proficiencies",
--    "Gear",
}
local SURVIVOR_CARD_TYPES_STR = table.concat(SURVIVOR_CARD_TYPES, ", ")

local SURVIVOR_CARD_TYPES_MAP = {}
for _, type in ipairs(SURVIVOR_CARD_TYPES) do
    SURVIVOR_CARD_TYPES_MAP[type] = true
end

local SURVIVOR_STAT_NAMES = {
    ["dead"] = "Dead",
    ["name"] = "Name",
    ["male"] = "Male",
    ["female"] = "Female",
    ["reroll"] = "Reroll",
    ["skipNextHunt"] = "SkipNextHunt",
    ["survival"] = "Survival",
    ["movement"] = "Movement",
    ["speed"] = "Speed",
    ["accuracy"] = "Accuracy",
    ["strength"] = "Strength",
    ["evasion"] = "Evasion",
    ["luck"] = "Luck",
    ["huntXp"] = "HuntXp",
    ["insanity"] = "Insanity",
    ["brainInjury"] = "BrainInjury",
    ["courage"] = "Courage",
    ["understanding"] = "Understanding",
    ["weaponProficiencyType"] = "WeaponProficiencyType",
    ["weaponProficiencyRank"] = "WeaponProficiencyRank",
    ["notes1"] = "Notes1",
    ["notes2"] = "Notes2",
    ["notes3"] = "Notes3",
    ["notes4"] = "Notes4",
}

local SURVIVOR_MAXES = {
    HuntXp = 16,
    Courage = 9,
    Understanding = 9,
    WeaponProficiencyRank = 8,
}

local SurvivorClass = {}
SurvivorClass.__index = SurvivorClass

---------------------------------------------------------------------------------------------------

local function Survivor_Create(saveState)
    saveState = saveState or {}
    Log.Debugf("Creating Survivor %d", saveState.id)

    local survivor = {
        tag = "Survivor",

        id = saveState.id,

        dead = saveState.dead,
        name = saveState.name,
        male = saveState.male,
        female = saveState.female,
        reroll = saveState.reroll,
        skipNextHunt = saveState.skipNextHunt,
        survival = saveState.survival or 0,
        movement = saveState.movement or 5,
        speed = saveState.speed or 0,
        accuracy = saveState.accuracy or 0,
        strength = saveState.strength or 0,
        evasion = saveState.evasion or 0,
        luck = saveState.luck or 0,
        huntXp = saveState.huntXp or 0,
        insanity = saveState.insanity or 0,
        brainInjury = saveState.brainInjury,
        courage = saveState.courage or 0,
        understanding = saveState.understanding or 0,
        weaponProficiencyType = saveState.weaponProficiencyType,
        weaponProficiencyRank = saveState.weaponProficiencyRank or 0,
        notes1 = saveState.notes1,
        notes2 = saveState.notes2,
        notes3 = saveState.notes3,
        notes4 = saveState.notes4,

        movementTemporary = 0,
        movementPermanent = 0,
        speedTemporary = 0,
        speedPermanent = 0,
        accuracyTemporary = 0,
        accuracyPermanent = 0,
        strengthTemporary = 0,
        strengthPermanent = 0,
        evasionTemporary = 0,
        evasionPermanent = 0,
        luckTemporary = 0,
        luckPermanent = 0,

        packedObjectPositions = saveState.packedObjectPositions or {},
    }
    setmetatable(survivor, SurvivorClass)

    survivor.cards = {}
    saveStateCards = saveState.cards or {}
    for _, type in ipairs(SURVIVOR_CARD_TYPES) do
        survivor.cards[type] = saveStateCards[type] or {}
    end

    return survivor
end

---------------------------------------------------------------------------------------------------

function SurvivorClass.Id(survivor) return survivor.id end

---------------------------------------------------------------------------------------------------

local function Survivor_FireStatChangeEvent(survivor, stat, value)
    local statName = SURVIVOR_STAT_NAMES[stat]
    Log.Debugf("firing event for stat %s/%s change", stat, statName)
    assert(Check(statName, "Unknown stat: %s", stat))
    EventManager.FireEvent("onSurvivorStatChange", survivor, statName, value)
end

---------------------------------------------------------------------------------------------------

local function Survivor_SetStr(survivor, stat, value)
    assert(CheckStr(value))
    Log.Debugf("Setting %s to %s for survivor %d", stat, value, survivor.id)
    survivor[stat] = value
    Survivor_FireStatChangeEvent(survivor, stat, value)
end

function SurvivorClass.Name(survivor) return survivor.name end
function SurvivorClass.NameOrUnnamed(survivor) return (survivor.name and survivor.name != "") and survivor.name or "Unnamed Survivor" end
function SurvivorClass.SetName(survivor, value) Survivor_SetStr(survivor, "name", value) end

function SurvivorClass.WeaponProficiencyType(survivor) return survivor.weaponProficiencyType end
function SurvivorClass.SetWeaponProficiencyType(survivor, value) Survivor_SetStr(survivor, "weaponProficiencyType", value) end

function SurvivorClass.Notes1(survivor) return survivor.notes1 end
function SurvivorClass.SetNotes1(survivor, value) Survivor_SetStr(survivor, "notes1", value) end

function SurvivorClass.Notes2(survivor) return survivor.notes2 end
function SurvivorClass.SetNotes2(survivor, value) Survivor_SetStr(survivor, "notes2", value) end

function SurvivorClass.Notes3(survivor) return survivor.notes3 end
function SurvivorClass.SetNotes3(survivor, value) Survivor_SetStr(survivor, "notes3", value) end

function SurvivorClass.Notes4(survivor) return survivor.notes4 end
function SurvivorClass.SetNotes4(survivor, value) Survivor_SetStr(survivor, "notes4", value) end

---------------------------------------------------------------------------------------------------

local function Survivor_SetNum(survivor, stat, value, min, max)
    assert(CheckNum(value))
    if min and value < min then
        value = min
    end
    if max and value > max then
        value = max
    end
    Log.Debugf("Setting %s to %s for survivor %d", stat, value, survivor.id)
    survivor[stat] = value
    Survivor_FireStatChangeEvent(survivor, stat, value)
end

function SurvivorClass.HuntXp(survivor) return survivor.huntXp end
function SurvivorClass.SetHuntXp(survivor, value) Survivor_SetNum(survivor, "huntXp", value, 0, 16) end

function SurvivorClass.Courage(survivor) return survivor.courage end
function SurvivorClass.SetCourage(survivor, value) Survivor_SetNum(survivor, "courage", value, 0, 9) end

function SurvivorClass.Understanding(survivor) return survivor.understanding end
function SurvivorClass.SetUnderstanding(survivor, value) Survivor_SetNum(survivor, "understanding", value, 0, 9) end

function SurvivorClass.WeaponProficiencyRank(survivor) return survivor.weaponProficiencyRank end
function SurvivorClass.SetWeaponProficiencyRank(survivor, value) Survivor_SetNum(survivor, "weaponProficiencyRank", value, 0, 8) end

function SurvivorClass.Survival(survivor) return survivor.survival end
function SurvivorClass.SetSurvival(survivor, value) Survivor_SetNum(survivor, "survival", value, 0) end

function SurvivorClass.Insanity(survivor) return survivor.insanity end
function SurvivorClass.SetInsanity(survivor, value) Survivor_SetNum(survivor, "insanity", value, 0) end

---------------------------------------------------------------------------------------------------

local function Survivor_GetModified(survivor, stat) return survivor[stat] + survivor[stat.."Temporary"] + survivor[stat.."Permanent"] end
local function Survivor_GetUnmodified(survivor, stat) return survivor[stat] end
local function Survivor_SetModified(survivor, stat, value)
    assert(CheckNum(value))
    Log.Debugf("Setting %s to %d for survivor %d", stat, value, survivor.id)
    survivor[stat] = value
    local modifiedValue = survivor[stat] + survivor[stat.."Temporary"] + survivor[stat.."Permanent"]
    Survivor_FireStatChangeEvent(survivor, stat, modifiedValue)
end

function SurvivorClass.UnmodifiedMovement(survivor) return Survivor_GetUnmodified(survivor, "movement") end
function SurvivorClass.Movement(survivor) return Survivor_GetModified(survivor, "movement") end
function SurvivorClass.SetMovement(survivor, value) Survivor_SetModified(survivor, "movement", value) end

function SurvivorClass.UnmodifiedSpeed(survivor) return Survivor_GetUnmodified(survivor, "speed") end
function SurvivorClass.Speed(survivor) return Survivor_GetModified(survivor, "speed") end
function SurvivorClass.SetSpeed(survivor, value) Survivor_SetModified(survivor, "speed", value) end

function SurvivorClass.UnmodifiedAccuracy(survivor) return Survivor_GetUnmodified(survivor, "accuracy") end
function SurvivorClass.Accuracy(survivor) return Survivor_GetModified(survivor, "accuracy") end
function SurvivorClass.SetAccuracy(survivor, value) Survivor_SetModified(survivor, "accuracy", value) end

function SurvivorClass.UnmodifiedStrength(survivor) return Survivor_GetUnmodified(survivor, "strength") end
function SurvivorClass.Strength(survivor) return Survivor_GetModified(survivor, "strength") end
function SurvivorClass.SetStrength(survivor, value) Survivor_SetModified(survivor, "strength", value) end

function SurvivorClass.UnmodifiedEvasion(survivor) return Survivor_GetUnmodified(survivor, "evasion") end
function SurvivorClass.Evasion(survivor) return Survivor_GetModified(survivor, "evasion") end
function SurvivorClass.SetEvasion(survivor, value) Survivor_SetModified(survivor, "evasion", value) end

function SurvivorClass.UnmodifiedLuck(survivor) return Survivor_GetUnmodified(survivor, "luck") end
function SurvivorClass.Luck(survivor) return Survivor_GetModified(survivor, "luck") end
function SurvivorClass.SetLuck(survivor, value) Survivor_SetModified(survivor, "luck", value) end

---------------------------------------------------------------------------------------------------

local function Survivor_SetBool(survivor, stat, value)
    assert(CheckBoolOrNil(value))
    Log.Debugf("Setting %s to %s for survivor %d", stat, value and "true" or "false", survivor.id)
    survivor[stat] = value
    Survivor_FireStatChangeEvent(survivor, stat, value)
end

function SurvivorClass.Dead(survivor) return survivor.dead end
function SurvivorClass.SetDead(survivor, value) Survivor_SetBool(survivor, "dead", value) end

function SurvivorClass.BrainInjury(survivor) return survivor.brainInjury end
function SurvivorClass.SetBrainInjury(survivor, value) Survivor_SetBool(survivor, "brainInjury", value) end

function SurvivorClass.Male(survivor) return survivor.male end
function SurvivorClass.SetMale(survivor, value) Survivor_SetBool(survivor, "male", value) end

function SurvivorClass.Female(survivor) return survivor.female end
function SurvivorClass.SetFemale(survivor, value) Survivor_SetBool(survivor, "female", value) end

function SurvivorClass.Reroll(survivor) return survivor.reroll end
function SurvivorClass.SetReroll(survivor, value) Survivor_SetBool(survivor, "reroll", value) end

function SurvivorClass.SkipNextHunt(survivor) return survivor.skipNextHunt end
function SurvivorClass.SetSkipNextHunt(survivor, value) Survivor_SetBool(survivor, "skipNextHunt", value) end

---------------------------------------------------------------------------------------------------

function SurvivorClass.SetCards(survivor, cards)
    for _, type in ipairs(SURVIVOR_CARD_TYPES) do
        survivor.cards[type] = cards[type] or {}
    end
    EventManager.FireEvent("onChangeSurvivorCards", survivor)
end

function SurvivorClass.Cards(survivor)
    return survivor.cards
end

function SurvivorClass.PackedObjectPositions(survivor)
    return survivor.packedObjectPositions
end

function SurvivorClass.SetPackedObjectPositions(survivor, packedObjectPositions)
    survivor.packedObjectPositions = packedObjectPositions
end

---------------------------------------------------------------------------------------------------

function SurvivorClass.SetTemporaryModifier(survivor, stat, value)
    assert(CheckStr(stat))
    assert(CheckNum(value))

    Log.Debugf("Setting temporary modifier %s to %d for survivor %d", stat, value, survivor.id)

    local oldValue = Survivor_GetModified(survivor, stat)
    survivor[stat.."Temporary"] = value
    local newValue = Survivor_GetModified(survivor, stat)
    if newValue != oldValue then
        Survivor_FireStatChangeEvent(survivor, stat, newValue)
    end
end

---------------------------------------------------------------------------------------------------

function SurvivorClass.SetPermanentModifier(survivor, stat, value)
    assert(CheckStr(stat))
    assert(CheckNum(value))

    Log.Debugf("Setting permanent modifier %s to %d for survivor %d", stat, value, survivor.id)

    local oldValue = Survivor_GetModified(survivor, stat)
    survivor[stat.."Permanent"] = value
    local newValue = Survivor_GetModified(survivor, stat)
    if newValue != oldValue then
        Survivor_FireStatChangeEvent(survivor, stat, newValue)
    end
end

-------------------------------------------------------------------------------------------------

function SurvivorClass.SetModifiers(survivor, temporary, permanent)
    assert(CheckTable(temporary))
    assert(CheckTable(permanent))

    for _, stat in ipairs({ "movement", "speed", "accuracy", "strength", "evasion", "luck" }) do
        local oldValue = Survivor_GetModified(survivor, stat)
        survivor[stat.."Temporary"] = temporary[stat] or 0
        survivor[stat.."Permanent"] = permanent[stat] or 0
        local newValue = Survivor_GetModified(survivor, stat)
        if newValue != oldValue then
            Survivor_FireStatChangeEvent(survivor, stat, newValue)
        end
    end
end

---------------------------------------------------------------------------------------------------

function SurvivorClass.HealAndReset(survivor)
    Log.Debugf("Healing and resetting survivor %s", survivor.id)
    for _, stat in ipairs({ "movement", "speed", "accuracy", "strength", "evasion", "luck" }) do
        survivor:SetTemporaryModifier(stat, 0)
    end
    survivor:SetBrainInjury(false)
end

---------------------------------------------------------------------------------------------------

function SurvivorClass.Save(survivor)
    local saveState = {
        id = survivor.id,
        dead = survivor.dead,
        name = survivor.name,
        male = survivor.male,
        female = survivor.female,
        skipNextHunt = survivor.skipNextHunt,
        reroll = survivor.reroll,
        survival = survivor.survival,
        movement = survivor.movement,
        speed = survivor.speed,
        accuracy = survivor.accuracy,
        strength = survivor.strength,
        evasion = survivor.evasion,
        luck = survivor.luck,
        huntXp = survivor.huntXp,
        insanity = survivor.insanity,
        brainInjury = survivor.brainInjury,
        courage = survivor.courage,
        understanding = survivor.understanding,
        weaponProficiencyType = survivor.weaponProficiencyType,
        weaponProficiencyRank = survivor.weaponProficiencyRank,
        notes1 = survivor.notes1,
        notes2 = survivor.notes2,
        notes3 = survivor.notes3,
        notes4 = survivor.notes4,
        packedObjectPositions = survivor.packedObjectPositions,
        cards = {},
    }
    for _, type in ipairs(SURVIVOR_CARD_TYPES) do
        saveState.cards[type] = survivor.cards[type]
    end

    return saveState
end

---------------------------------------------------------------------------------------------------

return {
    Create = Survivor_Create,
    CARD_TYPES = SURVIVOR_CARD_TYPES,
    CARD_TYPES_MAP = SURVIVOR_CARD_TYPES_MAP,
    CARD_TYPES_STR = SURVIVOR_CARD_TYPES_STR
}
