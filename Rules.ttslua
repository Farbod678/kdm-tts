require("Kdm/Check")
local Log = require("Kdm/Log").ForPackage("Rules")
local Util = require("Kdm/Util")
local CircularArray = require("Kdm/CircularArray")
local Trie = require("Kdm/Trie")
local Ui = require("Kdm/Ui")
local Location = require("Kdm/Location")

local Archive = nil

---------------------------------------------------------------------------------------------------

local Rules_trie = Trie()
local Rules_history = CircularArray(100)
local Rules_index = {}
local Rules_searchResultsPanel = nil
local Rules_searchInput = nil
local Rules_searchResultButtons = {}

---------------------------------------------------------------------------------------------------

local function Rules_RulebookAndState(name)
    local data = Rules_index[name]
    assert(Check(data, "Unknown rule: %s", name))
    return data.rulebook, data.state
end

---------------------------------------------------------------------------------------------------

local function Rules_Search(searchTerms)
    if searchTerms == nil or searchTerms == "" then
        return {}
    end

    -- only accept results that match all terms
    local matchIndex = {}
    local i = 1
    for term in string.gmatch(searchTerms, "%S+") do
        local termMatches = Rules_trie:Get(term)
        local termIndex = Util.Index(termMatches, "name")

        matchIndex = (i == 1) and termIndex or Util.Intersect(matchIndex, termIndex)
        i = i + 1
    end

    -- sort matches
    local sortedMatches = {}
    for _, m in pairs(matchIndex) do
        table.insert(sortedMatches, m)
    end
    table.sort(sortedMatches, function(x, y) return x.name < y.name end)

    return sortedMatches
end

---------------------------------------------------------------------------------------------------

local function Rules_SpawnRules(rules, state, dontRecordHistory)
    assert(CheckStr(rules))
    assert(CheckNum(state))
    assert(CheckBoolOrNil(dontRecordHistory))

    Log.Debugf("Spawning rules %s[%d]", rules, state)

    local location = Location.Get("Rules Board")
    local blocking = location:BoxClean({ types = { "Rulebook" } })
    if #blocking > 0 then
        Log.Broadcastf("Something is blocking the rules board. Please move the highlighted objects out of the way and try again.")
        Util.HighlightAll(blocking)
        return
    end

    Archive.Take({ name = rules, type = "Rulebook", location = location, spawnFunc = (state > 1) and function(obj) obj.setState(state) end or nil })
    Archive.CleanUpContainers()

    if not dontRecordHistory then
        Rules_history:Push({ rules, state })
    end

    Util.LookAt({ location = Location.Get("Rules Board"), pitch = 90 })
end

---------------------------------------------------------------------------------------------------

local function Rules_GetCurrentRules()
    return Location.Get("Rules Board"):FindFirst("Rulebook")
end

---------------------------------------------------------------------------------------------------

local function Rules_Back()
    local rules = Rules_GetCurrentRules()
    if not rules then
        return
    end

    if Rules_history:Size() <= 1 then
        Log.Debugf("<= 1 history element, can't go back")
        return
    end

    Rules_history:Pop()
    local last = Rules_history:Top()
    Log.Debugf("Going back to %s[%d]", last[1], last[2])
    Rules_SpawnRules(last[1], last[2], true)   -- dontRecordHistory
end

---------------------------------------------------------------------------------------------------

local function Rules_ChangePage(dir)
    local rules = Rules_GetCurrentRules()
    if not rules then
        return
    end

    local currentState = rules.getStateId()
    local nextState = currentState + dir
    Log.Debugf("Found current rules %s (%s) at state %d, looking for state %d", rules.getName(), rules.getGUID(), currentState, nextState)

    local rulebookName = (currentState == 1) and rules.getName() or nil
    local hasNext = false
     for _, state in ipairs(rules.getStates()) do
        if state.id == 1 then
            rulebookName = state.name
        end
        if state.id == nextState then
            Log.Debugf("Found next state %d: %s", state.id, state.name)
            hasNext = true
        end
    end

    if not hasNext then
        Log.Debugf("No state %d", nextState)
        return
    end

    assert(Check(rulebookName, "No rulebook name (page with state 1) in %s (%s)", rules.getName(), rules.getGUID()))

    Rules_history:Push({ rulebookName, nextState })
    rules.setState(nextState)
end

local function Rules_PreviousPage() Rules_ChangePage(-1) end
local function Rules_NextPage() Rules_ChangePage(1) end

---------------------------------------------------------------------------------------------------

local function Rules_SetSearchResults(results)
    if #results == 0 then
        Rules_searchResultsPanel:Hide()
        return
    end

    Rules_searchResultsPanel:Show()
    Rules_searchResultsPanel:SetHeight(10 + (#results * 30))

    for i = 1, Util.Min(5, #results) do
        local result = results[i]
        local button = Rules_searchResultButtons[i]
        button:Show()
        button:SetOnClick(function()
            Rules_searchInput:Set(nil)
            Rules_SetSearchResults({})
            Rules_SpawnRules(result.rulebook, result.state)
        end)
        button:SetText(result.name)
    end

    for i = #results + 1, 5 do
        local button = Rules_searchResultButtons[i]
        button:Hide()
        button:SetOnClick(nil)
        button:SetText(nil)
    end
end

---------------------------------------------------------------------------------------------------

local function Rules_RegisterExpansion(expansion)
    for rulebookIndex, rulebook in ipairs(expansion.rulebooks or {}) do
        local rulebookName = rulebook.name
        assert(CheckStr(rulebookName, "rulebook.name"))

        local pages = rulebook.pages
        assert(CheckTable(rulebook.pages))

        for pageName, pageData in pairs(pages) do
            assert(CheckStr(pageName, "rulebooks[%s].pages[pageName]", rulebookName))
            local state = pageData.state
            assert(CheckNum(state, "rulebooks[%s].pages[%s].state", rulebookName, pageName))

            assert(Check(Rules_index[pageName] == nil, "Rulebook page %s is already registered to %s", pageName, Rules_index[pageName]))
            Rules_index[pageName] = { rulebook = rulebookName, state = state }

            local keywords = pageData.keywords
            assert(CheckTable(keywords, "rulebooks[%s].pages[%s].keywords", rulebookName, pageName))

            local entry = {
                rulebook = rulebookName,
                name = pageName,
                state = state,
                timelineEvent = pageData.timelineEvent,
                showdown = pageData.showdown,
            }

            for keywordIndex, keyword in ipairs(keywords) do
                assert(CheckStr(keyword, "rulebooks[%s].pages[%s].keywords[%d]", rulebookName, pageName, keywordIndex))
                Rules_trie:Set(keyword, entry)
            end

            if pageData.huntEventStart then
                local huntEventStart = pageData.huntEventStart
                assert(CheckNum(huntEventStart, "rulebooks[%s].pages[%s].huntEventStart", rulebookName, pageName, keywordIndex))

                local huntEventEnd = pageData.huntEventEnd
                assert(CheckNum(huntEventEnd, "rulebooks[%s].pages[%s].huntEventEnd", rulebookName, pageName, keywordIndex))

                for huntEventNumber = huntEventStart, huntEventEnd do
                    Rules_trie:Set(tostring(huntEventNumber), entry)
                end
            end
        end
    end
end

---------------------------------------------------------------------------------------------------

local function Rules_Init(modules, saveState, expansions, ui)
    Archive = modules.Archive
    assert(Archive)

    for _, expansion in ipairs(expansions) do
        Rules_RegisterExpansion(expansion)
    end

    local rules = Rules_GetCurrentRules()
    if rules != nil then
        local currentState = rules.getStateId()
        local rulebookName = nil
        if currentState == 1 then
            rulebookName = rules.getName()
        else
            for _, state in ipairs(rules.getStates()) do
                if state.id == 1 then
                    rulebookName = state.name
                end
            end
        end
        assert(Check(rulebookName, "No rules page with state 1 in %s (%s)", rules.getName(), rules.getGUID()))
        Rules_history:Push({ rulebookName, currentState})
    end

    local xStart = 80+110
    local yStart = -10
    Rules_searchInput = Ui.Input(ui, { id = "Rules_Search", rectAlignment = "UpperLeft", x = xStart, y = yStart, width = 250, placeholder = "search rules/events...", textColor = "#000000", textOffset = "5 5 0 0", onValueChanged = function(value)
        Rules_SetSearchResults(Rules_Search(value))
    end })
    Ui.Button(ui, { id = "Rules_CancelSearch", rectAlignment = "UpperLeft", x = xStart+250+5, y = yStart, width = 30, height = 30, text = "X", textAlignment = "MiddleCenter", fontSize = 20, onClick = function()
        Rules_SetSearchResults({})
        Rules_searchInput:Set(nil)
    end })
    Rules_searchResultsPanel = Ui.Panel(ui, { id = "Rules_SearchResults", rectAlignment = "UpperLeft", x = xStart, y = yStart - 40, width = 300, height = 160, color = "#00000088", active = false })

    Rules_searchResultButtons = {}
    for i = 1, 5 do
        Rules_searchResultButtons[i] = Ui.Button(Rules_searchResultsPanel, { id = "Result"..i, rectAlignment = "UpperLeft", x = 5, y = -5 + (i - 1) * -30, width = 290, height = 30, fontSize = 16, colors = Ui.INVISIBLE_COLORS, textColor = "#dddddd" })
    end
end

---------------------------------------------------------------------------------------------------

return {
    Init = Rules_Init,
    RulebookAndState = Rules_RulebookAndState,
    Search = Rules_Search,
    SpawnRules = Rules_SpawnRules,
    Back = Rules_Back,
    PreviousPage = Rules_PreviousPage,
    NextPage = Rules_NextPage,
}
