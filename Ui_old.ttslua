local Check = require("Kdm/Util/Check")
local log = require("Kdm/Log").ForModule("Ui")
local Util = require("Kdm/Util/Util")

local UI_DARK_BROWN = "#453824"
--local UI_MID_BROWN = "#7f7059"
local UI_MID_BROWN = "#71624c"
-- local UI_LIGHT_BROWN = "#bbb4a1"
local UI_LIGHT_BROWN = "#d3cdc3"


local UI_DARK_BROWN_COLORS = "#453824|#2f2410|#2f2410|#ffffff"
local UI_MID_BROWN_COLORS = "#7f7059|#655741|#655741|#ffffff"

local UI_INVISIBLE_COLORS = "#00000000|#00000088|#00000088|#00000000"
local UI_IMAGE_COLORS = "#ffffff|#dddddd|#dddddd|#ffffff"

-- local UI_INVISIBLE_COLORS = "#ff008888|#ff008888|#ff008888|#ff008888"
-- local UI_IMAGE_COLORS = "#ff008888|#ff008888|#ff008888|#ff008888"

local UI_LEFT_MOUSE_BUTTON = "-1"

---------------------------------------------------------------------------------------------------

local Ui_CheckButtonClass = {
    Set = function(checkButton, value)
        if value then
            checkButton.object.UI.setAttributes(checkButton.id, {
                colors = checkButton.selectedColors,
                textColor = checkButton.textColor,
            })
        else
            checkButton.object.UI.setAttributes(checkButton.id, {
                colors = checkButton.unselectedColors,
                textColor = checkButton.textColor,
            })
        end
    end,
}
Ui_CheckButtonClass.__index = Ui_CheckButtonClass
setmetatable(Ui_CheckButtonClass, { __index = Ui_BaseClass })


local function Ui_CheckButton(parent, params)
    assert(Check.Str(params.id))
    assert(Check.Func(params.onClick))

    local id = parent.id.."_"..params.id.."CheckButton"

    log:Debugf("Creating CheckButton %s", id)

    local checkButton = {
        id = id,
        object = params.object or self,
        selectedColors = params.selectedColors or UI_DARK_BROWN_COLORS,
        unselectedColors = params.unselectedColors or UI_MID_BROWN_COLORS,
        textColor = params.textColor or UI_LIGHT_BROWN,
        onClick = params.onClick,
    }
    setmetatable(checkButton, Ui_CheckButtonClass)

    local onClick = id.."_OnClick"
    checkButton.object.SetVar(onClick, function(_, _, id)
        checkButton.onClick()
    end)

    table.insert(parent.children, {
        tag = "Button",
        attributes = {
            id = id,
            rectAlignment = params.rectAlignment or "LowerLeft",
            offsetXY = params.x.." "..params.y,
            width = params.width,
            height = params.height,
            text = params.text,
            colors = params.checked and checkButton.selectedColors or checkButton.unselectedColors,
            textColor = checkButton.textColor,
            fontSize = params.fontSize,
            textAlignment = "MiddleCenter",
            onClick = onClick,
        },
    })

    return checkButton
end

---------------------------------------------------------------------------------------------------

local Ui_OptionButtonGroupClass = {
    Set = function(group, option)
        local selectedId = option and option.id or nil
        for _, option in ipairs(group.options) do
            if option.id != selectedId then
                group.object.UI.setAttributes(option.id, {
                    colors = group.unselectedColors,
                    textColor = group.textColor,
                })
            else
                group.object.UI.setAttributes(option.id, {
                    colors = group.selectedColors,
                    textColor = group.textColor,
                })
            end
        end
    end,
}
Ui_OptionButtonGroupClass.__index = Ui_OptionButtonGroupClass

local function Ui_OptionButtonGroup(parent, params)
    assert(Check.Str(params.id))
    assert(Check.Func(params.onClick))

    local id = parent.id.."_"..params.id.."OptionButtons"

    log:Debugf("Creating OptionButtonGroup %s", id)

    local group = {
        parent = parent,
        id = id,
        object = params.object or self,
        options = {},
        selectedColors = params.selectedColors or UI_DARK_BROWN_COLORS,
        unselectedColors = params.unselectedColors or UI_MID_BROWN_COLORS,
        textColor = params.textColor or UI_LIGHT_BROWN,
        textAlignment = params.textAlignment or "MiddleCenter",
        fontSize = params.fontSize or 16,
        onClick = params.onClick,
    }
    setmetatable(group, Ui_OptionButtonGroupClass)

    return group
end

local Ui_OptionButtonClass = {
    Value = function(optionButton)
        return optionButton.value
    end,
    SetValue = function(optionButton, value)
        optionButton.value = value
    end,
    SetText = function(optionButton, text)
        text = text or ""
        log:Debugf("Setting %s text to %s", optionButton.id, text)
        optionButton.object.UI.setAttributes(optionButton.id, {
            text = text,
            textColor = optionButton.group.textColor,
        })
    end,
}
Ui_OptionButtonClass.__index = Ui_OptionButtonClass
setmetatable(Ui_OptionButtonClass, { __index = Ui_BaseClass })

local function Ui_OptionButton(group, params)
    local id = group.id.."_"..(#group.options + 1)

    log:Debugf("Creating OptionButton %s", id)

    local optionButton = {
        id = id,
        object = group.object,
        group = group,
        value = params.value,
    }
    setmetatable(optionButton, Ui_OptionButtonClass)

    table.insert(group.options, optionButton)

    local onClick = id.."_OnClick"
    group.object.SetVar(onClick, function()
        group.onClick(optionButton)
    end)
    table.insert(group.parent.children, {
        tag = "Button",
        attributes = {
            id = id,
            rectAlignment = params.rectAlignment or "LowerLeft",
            offsetXY = params.x.." "..params.y,
            width = params.width,
            height = params.height,
            text = params.text,
            colors = params.selected and group.selectedColors or group.unselectedColors,
            textColor = group.textColor,
            fontSize = group.fontSize,
            textAlignment = group.textAlignment,
            onClick = onClick,
            active = params.active == nil or params.active,
        },
    })

    return optionButton
end

---------------------------------------------------------------------------------------------------

local Ui_OptionBoxGroupClass = {
    Set = function(group, option)
        local selectedId = option and option.id or nil
        for _, option in ipairs(group.options) do
            if option.id != selectedId then
                group.object.UI.setAttribute(option.id, "image", "CheckBoxEmpty")
            else
                group.object.UI.setAttribute(option.id, "image", "CheckBoxFilled")
            end
        end
    end,
}
Ui_OptionBoxGroupClass.__index = Ui_OptionBoxGroupClass

local function Ui_OptionBoxGroup(parent, params)
    assert(Check.Str(params.id))
    assert(Check.Func(params.onClick))

    local id = parent.id.."_"..params.id.."OptionBoxes"

    log:Debugf("Creating OptionBoxGroup %s", id)

    local group = {
        parent = parent,
        id = id,
        object = params.object or self,
        options = {},
        onClick = params.onClick,
    }
    setmetatable(group, Ui_OptionBoxGroupClass)

    return group
end

local Ui_OptionBoxClass = {
    Value = function(optionButton)
        return optionButton.value
    end,
    SetValue = function(optionButton, value)
        optionButton.value = value
    end,
}
Ui_OptionBoxClass.__index = Ui_OptionBoxClass
setmetatable(Ui_OptionBoxClass, { __index = Ui_BaseClass })

local function Ui_OptionBox(group, params)
    local id = group.id.."_"..(#group.options + 1)

    log:Debugf("Creating OptionBox %s", id)

    local optionBox = {
        id = id,
        object = group.object,
        group = group,
        value = params.value,
    }
    setmetatable(optionBox, Ui_OptionBoxClass)
    table.insert(group.options, optionBox)

    local onClick = id.."_OnClick"
    group.object.SetVar(onClick, function()
        group.onClick(optionBox)
    end)

    table.insert(group.parent.children, {
        tag = "Button",
        attributes = {
            id = id,
            rectAlignment = params.rectAlignment or "LowerLeft",
            offsetXY = params.x.." "..params.y,
            width = params.width or 30,
            height = params.height or 30,
            colors = UI_IMAGE_COLORS,
            image = params.checked and "CheckBoxFilled" or "CheckBoxEmpty",
            onClick = onClick,
        },
    })

    return optionBox
end

---------------------------------------------------------------------------------------------------

local function Ui_VerticalScroll(parent, params)
    -- hack/pass-through to make the ID concatenation work
    local verticalScroll = {
        id = parent.id,
        children = {},
    }

    table.insert(parent.children, {
        tag = "VerticalScrollView",
        attributes = {
            rectAlignment = "LowerLeft",
            offsetXY = params.x.." "..params.y,
            width = params.width,
            height = params.height,
            color = "#00000000",
        },
        children = verticalScroll.children,
    })

    return verticalScroll
end

---------------------------------------------------------------------------------------------------
