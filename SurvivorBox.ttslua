local Check = require("Kdm/Util/Check")
local EventManager = require("Kdm/Util/EventManager")
local log = require("Kdm/Log").ForModule("SurvivorBox")
local Survivor = require("Kdm/Survivor")
local Ui = require("Kdm/Ui")
local Util = require("Kdm/Util/Util")

---------------------------------------------------------------------------------------------------

local SurvivorBox = {}
SurvivorBox.__index = SurvivorBox
function SurvivorBox.Is(x) return getmetatable(x) == SurvivorBox end

SurvivorBox.ALLOWED_CARD_TYPES = {
    ["Secret Fighting Arts"] = true,
    ["Fighting Arts"] = true,
    ["Disorders"] = true,
    ["Abilities"] = true,
    ["Severe Injuries"] = true,
}

-------------------------------------------------------------------------------------------------

function SurvivorBox.Init(saveState)
    SurvivorBox.InitSaveState(saveState)

    EventManager.AddHandler("onObjectDestroy", function(object)
        local survivorBox = SurvivorBox.survivorBoxesByObject[object]
        if survivorBox then
            log:Debugf("%s was destroyed", survivorBox)
            SurvivorBox.survivorBoxesBySurvivor[survivorBox:Survivor()] = nil
            SurvivorBox.survivorBoxesByObject[object] = nil
        end
    end)

    EventManager.AddHandler("onObjectEnterContainer", function(container, object)
        local survivorBox = SurvivorBox.survivorBoxesByObject[container]
        if survivorBox then
            survivorBox:UpdateCards()
        end
    end)

    EventManager.AddHandler("onObjectLeaveContainer", function(container, object)
        local survivorBox = SurvivorBox.survivorBoxesByObject[container]
        if survivorBox then
            survivorBox:UpdateCards()
        end
    end)

    EventManager.AddHandler("tryObjectEnterContainer", function(container, object, previousReturnValue)
        if previousReturnValue == false then
            return false
        end

        if SurvivorBox.survivorBoxesByObject[object]  then
            log:Printf("Survivor boxes cannot be put into containers.")
            return false
        end

        if SurvivorBox.survivorBoxesByObject[container] and not SurvivorBox.ALLOWED_CARD_TYPES[object.getGMNotes()] then
            log:Printf("Only Fighting Arts, Disorders, Abilities, and Impairments can go into survivor boxes.")
            return false
        end

        return true
    end)

    EventManager.AddHandler(EventManager.ON_SURVIVOR_STAT_CHANGE, function(survivor, stat, value)
        if stat == "name" then
            local survivorBox = SurvivorBox.survivorBoxesBySurvivor[survivor]
            if survivorBox then
                survivorBox:SetName(value)
            end
        end
    end)
end

---------------------------------------------------------------------------------------------------

function SurvivorBox.InitSaveState(saveState)
    SurvivorBox.survivorBoxesBySurvivor = {}
    SurvivorBox.survivorBoxesByObject = {}

    for _, survivorBoxSaveState in ipairs(saveState) do
        local survivor = Survivor.ForId(survivorBoxSaveState.survivorId)
        if not survivor then
            return log:Errorf("Survivor box %s was saved with non-existant survivor %d", survivorBoxSaveState.objectGuid, survivorBoxSaveState.survivorId)
        end

        local object = getObjectFromGUID(survivorBoxSaveState.objectGuid)
        if not object then
            return log:Errorf("Survivor %s had saved survivor box GUID %s, but that object doesn't exist. Try re-creating this survivor's sheet from the Survivor Board.", survivor:NameOrUnnamed(), survivorBoxSaveState.objectGuid)
        end

        local survivorBox = SurvivorBox.Create(survivor, object)
    end
end

---------------------------------------------------------------------------------------------------

function SurvivorBox.Save()
    local saveState = {}
    for _, survivorBox in pairs(SurvivorBox.survivorBoxesByObject) do
        table.insert(saveState, {
            survivorId = survivorBox.survivor:Id(),
            objectGuid = survivorBox.object.getGUID(),
        })
    end
    return saveState
end

---------------------------------------------------------------------------------------------------

function SurvivorBox.Import(saveState)
    for object, _ in pairs(SurvivorBox.survivorBoxesByObject) do
        object.destruct()
    end

    SurvivorBox.InitSaveState(saveState)
end

---------------------------------------------------------------------------------------------------

function SurvivorBox.ForSurvivor(survivor)
    return SurvivorBox.survivorBoxesBySurvivor[survivor]
end

---------------------------------------------------------------------------------------------------

function SurvivorBox.ForObject(object)
    return SurvivorBox.survivorBoxesByObject[object]
end

---------------------------------------------------------------------------------------------------

function SurvivorBox.Create(survivor, object)
    assert(Survivor.Is(survivor))
    assert(Check.Object(object))

    log:Debugf("Creating SurvivorBox for %s", survivor)

    local survivorBox = {
        tag = "Survivor Box",
        survivor = survivor,
        object = object,
    }
    setmetatable(survivorBox, SurvivorBox)

    survivorBox.object.setName(survivor:NameOrUnnamed())

    survivorBox.ui = Ui.Create3d("survivorBox"..object.getGUID(), object, 0.22)
    survivorBox.nameText = survivorBox.ui:Text({ id = "Name", topLeft = { x = 0.946971, y = -0.948742 }, bottomRight = { x = -0.946971, y = -0.52 }, text = Util.TruncateString(survivor:NameOrUnnamed(), 20), fontSize = 180, alignment = "MiddleCenter" })
    survivorBox.ui:Apply()

    SurvivorBox.survivorBoxesBySurvivor[survivor] = survivorBox
    SurvivorBox.survivorBoxesByObject[object] = survivorBox

    return survivorBox
end

---------------------------------------------------------------------------------------------------

function SurvivorBox:__tostring()
    return Util.SafeFormat("SurvivorBox{survivor=%s,object=%s}", self.survivor:NameOrUnnamed(), self.object.getGUID())
end

---------------------------------------------------------------------------------------------------

function SurvivorBox:Survivor()
    return self.survivor
end

---------------------------------------------------------------------------------------------------

function SurvivorBox:Object()
    return self.object
end

---------------------------------------------------------------------------------------------------

function SurvivorBox:SetName(name)
    self.object.setName(name)
    self.nameText:SetText(Util.TruncateString(name, 20))
end

---------------------------------------------------------------------------------------------------

function SurvivorBox:UpdateCards()
    local cards = {}
    for _, objectInBox in ipairs(self.object.getObjects()) do
        if SurvivorBox.ALLOWED_CARD_TYPES[objectInBox.gm_notes] then
            table.insert(cards, { name = objectInBox.name, type = objectInBox.gm_notes })
        end
    end
    log:Debugf("Updated %s cards: %s", self, cards)
    self.survivor:SetCards(cards)
end

---------------------------------------------------------------------------------------------------

return {
    Is = SurvivorBox.Is,
    Init = SurvivorBox.Init,
    Import = SurvivorBox.Import,
    Export = SurvivorBox.Export,
    Save = SurvivorBox.Save,
    Create = SurvivorBox.Create,
    ForSurvivor = SurvivorBox.ForSurvivor,
    ForObject = SurvivorBox.ForObject,
}
