local Util = require("Kdm/Util/Util")
local Assert = require("Kdm/Util/Assert")
local Log = require("Kdm/Util/Log").ForPackage("Settlement")
local Trie = require("Kdm/Util/Trie")
local Rules = require("Kdm/Rules")
local Ui = require("Kdm/XmlUi")
local Showdown = require("Kdm/Showdown")
local EventManager = require("Kdm/Util/EventManager")

-------------------------------------------------------------------------------------------------

local SETTLEMENT_MAX_TIMELINE_YEARS = 30
local RIGHT_MOUSE_BUTTON = "-2"

local Settlement = {
    trie = Trie.Create(),

    survivalLimit = 1,
    timeline = {},
    quarries = {},
    panelOpen = false,
    addTimelineEvent = {
        panel = nil,
        open = false,
        results = {},
        customName = nil,
        year = nil,
        event = nil,
        type = "TimelineEvent",
    },
}

for i = 1, SETTLEMENT_MAX_TIMELINE_YEARS do
    Settlement.timeline[i] = {
        events = {}
    }
end

---------------------------------------------------------------------------------------------------

local defaultEvents = {
    {
        keywords = { "Nemesis", "Encounter" },
        event = {
            name = "Nemesis Encounter",
            type = "Showdown",
        },
    },
    {
        keywords = { "Nemesis", "Encounter", "Lvl", "1" },
        event = {
            name = "Nemesis Encounter - Lvl 1",
            type = "Showdown",
        },
    },
    {
        keywords = { "Nemesis", "Encounter", "Lvl", "2" },
        event = {
            name = "Nemesis Encounter - Lvl 2",
            type = "Showdown",
        },
    },
    {
        keywords = { "Nemesis", "Encounter", "Lvl", "3" },
        event = {
            name = "Nemesis Encounter - Lvl 3",
            type = "Showdown",
        },
    },
}
for _, event in ipairs(defaultEvents) do
    for _, keyword in ipairs(event.keywords) do
        Trie.Set(Settlement.trie, keyword, event.event)
    end
end

---------------------------------------------------------------------------------------------------

function Settlement.RegisterExpansion(expansion)
    for _, rulebook in ipairs(expansion.rulebooks or {}) do
        for name, data in ipairs(rulebook) do
            if data.timelineEvent then
                local event = {
                    name = name,
                    type = "TimelineEvent",
                    expansion = expansion.name,
                    rulebook = rulebook,
                    state = state,
                }
                for _, keyword in ipairs(data.keywords) do
                    Trie.Set(Settlement.trie, keyword, event)
                end
            end
        end
    end

    for _, nemesis in ipairs(expansion.nemeses or {}) do
        local nameKeywords = Util.Split(nemesis.name, " ")
        local keywords = Util.ConcatArrays({ "Nemesis", "Encounter", tostring(level) }, nameKeywords)
        for _, keyword in ipairs(keywords) do
            Trie.Set(Settlement.trie, keyword, {
                name = "Nemesis Encounter - "..nemesis.name,
                type = "Showdown",
                expansion = expansion.nam,
                monster = nemesis.name,
            })
        end
        if nemesis.levels > 1 then
            for level = 1, nemesis.levels do
                local keywords = Util.ConcatArrays({ "Nemesis", "Encounter", "Lvl", tostring(level) }, nameKeywords)
                for _, keyword in ipairs(keywords) do
                    Trie.Set(Settlement.trie, keyword, {
                        name = "Nemesis Encounter - "..nemesis.name.." Lvl "..level,
                        type = "Showdown",
                        expansion = expansion.name,
                        monster = nemesis.name,
                        level = "Level "..level,
                    })
                end
            end
        end
    end

    for _, settlementEvent in ipairs(expansion.settlementEvents or {}) do
        for _, keyword in ipairs(Util.Split(settlementEvent, " ")) do
            Trie.Set(Settlement.trie, keyword, {
                name = settlementEvent,
                type = "SettlementEvent",
                expansion = expansion.name,
            })
        end
    end
end

---------------------------------------------------------------------------------------------------

function Settlement.AddTimelineEvent(year, event, eventData)
    -- choose first free event
    if event == nil then
        for i = 1, 5 do
            if not Settlement.timeline[year].events[i] then
                event = i
                break
            end
        end
        if event == nil then
            Log.Errorf("No space on timeline year %d for %s! Please make a note on the settlement sheet.", name)
            return
        end
    end

    local name, type = eventData.name, eventData.type
    Log.Debugf("Adding event to timeline year %d, event %d: %s", type, year, eventData)

    local image = Settlement.EVENT_TYPE_IMAGES[type]
    Assert(image, "Unknown event type %s", type)

    Settlement.timeline[year].eventButtons[event]:SetImage(image)

    local text = Settlement.timeline[year].eventTexts[event]
    text:Show()
    text:SetText(name)

    Settlement.timeline[year].events[event] = eventData
end

---------------------------------------------------------------------------------------------------

function Settlement.RemoveTimelineEvent(year, event)
    Log.Debugf("Removing timeline year %d, event %d", year, event)

    Settlement.timeline[year].eventButtons[event]:SetImage(nil)

    local text = Settlement.timeline[year].eventTexts[event]
    text:Hide()
    text:SetText(nil)

    Settlement.timeline[year].events[event] = nil
end

---------------------------------------------------------------------------------------------------

function Settlement.Reset()
    Settlement.nameInput:SetText()

    Settlement.survivalLimit = 1,
    Settlement.survivalLimitText:SetText("1")

    Settlement.departingBonuses = nil
    Settlement.departingBonusesInput:SetText()

    Settlement.arrivalBonuses = nil
    Settlement.arrivalBonusesInput:SetText()

    Settlement.firstBirthMilestone = nil
    Settlement.firstBirthMilestoneCheckBox:Check(false)
    Settlement.firstDeathMilestone = nil
    Settlement.firstDeathMilestoneCheckBox:Check(false)
    Settlement.fifteenPopulationMilestone = nil
    Settlement.fifteenPopulationMilestoneCheckBox:Check(false)
    Settlement.fiveInnovationshMilestone = nil
    Settlement.fiveInnovationshMilestoneCheckBox:Check(false)

    Settlement.quarries = {}
    for i = 1, 10 do
        Settlement.quarryInputs[i]:SetText()
    end

    Settlement.notes = nil
    Settlement.notesInput:SetText()

    for year, yearData in pairs(Settlement.timeline) do
        yearData.checked = nil
        yearData.yearCheckBox:Check(false)
        for event, eventData in pairs(yearData.events) do
            Settlement.RemoveTimelineEvent(year, event)
        end
        yearData.events = {}
    end
end

---------------------------------------------------------------------------------------------------

function Settlement.ShowUi()
    Log.Debugf("Showing settlement panel")
    Settlement.panel:Show()
    Settlement.panelOpen = true
end

function Settlement.HideUi()
    Log.Debugf("Hiding settlement panel")
    Settlement.panel:Hide()
    Settlement.panelOpen = false
end

---------------------------------------------------------------------------------------------------

function Settlement.OpenTimelineEventPanel(year, event)
    if Settlement.addTimelineEvent.open then
        Log.Debugf("AddTimelineEventPanel already open")
        return
    end

    Log.Debugf("Opening AddTimelineEventPanel for year %d, event %d", year, event)
    Settlement.addTimelineEvent.panel:Show()
    Settlement.addTimelineEvent.open = true
    Settlement.addTimelineEvent.year = year
    Settlement.addTimelineEvent.event = event
end

function Settlement.CloseAddTimelineEventPanel()
    Log.Debugf("Closing AddTimelineEventPanel")
    Settlement.addTimelineEvent.panel:Hide()
    Settlement.addTimelineEvent.open = nil
    Settlement.addTimelineEvent.year = nil
    Settlement.addTimelineEvent.event = nil

    Settlement.addTimelineEvent.searchInput:SetText(nil)
    Settlement.SetEventSearchResults({})

    Settlement.addTimelineEvent.customName = nil
    Settlement.addTimelineEvent.customNameText:SetText(nil)

    Settlement.addTimelineEvent.type = "TimelineEvent"
    Settlement.addTimelineEvent.typeOptions:Select(Settlement.addTimelineEvent.timelineEventOption)
end

---------------------------------------------------------------------------------------------------

Settlement.eventTypeHandlers = {
    ["TimelineEvent"] = function(eventData)
        if not eventData.custom then
            Settlement.HideUi()
            Rules.SpawnRules(eventData.rulebook, eventData.state)
        else
            Log.Debugf("Custom timeline event button, no effect")
        end
    end,
    ["Showdown"] = function(eventData)
        Settlement.HideUi()
        Showdown.ShowUi()
        if eventData.monster then
            Showdown.SelectMonster(eventData.monster)
            if eventData.level then
                Showdown.SelectLevel(eventData.level)
            end
        end
    end,
    ["SettlementEvent"] = function(eventData)
        if not eventData.custom then
            Archive.Take({ name = eventData.name, type = "Settlement Events", location = "Drawn Settlement Event" })
        else
            Log.Debugf("Custom settlement event, no effect")
        end
    end
}

function Settlement.EventButtonOnClick(year, event, mouseButton)
    Log.Debugf("Year %d, event %d button clicked %d", year, event, mouseButton)

    local eventData = Settlement.timeline[year].events[event]
    if not eventData then
        Settlement.OpenTimelineEventPanel(year, event)
        return
    end

    if mouseButton == RIGHT_MOUSE_BUTTON then
        Log.Debugf("RMB clicked, removing year %d, event %d", year, event)
        Settlement.RemoveTimelineEvent(year, event)
        return
    end

    local handler = Settlement.eventTypeHandlers[eventData.type]
    Assert(handler, "Unknown event: %s", eventData)

    Log.Debugf("Even button clicked for year %d, event# %d", year, event)
    handler(eventData)
end

function Settlement.SetEventSearchResults(results)
    Settlement.addTimelineEvent.results = results

    for i = 1, Util.Min(5, #results) do
        local result = results[i]
        Log.Debugf("Setting result %d to %s", i, result)
        local button = Settlement.addTimelineEvent.resultButtons[i]
        button:Show()
        local typeStrings = {
            ["TimelineEvent"] = "[E]",
            ["Showdown"] = "[X]",
            ["SettlementEvent"] = "[S]",
        }
        button:SetText(typeStrings[result.type]..result.name)
    end

    for i = #results + 1, 5 do
        local button = Settlement.addTimelineEvent.resultButtons[i]
        button:Hide()
        button:SetText(nil)
    end
end

---------------------------------------------------------------------------------------------------

function Settlement.Save()
    local saveData = {
        name = Settlement.name,
        survivalLimit = Settlement.survivalLimit,
        departingBonuses = Settlement.departingBonuses,
        arrivalBonuses = Settlement.arrivalBonuses,
        quarries = Settlement.quarries,
        firstBirthMilestone = Settlement.firstBirthMilestone,
        firstDeathMilestone = Settlement.firstDeathMilestone,
        fifteenPopulationMilestone = Settlement.fifteenPopulationMilestone,
        fiveInnovationsMilestone = Settlement.fiveInnovationsMilestone,
        notes = Settlement.notes,
    }

    saveData.timeline = {}
    for year, yearData in pairs(Settlement.timeline) do
        saveData.timeline[year] = { checked = yearData.checked, events = {} }
        for event, eventData in pairs(yearData.events) do
            saveData.timeline[year].events[event] = eventData
        end
    end

    return saveData
end

---------------------------------------------------------------------------------------------------

Settlement.EVENT_TYPE_IMAGES = {
    ["TimelineEvent"] = "TimelineEventButton",
    ["Showdown"] = "TimelineShowdownButton",
    ["SettlementEvent"] = "TimelineSettlementEventButton",
}

function Settlement.Init(saveState, ui)
    saveState = saveState or {}

    Settlement.name = saveState.name
    Settlement.survivalLimit = saveState.survivalLimit or Settlement.survivalLimit
    Settlement.departingBonuses = saveState.departingBonuses
    Settlement.arrivalBonuses = saveState.arrivalBonuses
    if saveState.timeline then
        for year = 1, SETTLEMENT_MAX_TIMELINE_YEARS do
            if saveState.timeline[year] then
                Settlement.timeline[year].checked = saveState.timeline[year].checked
                Settlement.timeline[year].events = saveState.timeline[year].events or {}
            end
        end
    end
    Settlement.quarries = saveState.quarries or {}
    Settlement.firstBirthMilestone = saveState.firstBirthMilestone
    Settlement.firstDeathMilestone = saveState.firstDeathMilestone
    Settlement.fifteenPopulationMilestone = saveState.fifteenPopulationMilestone
    Settlement.fiveInnovationsMilestone = saveState.fiveInnovationsMilestone
    Settlement.notes = saveState.notes

    EventManager.AddHandler("onExpansionsChanged", function(enabledExpansions)
        Settlement.enabledExpansions = enabledExpansions
    end)

    Ui.ImageButton(ui, { id = "Settlement", rectAlignment = "UpperLeft", x = 80, y = -50, width = 100, height = 30, image = "SettlementButton", onClick = function()
        if Settlement.panelOpen then
            Settlement.HideUi()
        else
            Settlement.ShowUi()
        end
    end })

    local panel = Ui.Panel(ui, { id = "Settlement", width = 1600, height = 900, active = false })
    Settlement.panel = panel
    Ui.Image(panel, { image = "Settlement", width = 1600, height = 900 })

    Settlement.nameInput = Ui.DarkInput(panel, { id = "Name", x = 198, y = 851, width = 520, height = 35, text = Settlement.name, fontSize = 24, onValueChanged = function(value)
        Log.Debugf("Setting settlement name to %s", value)
        Settlement.name = value
    end })

    Settlement.survivalLimitText = Ui.DarkText(panel, { id = "SurvivalLimit", x = 902, y = 830, width = 50, height = 50, text = Settlement.survivalLimit, alignment = "MiddleCenter", fontSize = 36 })
    Ui.InvisibleButton(panel, { id = "SurvivalLimitPlus", x = 952, y = 855,  width = 25, height = 25, onClick = function()
        Settlement.survivalLimit = Settlement.survivalLimit + 1
        Log.Debugf("Setting survival limit to %d", Settlement.survivalLimit)
        Settlement.survivalLimitText:SetText(Settlement.survivalLimit)
    end })
    Ui.InvisibleButton(panel, { id = "SurvivalLimitMinus", x = 952, y = 830,  width = 25, height = 25, onClick = function()
        Settlement.survivalLimit = Settlement.survivalLimit + 1
        Log.Debugf("Setting survival limit to %d", Settlement.survivalLimit)
        Settlement.survivalLimitText:SetText(Settlement.survivalLimit)
    end })

    Settlement.departingBonusesInput = Ui.DarkInput(panel, { id = "DepartingBonus", x = 1129, y = 865, width = 300, height = 25, text = Settlement.departingBonuses, onValueChanged = function(value)
        Log.Debugf("Setting departing bonuses to %s", value)
        Settlement.departingBonuses = value
    end })
    Settlement.arrivalBonusesInput = Ui.DarkInput(panel, { id = "ArrivalBonus", x = 1129, y = 830, width = 300, height = 25, text = Settlement.arrivalBonuses, onValueChanged = function(value)
        Log.Debugf("Setting arrival bonuses to %s", value)
        Settlement.arrivalBonuses = value
    end })

    Ui.InvisibleButton(panel, { id = "Close", x = 1556, y = 856,  width = 30, height = 30, onClick = function ()
        Settlement.HideUi()
    end })

    Settlement.firstBirthMilestoneCheckBox = Ui.CheckBox(panel, { id = "FirstBirthMilestone", x = 1301, y = 703, width = 20, height = 20, checked = Settlement.firstBirthMilestone, onCheck = function(checked)
        Log.Debugf("%s first birth milestone", checked and "Checking" or "Unchecking")
        Settlement.firstBirthMilestone = checked
    end })
    Settlement.firstDeathMilestoneCheckBox = Ui.CheckBox(panel, { id = "FirstDeathMilestone", x = 1301, y = 663, width = 20, height = 20, checked = Settlement.firstDeathMilestone, onCheck = function(checked)
        Log.Debugf("%s first death milestone", checked and "Checking" or "Unchecking")
        Settlement.firstDeathMilestone = checked
    end })
    Settlement.fifteenPopulationMilestoneCheckBox = Ui.CheckBox(panel, { id = "FifteenPopulationMilestone", x = 1301, y = 623, width = 20, height = 20, checked = Settlement.fifteenPopulationMilestone, onCheck = function(checked)
        Log.Debugf("%s 15 population milestone", checked and "Checking" or "Unchecking")
        Settlement.fifteenPopulationMilestone = checked
    end })
    Settlement.fiveInnovationshMilestoneCheckBox = Ui.CheckBox(panel, { id = "FiveInnovationsMilestone", x = 1301, y = 583, width = 20, height = 20, checked = Settlement.fiveInnovationsMilestone, onCheck = function(checked)
        Log.Debugf("%s five innovations milestone", checked and "Checking" or "Unchecking")
        Settlement.fiveInnovationsMilestone = checked
    end })

    local function Settlement_SpawnRules(name)
        local rulebook, state = Rules.GetRulebookAndState(name)
        Settlement.HideUi()
        Rules.SpawnRules(rulebook, state)
    end
    Ui.InvisibleButton(panel, { id = "PrincipleNewLife", x = 1417, y = 698, width = 145, height = 30, onClick = function() Settlement_SpawnRules("Principle: New Life") end })
    Ui.InvisibleButton(panel, { id = "PrincipleDeath",   x = 1417, y = 658, width = 145, height = 30, onClick = function() Settlement_SpawnRules("Principle: Death") end })
    Ui.InvisibleButton(panel, { id = "PrincipleSociety", x = 1417, y = 618, width = 145, height = 30, onClick = function() Settlement_SpawnRules("Principle: Society") end })
    Ui.InvisibleButton(panel, { id = "HoddedKnight",     x = 1417, y = 578, width = 145, height = 30, onClick = function() Settlement_SpawnRules("Hooded Knight") end })

    local dy = -27
    Settlement.quarryInputs = {}
    for i = 1, 10 do
        local x = (i <= 5) and 1301 or 1437
        local row = (i - 1) % 5
        Settlement.quarryInputs[i] = Ui.DarkInput(panel, { id = "Quarries"..i, x = x, y = 477 + (row * dy), width = 125, height = 25, text = Settlement.quarries[i],  fontSize = 14, onValueChanged = function(value)
            Log.Debugf("Setting quarries[%d] to %s", i, value)
            Settlement.quarries[i] = value
        end })
    end

    Settlement.notesInput = Ui.DarkInput(panel, { id = "Notes", x = 1301, y = 38, width = 261, height = 237, lineType = "MultiLineNewLine", text = Settlement.notes, textAlignment = "UpperLeft", onValueChanged = function(value)
        Log.Debugf("Setting settlement notes to %s", value)
        Settlement.notes = value
    end })

    -----------------------------------------------------------------------------------------------

    local scroll = Ui.VerticalScroll(panel, { x = 23, y = 23, width = 1242, height = 760 - 6 })
    local timelinePanel = Ui.Panel(scroll, { id = "Timeline", width = 1242, height = 1563 })
    Ui.Image(timelinePanel, { image = "Timeline30", width = 1242, height = 1563 })

    local x1 = 78
    local width = 172
    local dx = 192
    local dy = -52
    local offset = 30

    for year = 1, 30 do
        local yearData = Settlement.timeline[year]
        local y = 1528 + ((year - 1) * dy)
        yearData.yearCheckBox = Ui.CheckBox(timelinePanel, { id = "Year"..year, x = 10, y = y, width = 20, height = 20, checked = yearData.checked, onCheck = function(checked)
            Log.Debugf("%s year %d", checked and "Checking" or "Unchecking", year)
            Settlement.timeline[year].checked = checked
        end })

        yearData.eventButtons = {}
        yearData.eventTexts = {}
        local y = 1523 + ((year - 1) * dy)
        for event = 1, 6 do
            local id = "Year"..year.."Event"..event
            local x = x1 + ((event - 1) * dx)
            local eventData = yearData.events[event]
            if eventData then
                local image = Settlement.EVENT_TYPE_IMAGES[eventData.type]
                Assert(image, "Unknown event type %s", eventData.type)
                yearData.eventButtons[event] = Ui.ImageButton(timelinePanel, { id = id, x = x, y = y, width = width, height = 30, image = image, onClick = function(mouseButton)
                    Settlement.EventButtonOnClick(year, event, mouseButton)
                end })
                yearData.eventTexts[event] = Ui.LightText(timelinePanel, { id = id, x = x + offset, y = y, width = width - offset, height = 30, text = eventData.name, fontSize = 12 })
            else
                yearData.eventButtons[event] = Ui.InvisibleButton(timelinePanel, { id = id, x = x, y = y, width = width, height = 30, onClick = function(mouseButton)
                    Settlement.EventButtonOnClick(year, event, mouseButton)
                end })
                yearData.eventTexts[event] = Ui.LightText(timelinePanel, { id = id, x = x + offset, y = y, width = width - offset, height = 30, fontSize = 12, active = false })
            end
        end
    end

    -----------------------------------------------------------------------------------------------

    local timelineEventPanel = Ui.Panel(panel, { id = "AddTimelineEvent", width = 326, height = 493, active = false })
    Settlement.addTimelineEvent.panel = timelineEventPanel
    Ui.Image(timelineEventPanel, { image = "AddTimelineEvent", width = 326, height = 493 })

    Ui.InvisibleButton(timelineEventPanel, { id = "Close", x = 286, y = 453, width = 30, height = 30, onClick = function()
        Settlement.CloseAddTimelineEventPanel()
    end })

    Settlement.addTimelineEvent.searchInput = Ui.LightInput(timelineEventPanel, { id = "Search", x = 13+3, y = 411, width = 300-6, height = 30, placeholder = "search events...", onValueChanged = function(searchTerms)
        results = Util.Filter(
            Trie.Search(Settlement.trie, searchTerms),
            function(r) return Settlement.enabledExpansions[r.expansion] end
        )
        Log.Debugf("Search results for %s: %s", searchTerms, results)
        Settlement.SetEventSearchResults(results)
    end })

    Settlement.addTimelineEvent.resultButtons = {}
    for i = 1, 5 do
        local y = (246 + 150) - (i * 30)
        Settlement.addTimelineEvent.resultButtons[i] = Ui.InvisibleButton(timelineEventPanel, { id = "SearchResult"..i, x = 13, y = y, width = 300, height = 30, fontSize = 16, active = false, onClick = function()
            local data = Settlement.addTimelineEvent
            Settlement.AddTimelineEvent(data.year, data.event, data.results[i])
            Settlement.CloseAddTimelineEventPanel()
        end })
    end

    Settlement.addTimelineEvent.customNameText = Ui.LightInput(timelineEventPanel, { id = "CustomName", x = 13+3, y = 108, width = 300-6, height = 30, placeholder = "enter custom event...", onValueChanged = function(value)
        Log.Debugf("Setting custom name to %s", value)
        Settlement.addTimelineEvent.customName = value
    end })

    Settlement.addTimelineEvent.typeOptions = Ui.OptionBoxGroup(timelineEventPanel, { id = "Type", onSelect = function(type)
        Log.Debugf("Selecting custom event type %s", type)
        Settlement.addTimelineEvent.type = type
    end })
    Settlement.addTimelineEvent.timelineEventOption = Ui.OptionBox(Settlement.addTimelineEvent.typeOptions, { x = 58, y = 68, width = 20, height = 20, checked = true, value = "TimelineEvent" })
    Settlement.addTimelineEvent.showdownOption = Ui.OptionBox(Settlement.addTimelineEvent.typeOptions, { x = 156, y = 68, width = 20, height = 20, value = "Showdown" })
    Settlement.addTimelineEvent.settlementEventOption = Ui.OptionBox(Settlement.addTimelineEvent.typeOptions, { x = 249, y = 68, width = 20, height = 20, value = "SettlementEvent" })

    Ui.InvisibleButton(timelineEventPanel, { id = "Add", x = 40, y = 13, width = 100, height = 30, onClick = function()
        local data = Settlement.addTimelineEvent
        if data.customName == nil or data.customName == "" then
            return Log.Broadcastf("Please enter the event's name.")
        end

        Settlement.AddTimelineEvent(data.year, data.event,  { name = data.customName, type = data.type, custom = true })
        Settlement.CloseAddTimelineEventPanel()
    end })
    Ui.InvisibleButton(timelineEventPanel, { id = "Cancel", x = 186, y = 13, width = 100, height = 30, onClick = Settlement.CloseAddTimelineEventPanel })
end

---------------------------------------------------------------------------------------------------

return Settlement
