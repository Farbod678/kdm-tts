require("Kdm/Check")
local Util = require("Kdm/Util")
local Log = require("Kdm/Log").ForPackage("Locations")
local NamedObject = require("Kdm/NamedObject")

local LOCATION_DEFAULT_CAST_HEIGHT = 20

local LOCATION_CLEAN_IGNORE_TAGS = { "Board", "Table" }

local LocationData = require("Kdm/LocationData")

local Location_index = {}

local LocationClass = {}
LocationClass.__index = LocationClass

---------------------------------------------------------------------------------------------------

local function Location_Create(params)
    assert(CheckTable(params))
    assert(CheckObjectOrNil(params.object))

    local location = {
        tag = "Location",
        name = params.name,
        object = params.object,
    }
    setmetatable(location, LocationClass)

    if params.center and params.size then
        if location.object then
            location.center = location.object.positionToWorld(params.center)
        else
            location.center = params.center
        end
        location.topLeft = {
            x = location.center.x - (params.size.x / 2),
            y = location.center.y - (params.size.y / 2),
            z = location.center.z - (params.size.z / 2),
        }
        location.bottomRight = {
            x = location.center.x + (params.size.x / 2),
            y = location.center.y + (params.size.y / 2),
            z = location.center.z + (params.size.z / 2),
        }

    elseif params.p1 and params.p2 then
        local p1 = params.p1
        local p2 = params.p2
        if params.object then
            p1 = params.object.positionToWorld(p1)
            p2 = params.object.positionToWorld(p2)
        end
        location.center = {
            x = (p1.x + p2.x) / 2,
            y = (p1.y + p2.y) / 2,
            z = (p1.z + p2.z) / 2,
        }
        location.topLeft = {
            x = Util.Min(p1.x, p2.x),
            y = Util.Min(p1.y, p2.y),
            z = Util.Min(p1.z, p2.z),
        }
        location.bottomRight = {
            x = Util.Max(p1.x, p2.x),
            y = Util.Max(p1.y, p2.y),
            z = Util.Max(p1.z, p2.z),
        }

    else
        assert(CheckFail("Invalid params for Location_Create. Requires either center+size or p1+p2: %s", params))
    end

    return location
end

---------------------------------------------------------------------------------------------------

local function Location_CreateFromObject(object)
    local bounds = object.getBounds()
    return Location_Create({ name = object.getName(), center = bounds.center, size = bounds.size })
end

---------------------------------------------------------------------------------------------------

function LocationClass.Name(location)
    return location.name
end

---------------------------------------------------------------------------------------------------

function LocationClass.Center(location)
    local c = location.center
    -- always return a copy
    return { x = c.x, y = c.y, z = c.z }
end

---------------------------------------------------------------------------------------------------

function LocationClass.Size(location)
    local tl, br = location.topLeft, location.bottomRight
    return {
        x = math.abs(br.x - tl.x),
        y = math.abs(br.y - tl.y),
        z = math.abs(br.z - tl.z),
    }
end

---------------------------------------------------------------------------------------------------

function LocationClass.Rect(location)
    local topLeft, bottomRight = location.topLeft, location.bottomRight
    local left = Util.Min(topLeft.x, bottomRight.x)
    local right = Util.Max(topLeft.x, bottomRight.x)
    local top = Util.Min(topLeft.z, bottomRight.z)
    local bottom = Util.Max(topLeft.z, bottomRight.z)
    return left, top, right, bottom
end

---------------------------------------------------------------------------------------------------

function LocationClass.BoxCast(location, params)
    params = params or {}

    local center = location:Center()
    center.y = center.y + (params.height or LOCATION_DEFAULT_CAST_HEIGHT)

    local size = nil
    if params.size then
        size = params.size
    else
        size = location:Size()
        size.y = size.x -- doesn't matter, just needs to be > epsilon for a top-down cast
    end

    return Physics.cast({
        origin    = center,
        direction = { x = 0, y = -1, z = 0 },
        type      = 3,
        size      = size,
        debug     = params.debug,
    })
end

function LocationClass.RayCast(location, params)
    params = params or {}

    local center = location:Center()
    center.y = center.y + (params.height or LOCATION_DEFAULT_CAST_HEIGHT)

    return Physics.cast({
        origin    = center,
        direction = { x = 0, y = -1, z = 0 },
        type      = 1,
        debug     = params.debug,
    })
end

---------------------------------------------------------------------------------------------------

function LocationClass.FindFirst(location, tag)
    for _, hit in ipairs(location:BoxCast()) do
        local object = hit.hit_object
        if object.getGMNotes() == tag then
            return object
        end
    end
    return nil
end

---------------------------------------------------------------------------------------------------

function LocationClass.FindAll(location, tag)
    local results = {}
    for _, hit in ipairs(location:BoxCast()) do
        local object = hit.hit_object
        if object.getGMNotes() == tag then
            table.insert(results, object)
        end
    end
    return results
end

---------------------------------------------------------------------------------------------------

local function Location_Matches(obj, tags, types)
    local matchesTags = tags and Util.ArrayContains(tags, obj.tag)
    local matchesTypes = types and Util.ArrayContains(types, obj.getGMNotes())

    return matchesTags or matchesTypes
end

---------------------------------------------------------------------------------------------------

function Location_Clean(location, params, castFunc)
    tags, types, debug = params.tags, params.types, params.debug
    Log.Debugf("Cleaning %s", location:Name())

    local hits = castFunc(location, { size = params.size, debug = params.debug })
    local blocking = {}
    for _, hit in ipairs(hits) do
        local obj = hit.hit_object

        if Location_Matches(obj, LOCATION_CLEAN_IGNORE_TAGS, params.ignoreTypes) then
            -- ignore

        elseif Location_Matches(obj, tags, types) then
            Log.Debugf("Destroying hit object %s (%s) with matching type %s/tag %s", obj.getName(), obj.getGUID(), obj.getGMNotes(), obj.tag)
            obj.destruct()

        else
            Log.Debugf("Hit blocking object %s/%s (%s)", obj.getName(), obj.tag, obj.getGUID())
            table.insert(blocking, obj)
        end
    end

    return blocking
end

function LocationClass.BoxClean(location, params) return Location_Clean(location, params, location.BoxCast) end
function LocationClass.RayClean(location, params) return Location_Clean(location, params, location.RayCast) end

---------------------------------------------------------------------------------------------------

local function Location_Add(location)
    local name = location:Name()
    assert(Check(not Location_index[name], "Location %s already registered: %s", name, Location_index[name]))
    Location_index[name] = location
end

---------------------------------------------------------------------------------------------------

local function Location_Get(locationOrName)
    if type(locationOrName) == "table" then
        return locationOrName
    end
    local location = Location_index[locationOrName]
    assert(Check(location, "Unknown location: %s", locationOrName))
    return location
end

---------------------------------------------------------------------------------------------------

local function Location_Init(saveState, expansions, modules)
    for name, data in pairs(LocationData.data) do
        if data.fromObject then
            Location_Add(Location_CreateFromObject(NamedObject.Get(data.fromObject)))
        else
            data.name = name
            if data.board then
                data.object = NamedObject.Get(data.board)
            end
            Location_Add(Location_Create(data))
        end
    end

    for _, expansion in ipairs(expansions) do
        for name, locationParams in pairs(expansion.locations or {}) do
            locationParams.object = NamedObject.Get(locationParams.board)
            Location_Add(Location_Create(locationParams))
        end
    end
end

---------------------------------------------------------------------------------------------------

local Location_returnTable = {
    Init = Location_Init,
    Get = Location_Get,
}

for k, v in pairs(LocationData.maxes) do
    Location_returnTable[k] = v
end

return Location_returnTable
