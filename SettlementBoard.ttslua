local Util = require("Kdm/Util/Util")
local Assert = require("Kdm/Util/Assert")
local Log = require("Kdm/Util/Log").ForPackage("SettlementBoard")
local UiButton = require("Kdm/UiButton")
local Script = require("Kdm/Script")
local DropZone = require("Kdm/Util/DropZone")
local Locations = require("Kdm/Locations")

---------------------------------------------------------------------------------------------------

local SettlementBoard = {
    settlementLocationGear = {},
}

SETTLEMENT_BOARD_UI_HEIGHT = 0.59

---------------------------------------------------------------------------------------------------

function SettlementBoard.RegisterSettlementLocationGear(settlementLocationGear)
    for settlementLocation, gear in pairs(settlementLocationGear or {}) do
        Assert(SettlementBoard.settlementLocationGear[settlementLocation] == nil, "Settlement location %s already registered", settlementLocation)
        SettlementBoard.settlementLocationGear[settlementLocation] = gear
    end
end

---------------------------------------------------------------------------------------------------

function SettlementBoard.ResetSlocGear(col, row)
    Assert.Num(col, "col")
    Assert.Num(row, "row")

    local gearLocation = string.format("Gear_%d_%d", col, row)
    local slocLocation = string.format("SettlementLocation_%d_%d", col, row)

    local gear = SettlementBoard.settlementLocationGear[sloc.getName()]
    if not gear then
        return Log.Broadcastf("%s doesn't have any gear. Maybe the gear you're looking for is in the 'Rare Gear' deck?", sloc.getName())
    end

    local sloc = nil
    local hits = Locations.RayCast(slocLocation)
    for _, hit in ipairs(hits) do
        local obj = hit.hit_object
        if obj.getGMNotes() == "Settlement Locations" then
            sloc = obj
            Log.Debugf("Found candidadate settlement location %s (%s)", sloc.getName(), sloc.getGUID())
            break
        end
        Log.Debugf("Ignoring hit object %s (%s/%s)", obj.getName(), obj.getGUID(), obj.tag)
    end

    if sloc == nil then
        return Log.Broadcastf("No settlement location in this slot to reset gear for.")
    end

    SettlementBoard.resetGearName = gear
    SettlementBoard.resetGearLocation = gearLocation
    startLuaCoroutine(self, "SettlementBoard_ResetGearCoroutine")
end

---------------------------------------------------------------------------------------------------

function SettlementBoard.ResetSpecialGear(name)
    SettlementBoard.resetGearName = name
    SettlementBoard.resetGearLocation = name
    startLuaCoroutine(self, "SettlementBoard_ResetGearCoroutine")
end

function SettlementBoard_ResetGearCoroutine()
    local name, location = SettlementBoard.resetGearName, SettlementBoard.resetGearLocation
    Assert.Str(name, "name")
    Assert.Str(location, "location")

    Log.Debugf("Resetting gear %s at %s", name, location)

    local script = Script.Create("Reset "..name)
    local cleanupStage = Script.Stage(script, "Cleanup")
    Script.CleanAction(cleanupStage, {
        from = location,
        types = { "Gear" },
        rayCast = true,
        ignoreBlocking = false,
    })

    local spawnStage = Script.Stage(script, "Spawn")
    Script.TakeAction(spawnStage, {
        name = name,
        type = "Gear",
        to = location,
        rotation = { 0, 180, 180 },
    })

    local _, blockingObj = Script.Run(script)
    if blockingObj then
        Log.Broadcastf("Found an object %s(%s) blocking the gear slot. Please move it out of the way and try again.", blockingObj.getName(), blockingObj.tag)
    end

    return 1
end

---------------------------------------------------------------------------------------------------

function SettlementBoard_CleanGearCoroutine()
    local location = SettlementBoard.cleanGearLocation
    SettlementBoard.cleanGearLocation = nil

    local script = Script.Create("Reset")
    local cleanupStage = Script.Stage(script, "Cleanup")
    Script.CleanAction(cleanupStage, {
        from = location,
        types = { "Gear" },
        ignoreBlocking = true,
    })
    Script.Run(script)

    return 1
end

---------------------------------------------------------------------------------------------------

local function SettlementBoard_OnDrop(colRow, object)
    if object.getGMNotes() != "Settlement Locations" then
        return
    end

    local gear = SettlementBoard.settlementLocationGear[object.getName()]
    if not gear then
        return
    end

    local col, row = colRow.col, colRow.row
    Log.Debugf("Settlement location %s (%s) was dropped on settlement location (%d, %d) for gear", object.getName(), object.getGUID(), col, row, gear)

    SettlementBoard.resetGearName = gear
    SettlementBoard.resetGearLocation = string.format("Gear_%d_%d", col, row)
    startLuaCoroutine(self, "SettlementBoard_ResetGearCoroutine")
end

---------------------------------------------------------------------------------------------------

local function SettlementBoard_OnPickUp(colRow, object)
    if object.getGMNotes() != "Settlement Locations" then
        return
    end

    if not SettlementBoard.settlementLocationGear[object.getName()] then
        return
    end

    local col, row = colRow.col, colRow.row
    Log.Debugf("Settlement location %s (%s) removed from settlement location (%d, %d)", object.getName(), object.getGUID(), col, row)

    SettlementBoard.cleanGearLocation = string.format("Gear_%d_%d", col, row)
    startLuaCoroutine(self, "SettlementBoard_CleanGearCoroutine")
end

---------------------------------------------------------------------------------------------------

function SettlementBoard.Init(settlementBoardObj)
    local x0 = -5.66
    local z0 = -7.6
    local dx = 1.463
    local dz = 5.305

    for col = 1, 10 do
        for row = 1, 2 do
            local x = x0 + (col - 1) * dx
            local z = z0 + (row - 1) * dz
            UiButton.Create({
                object = settlementBoardObj,
                name = string.format("ResetSettlementLocationGear_%d_%d", col, row),
                position = { x, SETTLEMENT_BOARD_UI_HEIGHT, z },
                width = 550,
                height = 1600,
                clickFunc = function() SettlementBoard.ResetSlocGear(col, row) end,
            })
        end
    end

    local names = { "Starting Gear", "Rare Gear", "Promo Gear" }
    x0 = -6.925
    z0 = z0 + (dz / 2)
    dz = 0.7
    z0 = z0 - dz
    for i, name in ipairs(names) do
        UiButton.Create({
            object = settlementBoardObj,
            name = string.format("Reset %s", name),
            position = { x0, SETTLEMENT_BOARD_UI_HEIGHT, z0 + (i - 1) * dz },
            width = 550,
            height = 1600,
            clickFunc = function() SettlementBoard.ResetSpecialGear(name) end,
        })
    end

    for col = 1, LOCATIONS_MAX_SETTLEMENT_LOCATION_COLS do
        for row = 1, LOCATIONS_MAX_SETTLEMENT_LOCATION_ROWS do
            local name = string.format("SettlementLocation_%d_%d", col, row)
            local center = Locations.WorldCenter(name)
            DropZone.Create({
                name = name,
                context = { col = col, row = row },
                centerX = center.x,
                centerZ = center.z,
                width = LOCATIONS_SETTLEMENT_LOCATION_SIZE.x,
                height = LOCATIONS_SETTLEMENT_LOCATION_SIZE.z,
                dropHandler = SettlementBoard_OnDrop,
                pickUpHandler = SettlementBoard_OnPickUp,
            })
        end
    end
end

---------------------------------------------------------------------------------------------------

return SettlementBoard
