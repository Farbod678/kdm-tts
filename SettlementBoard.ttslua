require("Kdm/Check")
require("Kdm/Constants")
local Util = require("Kdm/Util")
local Log = require("Kdm/Log").ForPackage("SettlementBoard")
local Zone = require("Kdm/Zone")
local Ui = require("Kdm/Ui3d")
local Location = require("Kdm/Location")
local NamedObject = require("Kdm/NamedObject")

local Archive = nil

---------------------------------------------------------------------------------------------------

local SETTLEMENT_BOARD_UI_HEIGHT = -59
local SettlementBoard_settlementLocationGear = {}

---------------------------------------------------------------------------------------------------

local function SettlementBoard_ResetSlocGear(col, row)
    assert(CheckNum(col))
    assert(CheckNum(row))

    local slocLocation = Location.Get(string.format("Settlement Location %d %d", col, row))

    local slocObject = slocLocation:FindFirst("Settlement Locations")
    if slocObject == nil then
        return Log.Debugf("No settlement location in this slot to reset gear for.")
    end

    Log.Debugf("Found candidadate settlement location %s (%s)", slocObject.getName(), slocObject.getGUID())

    local gear = SettlementBoard_settlementLocationGear[slocObject.getName()]
    if not gear then
        return Log.Broadcastf("%s doesn't have any gear. Maybe the gear you're looking for is in the 'Rare Gear' deck?", sloc.getName())
    end

    SettlementBoard_ResetGear(gear, string.format("Gear %d %d", col, row))
end

---------------------------------------------------------------------------------------------------

local function SettlementBoard_ResetGear(gear, locationName)
    assert(CheckStr(gear))
    assert(CheckStr(locationName))

    Log.Debugf("Resetting gear %s at %s", gear, locationName)

    local location = Location.Get(locationName)
    local blocking = location:RayClean({ types = { "Gear" } })
    if #blocking > 0 then
        Log.Broadcastf("Something is blocking the gear slot. Please move the highlighted objects out of the way and try again.")
        Util.HighlightAll(blocking)
        return
    end

    Archive.Take({
        name = gear,
        type = "Gear",
        location = location,
        rotation = FACE_DOWN,
    })
    Archive.CleanupBags()
end

---------------------------------------------------------------------------------------------------

local function SettlementBoard_OnDrop(col, row, object)
    if object.getGMNotes() != "Settlement Locations" then
        return
    end

    local gear = SettlementBoard_settlementLocationGear[object.getName()]
    if not gear then
        return
    end

    Log.Debugf("Settlement location %s (%s) was dropped on settlement location (%d, %d) for gear", object.getName(), object.getGUID(), col, row, gear)

    SettlementBoard_ResetGear(gear, string.format("Gear %d %d", col, row))
end

---------------------------------------------------------------------------------------------------

local function SettlementBoard_OnPickUp(col, row, object)
    if object.getGMNotes() != "Settlement Locations" then
        return
    end

    if not SettlementBoard_settlementLocationGear[object.getName()] then
        return
    end

    Log.Debugf("Settlement location %s (%s) removed from settlement location (%d, %d)", object.getName(), object.getGUID(), col, row)

    Location.Get(string.format("Gear %d %d", col, row)):RayClean({ types = { "Gear" } })
end

---------------------------------------------------------------------------------------------------

local function SettlementBoard_Init(saveState, expansions, modules)
    Archive = modules.Archive
    assert(Archive)

    for _, expansion in ipairs(expansions) do
        for settlementLocation, gear in pairs(expansion.settlementLocationGear or {}) do
            assert(Check(SettlementBoard_settlementLocationGear[settlementLocation] == nil, "Settlement location %s already registered with ", settlementLocation, SettlementBoard_settlementLocationGear[settlementLocation]))
            SettlementBoard_settlementLocationGear[settlementLocation] = gear
        end
    end

    settlementBoard = NamedObject.Get("Settlement Board")
    local ui = { id = "SettlementBoard", children = settlementBoard.UI.getXmlTable() }

    local width = -0.21765
    local height = 0.644982
    local createButton = function(name, x, y, onClick)
        local topLeft = { x =  x, y = y }
        local bottomRight = { x = topLeft.x + width, y = topLeft.y + height }
        Ui.Button(ui, { object = settlementBoard, id = name, topLeft = topLeft, bottomRight = bottomRight, onClick = onClick, height = SETTLEMENT_BOARD_UI_HEIGHT })
    end

    local x = 7.031489
    local y1 = 3.920273
    local y3 = 5.323954
    local dy = (y3 - y1) / 2
    local names = { "Starting Gear", "Rare Gear", "Promo Gear" }
    for i, name in ipairs(names) do
        createButton("Reset "..name, x, y1 + (i - 1) * dy, function() SettlementBoard_ResetGear(name, name) end)
    end

    local x1 = 5.764139
    local x10 = -7.409930
    local dx = (x10 - x1) / 9
    local y1 = 1.971291
    local y2 = 7.274027
    local dy = y2 - y1
    for col = 1, 10 do
        for row = 1, 2 do
            local name = string.format("Reset Settlement Location Gear %s %s", col, row)
            createButton(name, x1 + (col - 1) * dx, y1 + (row - 1)* dy, function() SettlementBoard_ResetSlocGear(col, row) end)

            Zone.Add({
                name = name,
                location = Location.Get(string.format("Settlement Location %d %d", col, row)),
                dropHandler = function(object) SettlementBoard_OnDrop(col, row, object) end,
                pickUpHandler = function(object) SettlementBoard_OnPickUp(col, row, object) end,
            })
        end
    end

    settlementBoard.UI.setXmlTable(ui.children)
end

---------------------------------------------------------------------------------------------------

return {
    Init = SettlementBoard_Init,
}
