require("Kdm/Util/Check")
local Util = require("Kdm/Util/Util")
local Log = require("Kdm/Util/Log").ForPackage("G")
local Guids = require("Kdm/Guids")
local Locations = require("Kdm/Locations")
local Archive = require("Kdm/Archive")
local Rules = require("Kdm/Rules")
local Showdown = require("Kdm/Showdown")
local DropZone = require("Kdm/Util/DropZone")
local CharSheet = require("Kdm/CharSheet")
local PlayerBoard = require("Kdm/PlayerBoard")
local Hunt = require("Kdm/Hunt")
local SettlementBoard = require("Kdm/SettlementBoard")
local RulesNav = require("Kdm/RulesNav")
local Terrain = require("Kdm/Terrain")
local DeckBoard = require("Kdm/DeckBoard")
local PopulationSheet = require("Kdm/PopulationSheet")
local Settlement = require("Kdm/Settlement")
local BattleReference = require("Kdm/BattleReference")
local Armor = require("Kdm/Armor")
local Weapons = require("Kdm/Weapons")
local Setup = require("Kdm/Setup")

---------------------------------------------------------------------------------------------------

local Core = require("Kdm/Expansions/Core")
local CommunityEdition = require("Kdm/Expansions/CommunityEdition")
local DragonKing = require("Kdm/Expansions/DragonKing")
local DungBeetleKnight = require("Kdm/Expansions/DungBeetleKnight")
local FlowerKnight = require("Kdm/Expansions/FlowerKnight")
local Gorm = require("Kdm/Expansions/Gorm")
local LionGod = require("Kdm/Expansions/LionGod")
local LionKnight = require("Kdm/Expansions/LionKnight")
local LonelyTree = require("Kdm/Expansions/LonelyTree")
local Manhunter = require("Kdm/Expansions/Manhunter")
local Slenderman = require("Kdm/Expansions/Slenderman")
local Spidicules = require("Kdm/Expansions/Spidicules")
local Sunstalker = require("Kdm/Expansions/Sunstalker")

---------------------------------------------------------------------------------------------------

function onSave()
    local saveState = {
        Setup = Setup.Save(),
        Showdown = Showdown.Save(),
        PlayerBoard = PlayerBoard.Save(),
        Settlement = Settlement.Save(),
        PopulationSheet = PopulationSheet.Save(),
    }

    return JSON.encode(saveState)
end

---------------------------------------------------------------------------------------------------

function onLoad(saveJson)
    local uninteractable = {
        "Table",
        "Top Table",
        "Left Table",
        "Bottom Table",
        "Right Table",
        "Showdown Board",
        "Hunt Board",
        "Settlement Board",
        "Rules Board",
        "Rules Navigation Board",
        "Player 1 Board",
        "Player 2 Board",
        "Player 3 Board",
        "Player 4 Board",
        "Player 1 Marker",
        "Player 2 Marker",
        "Player 3 Marker",
        "Player 4 Marker",
        "Overlays",
    }
    for _, name in ipairs(uninteractable) do
        Guids.GetObject(name).interactable = false
    end

    local saveState = JSON.decode(saveJson) or {}

    local ui = { id = "UI", children = self.UI.getXmlTable() }

    Log.Init()

    for _, expansion in ipairs({ Core, DragonKing, DungBeetleKnight, FlowerKnight, Gorm, LionGod, LionKnight, LonelyTree, Manhunter, Slenderman, Spidicules, Sunstalker, CommunityEdition }) do
        Log.Debugf("Registering expansion %s", expansion.name)
        Setup.RegisterExpansion(expansion)
        Locations.RegisterExpansion(expansion)
        Terrain.RegisterExpansion(expansion)
        SettlementBoard.RegisterExpansion(expansion)
        Armor.RegisterExpansion(expansion)
        Weapons.RegisterExpansion(expansion)
        Guids.RegisterExpansion(expansion)
        Archive.RegisterExpansion(expansion)
        Rules.RegisterExpansion(expansion)
        Hunt.RegisterExpansion(expansion)
        Showdown.RegisterExpansion(expansion)
        Settlement.RegisterExpansion(expansion)
    end

    local modules = {
        { DropZone, "DropZone" },
        { CharSheet, "CharSheet" },
        { PlayerBoard, "PlayerBoard" },
        { Rules, "Rules" },
        { Terrain, "Terrain" },
        { DeckBoard, "DeckBoard" },
        { SettlementBoard, "SettlementBoard" },
        { RulesNav, "RulesNav" },
        { PopulationSheet, "PopulationSheet" },
        { Settlement, "Settlement" },
        { Hunt, "Hunt" },
        { Showdown, "Showdown" },
        { BattleReference, "BattleReference" },
        { Setup, "Setup" },
    }

    for _, module in ipairs(modules) do
        Log.Debugf("Initializing %s", module[2])
        module[1].Init(saveState[module[2]], ui)
    end

    if #ui.children > 0 then
        self.UI.setXmlTable(ui.children)
    end

    for _, module in ipairs(modules) do
        if module[1].PostInit then
            Log.Debugf("Post-Initializing %s", module[2])
            module[1].PostInit()
        end
    end
end

---------------------------------------------------------------------------------------------------
