require("Kdm/Util/Check")
local Util = require("Kdm/Util/Util")
local Log = require("Kdm/Util/Log").ForPackage("Setup")
local EventManager = require("Kdm/Util/EventManager")
local NamedObject = require("Kdm/NamedObject")
local Archive = require("Kdm/Archive")
local Location = require("Kdm/Location")
local Settlement = require("Kdm/Settlement")
local Rules = require("Kdm/Rules")
local Ui = require("Kdm/Util/Ui")
local Action = require("Kdm/Action")
local Container = require("Kdm/Container")

-------------------------------------------------------------------------------------------------

local Setup = {
    expansions = {},
    components = {},
    campaigns = {},
    campaignRequiredExpansion = {},
    removeTimelineEvent = {},
    replaceNemesis = {},
    timelineEvents = {},
    archiveOverrides = {},

    enabledExpansions = { ["Core"] = true },
}

---------------------------------------------------------------------------------------------------

function Setup.RegisterExpansion(expansion)
    table.insert(Setup.expansions, expansion.name)
    Setup.components[expansion.name] = expansion.components or {}
    for _, campaign in ipairs(expansion.campaigns or {}) do
        table.insert(Setup.campaigns, campaign)
        Setup.campaignRequiredExpansion[campaign.name] = expansion.name
    end
    Setup.removeTimelineEvent[expansion.name] = expansion.removeTimelineEvent
    Setup.replaceNemesis[expansion.name] = expansion.replaceNemesis
    Setup.timelineEvents[expansion.name] = expansion.timelineEvents
    Setup.archiveOverrides[expansion.name] = expansion.archiveOverrides
end

---------------------------------------------------------------------------------------------------

function Setup.HasDeck(deck)
    for expansion, _ in pairs(Setup.enabledExpansions) do
        if Setup.components[expansion][deck] then
            return true
        end
    end
    return false
end

---------------------------------------------------------------------------------------------------

function Setup.SetupArchiveOverrides(expansionsMap)
    for _, expansion in ipairs(Setup.expansions) do
        local overrides = Setup.archiveOverrides[expansion]
        if overrides then
            if expansionsMap[expansion] then
                Log.Debugf("Overriding archive entries for %s", expansion)
                Archive.RegisterArchiveEntries({ archive = overrides.newArchive, entries = overrides.entries }, true)
            else
                Log.Debugf("Reverting archive entry overrides for %s", expansion)
                Archive.RegisterArchiveEntries({ archive = overrides.oldArchive, entries = overrides.entries }, true)
            end
        end
    end
end

---------------------------------------------------------------------------------------------------

function Setup.SetupTimeline(campaign, expansions)
    Settlement.Reset()

    Log.Debugf("Setting up %s campaign timeline", campaign.name)

    -- first aggregate remove/replace
    local removeEvents = {}
    for year = 1, 30 do removeEvents[year] = {} end
    local replaceNemeses = {}
    for _, expansion in ipairs(expansions) do
        local removeEvent = Setup.removeTimelineEvent[expansion]
        if removeEvent then
            Log.Debugf("Setting up removed event: [%d] %s", removeEvent.year, removeEvent.name)
            removeEvents[removeEvent.year][removeEvent.name] = true
        end

        local replaceNemesis = Setup.replaceNemesis[expansion]
        if replaceNemesis then
            Log.Debugf("Setting up replacement nemesis: %s -> %s", replaceNemesis.nemesis, replaceNemesis.replacement)
            replaceNemeses[replaceNemesis.nemesis] = replaceNemesis.replacement
        end
    end

    local events = {}
    Util.AppendArray(events, campaign.timeline)
    for _, expansion in ipairs(expansions) do
        Util.AppendArray(events, Setup.timelineEvents[expansion] or {})
    end

    for _, event in ipairs(events) do
        local year, name, type = event.year, event.name, event.type

        if removeEvents[year][name] then
            Log.Debugf("Skipping removed event [%d] %s", year, name)

        elseif event.notCampaign == campaign.name then
            Log.Debugf("Skipping timeline event %s for campaign %s", name, campaign.name)

        elseif type == "RulebookEvent" then
            local rulebook, state = Rules.GetRulebookAndState(name)
            Settlement.AddTimelineEvent(year, nil, { name = name, type = "RulebookEvent", rulebook = rulebook, state = state })

        elseif type == "ShowdownEvent" then
            local monster, level = event.monster, event.level
            if monster and replaceNemeses[monster] then
                local monster = replaceNemeses[monster]
                Log.Debugf("Adding replacement showdown [%d] %s", year, name)
            end
            Settlement.AddTimelineEvent(year, 6, { type = "ShowdownEvent", monster = monster, level = level })

        else
            assert(CheckFail("Unknown event type %s for event %s", type, event))
        end
    end

    Settlement.SetMilestones(campaign.milestones)
end

---------------------------------------------------------------------------------------------------

function Setup.SetupDeck(params)
    local deck = params.deck
    local location = params.location or deck
    local type = params.type or deck
    local name = params.name or deck

    local sources = {}
    for _, expansion in ipairs(params.expansions) do
        local name = Setup.components[expansion][deck]
        if name then
            table.insert(sources, Action.ArchiveSource(name, type))
        end
    end

    if #sources == 0 then
        Log.Debugf("No expansions have %s, skipping", deck)
        return
    end

    Log.Debugf("Setting up %s deck", deck)

    local deckContainer = Action.CreateDeck({ sources = sources, name = name, type = deck, location = location, rotation = params.rotation })

    if params.remove then
        deckContainer:Delete(params.remove)
    end

    if params.resetArchive then
        local archive = NamedObject.Get(deck.." Archive")
        archive.reset()
        archive.putObject(deckContainer.object)

        if params.respawnDeck then
            deckContainer = Container(archive.takeObject({
                position = Location.WorldCenter(location),
                rotation = params.rotation or Location.FACE_UP,
                smooth   = false,
            }))
        end
    end

    if params.shuffleDeck then
        deckContainer:Shuffle()
    end

    return deckContainer
end

---------------------------------------------------------------------------------------------------

function Setup.SetupStartingInnovationDeck(innovationDeck, startingInnovationDeck)
    Log.Debugf("Setting up starting innovation deck: %s", Util.TabStr(startingInnovationDeck))

    local sources = {}
    for _, card in ipairs(startingInnovationDeck) do
        table.insert(sources, Action.ContainerSource(innovationDeck, card, "Innovations"))
    end

    local deck = Action.CreateDeck({ sources = sources, name = "Innovation Deck", type = "Innovations", location = "Innovation Deck", rotation = Location.FACE_DOWN })
    deck:Shuffle()

    return deck
end

---------------------------------------------------------------------------------------------------

SETUP_PRINCIPLE_CARDS = {
    ["Principle: Death"]      = { "Cannibalize - Death Principle", "Graves - Death Principle" },
    ["Principle: New Life"]   = { "Protect the Young - New Life Principle", "Survival of the Fittest - New Life Principle" },
    ["Principle: Society"]    = { "Accept Darkness - Society Principle", "Collective Toil - Society Principle" },
    ["Principle: Conviction"] = { "Barbaric - Conviction Principle", "Romantic - Conviction Principle" },
}

function Setup.SetupPrinciples(innovationDeck, startingPrinciples)
    startingPrinciples = startingPrinciples or {}
    Log.Debugf("Setting up principles (starting principles = %s)", Util.TabStr(startingPrinciples))

    for _, principle in ipairs({
        "Principle: Death",
        "Principle: New Life",
        "Principle: Society",
        "Principle: Conviction",
    }) do

        if startingPrinciples[principle] then
            Log.Debugf("Adding starting principle %s", startingPrinciples[principle])
            innovationDeck:Take({ name = startingPrinciples[principle], type = "Innovations", location = principle })

        else
            Log.Debugf("Setting up starting Principle: %s deck", principle)
            local sources = {}
            for _, card in ipairs(SETUP_PRINCIPLE_CARDS[principle]) do
                table.insert(sources, Action.ContainerSource(innovationDeck, card, "Innovations"))
            end
            Action.CreateDeck({ sources = sources, name = principle, type = "Innovations", location = principle, rotation = Location.FACE_DOWN })
        end
    end
end

---------------------------------------------------------------------------------------------------

function Setup.SetupStartingSettlementLocations(settlementLocationDeck, startingSettlementLocations)
    for i, settlementLocation in ipairs(startingSettlementLocations) do
        Log.Debugf("Setting up starting settlement location %s", settlementLocation)
        settlementLocationDeck:Take({ name = settlementLocation, type = "Settlement Locations", location = "SettlementLocation_"..i.."_1" })
    end
end

---------------------------------------------------------------------------------------------------

function Setup.SetupReferences(references)
    for _, reference in ipairs({
        "Age Reference",
        "Intimacy Reference",
        "Bold Reference",
        "Insight Reference",
    }) do
        Log.Debugf("Setting up reference %s at %s", references[reference], reference)
        Archive.Take({ name = references[reference], type = "Reference", location = reference })
    end
end

---------------------------------------------------------------------------------------------------

function Setup.Setup(campaign, expansionsMap)
    -- filter expansions
    local expansions = { "Core" }
    for _, expansion in ipairs(Setup.expansions) do
        if expansionsMap[expansion] and expansion != "Core" then
            table.insert(expansions, expansion)
        end
    end

    Setup.SetupArchiveOverrides(expansionsMap)

    Setup.SetupTimeline(campaign, expansions)

    Action.BoxClean({ location = "Deck Board", tags = { "Card", "Deck" }, ignoreTypes = { "Monster Resources" }, })
    Action.BoxClean({ location = "Terrain", tags = { "Card", "Deck" } })
    Action.BoxClean({ location = "Settlement Events", tags = { "Card", "Deck" } })
    Action.BoxClean({ location = "Settlement Location Board", tags = { "Card", "Deck" } })
    Action.BoxClean({ location = "Settlement Locations", tags = { "Card", "Deck" } })
    Action.BoxClean({ location = "Innovation Board", tags = { "Card", "Deck" } })
    for _, reference in ipairs({
        "Age Reference",
        "Intimacy Reference",
        "Bold Reference",
        "Insight Reference",
    }) do
        Action.RayClean({ location = reference, tags = { "Tile" }, types = { "Reference" } })
    end
    Action.BoxClean({ location = "Hunt Events", tags = { "Card", "Deck" } })

    Setup.SetupDeck({ expansions = expansions, deck = "Abilities", rotation = Location.FACE_DOWN, resetArchive = true, respawnDeck = true, shuffleDeck = false })
    Setup.SetupDeck({ expansions = expansions, deck = "Fighting Arts", rotation = Location.FACE_DOWN, resetArchive = true, respawnDeck = true, shuffleDeck = true, remove = campaign.removedFightingArts })
    Setup.SetupDeck({ expansions = expansions, deck = "Secret Fighting Arts", rotation = Location.FACE_DOWN, resetArchive = true, respawnDeck = true, shuffleDeck = false })
    Setup.SetupDeck({ expansions = expansions, deck = "Disorders", rotation = Location.FACE_DOWN, resetArchive = true, respawnDeck = true, shuffleDeck = true })
    Setup.SetupDeck({ expansions = expansions, deck = "Severe Injuries", rotation = Location.FACE_DOWN, resetArchive = true, respawnDeck = true, shuffleDeck = false })
    Setup.SetupDeck({ expansions = expansions, deck = "Tactics", rotation = Location.FACE_DOWN, resetArchive = true, respawnDeck = true, shuffleDeck = true })
    Setup.SetupDeck({ expansions = expansions, deck = "Weapon Proficiencies", rotation = Location.FACE_DOWN, resetArchive = true, respawnDeck = true, shuffleDeck = false })
    Setup.SetupDeck({ expansions = expansions, deck = "Armor Sets", rotation = Location.FACE_DOWN, resetArchive = true, respawnDeck = true, shuffleDeck = false })
    Setup.SetupDeck({ expansions = expansions, deck = "Vermin", rotation = Location.FACE_DOWN, resetArchive = true, respawnDeck = true, shuffleDeck = true })
    Setup.SetupDeck({ expansions = expansions, deck = "Strange Resources", rotation = Location.FACE_DOWN, resetArchive = true, respawnDeck = true, shuffleDeck = false })
    Setup.SetupDeck({ expansions = expansions, deck = "Basic Resources", rotation = Location.FACE_DOWN, resetArchive = true, respawnDeck = true, shuffleDeck = true })
    Setup.SetupDeck({ expansions = expansions, deck = "Terrain", rotation = Location.FACE_DOWN, resetArchive = true, respawnDeck = true, shuffleDeck = true })
    Setup.SetupDeck({ expansions = expansions, deck = "Settlement Events", rotation = Location.FACE_DOWN, resetArchive = true, respawnDeck = true, shuffleDeck = true })
    local innovationDeck = Setup.SetupDeck({ expansions = expansions, deck = "Innovations", name = "Innovation Archive", rotation = Location.FACE_DOWN, resetArchive = false, respawnDeck = false, shuffleDeck = false, remove = campaign.removedInnovations })
    local settlementLocationDeck = Setup.SetupDeck({ expansions = expansions, deck = "Settlement Locations", resetArchive = false, respawnDeck = false, shuffleDeck = false })
    Setup.SetupDeck({ expansions = expansions, deck = "Rare Gear", type = "Gear", rotation = Location.FACE_DOWN, resetArchive = true, respawnDeck = true, shuffleDeck = false })
    Setup.SetupDeck({ expansions = expansions, deck = "Hunt Events", rotation = Location.FACE_DOWN, resetArchive = true, respawnDeck = true, shuffleDeck = false })

    Log.Debugf("Setting up starting innovation %s", campaign.startingInnovation)
    innovationDeck:Take({ name = campaign.startingInnovation, type = "Innovations", location = "Starting Innovation" })

    Setup.SetupStartingInnovationDeck(innovationDeck, campaign.startingInnovationDeck)
    Setup.SetupPrinciples(innovationDeck, campaign.startingPrinciples)
    Setup.SetupStartingSettlementLocations(settlementLocationDeck, campaign.startingSettlementLocations)
    Setup.SetupReferences(campaign.references)

    Archive.Take({ name = "Starting Gear", type = "Gear", location = "Starting Gear", rotation = Location.FACE_DOWN })
    Archive.Take({ name = "Promo Gear", type = "Gear", location = "Promo Gear", rotation = Location.FACE_DOWN })

    Archive.CleanupBags()

    Log.Broadcastf("Campaign setup complete.")

    Setup.enabledExpansions = {}
    for _, expansion in ipairs(expansions) do
        Setup.enabledExpansions[expansion] = true
    end

    EventManager.FireEvent("onExpansionsChanged", Setup.enabledExpansions)
end

---------------------------------------------------------------------------------------------------

function Setup.Save()
    return Setup.enabledExpansions
end

---------------------------------------------------------------------------------------------------

Setup.campaignSetup = {
    open = false,
    selectedCampaignIndex = 1,
    selectedExpansions = { Core = true },
}

function Setup.OpenCampaignSetup()
    Log.Debugf("Opening campaign setup")
    Setup.campaignSetup.panel:Show()
    Setup.campaignSetup.open = true
end

function Setup.CloseCampaignSetup()
    Log.Debugf("Closing campaign setup")
    Setup.campaignSetup.panel:Hide()
    Setup.campaignSetup.open = false
end

---------------------------------------------------------------------------------------------------

function Setup.Init(saveState, ui)
    Setup.enabledExpansions = saveState or Setup.enabledExpansions
    for expansion, _ in pairs(Setup.enabledExpansions) do
        local overrides = Setup.archiveOverrides[expansion]
        if overrides then
            Archive.RegisterArchiveEntries({ archive = overrides.newArchive, entries = overrides.entries }, true)
        end
    end

    Ui.ImageButton(ui, { id = "Setup", rectAlignment = "UpperLeft", x = 80, y = -10, width = 100, height = 30, image = "SetupButton", onClick = function()
        if Setup.campaignSetup.open then
            Setup.CloseCampaignSetup()
        else
            Setup.OpenCampaignSetup()
        end
    end })

    local panel = Ui.Panel(ui, { id = "CampaignSetup", width = 885, height = 723, active = false })
    Setup.campaignSetup.panel = panel
    Ui.Image(panel, { id = "CampaignSetup", image = "CampaignSetup", width = 885, height = 723 })

    Ui.InvisibleButton(panel, { id = "Close", x = 845, y = 683, width = 30, height = 30, onClick = Setup.CloseCampaignSetup})

    local x = 128
    local y = 568
    local campaignOptionGroup = Ui.OptionButtonGroup(panel, { id = "Campaign", onSelect = function(campaignIndex)
        Log.Debugf("Campaign [%d] %s selected", campaignIndex, Setup.campaigns[campaignIndex].name)
        Setup.campaignSetup.selectedCampaignIndex = campaignIndex
    end })
    for i, campaign in ipairs(Setup.campaigns) do
        local selected = (i == Setup.campaignSetup.selectedCampaignIndex)
        Ui.OptionButton(campaignOptionGroup, { x = x, y = y, width = 200, height = 30, text = campaign.name, selected = selected, value = i })
        x = x + 200 + 15
    end

    local x = 20
    local y = 425
    for i, expansion in ipairs(Setup.expansions) do
        if expansion != "Core" then
            Ui.CheckButton(panel, { id = expansion, x = x, y = y, width = 200, height = 30, text = expansion, value = expansion, onCheck = function(checked)
                Log.Debugf("%s expansion %s", checked and "Checking" or "Unchecking", expansion)
                Setup.campaignSetup.selectedExpansions[expansion] = checked
            end })
            x = x + 200 + 15
            if x > 665 then
                x = 20
                y = y - 30 - 15
            end
        end
    end

    Ui.InvisibleButton(panel, { id = "Begin", x = 117, y = 20, width = 300, height = 60, onClick = function()
        local campaign = Setup.campaigns[Setup.campaignSetup.selectedCampaignIndex]
        local requiredExpansion = Setup.campaignRequiredExpansion[campaign.name]
        if not Setup.campaignSetup.selectedExpansions[requiredExpansion] then
            Log.Broadcastf("%s requires %s expansion", campaign.name, requiredExpansion)
            return
        end

        Setup.CloseCampaignSetup()
        Setup.Setup(campaign, Setup.campaignSetup.selectedExpansions)
    end })
    Ui.InvisibleButton(panel, { id = "Cancel", x = 468, y = 20, width = 300, height = 60, onClick = Setup.CloseCampaignSetup })
end

---------------------------------------------------------------------------------------------------

function Setup.PostInit()
    EventManager.FireEvent("onExpansionsChanged", Setup.enabledExpansions)
end

---------------------------------------------------------------------------------------------------

return Setup
