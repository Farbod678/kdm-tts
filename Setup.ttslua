require("Kdm/Check")
require("Kdm/Constants")
local Util = require("Kdm/Util")
local Log = require("Kdm/Log").ForPackage("Setup")
local EventManager = require("Kdm/EventManager")
local Ui = require("Kdm/Ui")
local Ui3d = require("Kdm/Ui3d")
local Container = require("Kdm/Container")
local Location = require("Kdm/Location")
local NamedObject = require("Kdm/NamedObject")
local Console = require("Kdm/Console")
local Crc32 = require("Kdm/Crc32")
local Base64 = require("Kdm/Base64")
local Zone = require("Kdm/Zone")
local Survivor = require("Kdm/Survivor")

local Archive = nil
local Timeline = nil
local Rules = nil
local Action = nil
local Population = nil

-------------------------------------------------------------------------------------------------

local Setup = {
    EXPORT_VERSION = 1,
    PRINCIPLES = {
        "Principle: Death",
        "Principle: New Life",
        "Principle: Society",
        "Principle: Conviction",
    },

    DEFAULT_PLAYER_GEAR = {
        { gear = {
            { name = "Fist & Tooth",   location = "Player 1 Fist & Tooth" },
            { name = "Founding Stone", location = "Player 1 Gear 1" },
            { name = "Cloth",          location = "Player 1 Gear 2" },
        } },
        { gear = {
            { name = "Fist & Tooth",   location = "Player 2 Fist & Tooth" },
            { name = "Founding Stone", location = "Player 2 Gear 1" },
            { name = "Cloth",          location = "Player 2 Gear 2" },
        } },
        { gear = {
            { name = "Fist & Tooth",   location = "Player 3 Fist & Tooth" },
            { name = "Founding Stone", location = "Player 3 Gear 1" },
            { name = "Cloth",          location = "Player 3 Gear 2" },
        } },
        { gear = {
            { name = "Fist & Tooth",   location = "Player 4 Fist & Tooth" },
            { name = "Founding Stone", location = "Player 4 Gear 1" },
            { name = "Cloth",          location = "Player 4 Gear 2" },
        } },
    },

    DEFAULT_POPULATION = {
        survivors = {
            { id = 1 },
            { id = 2 },
            { id = 3 },
            { id = 4 },
        },
    },
}

---------------------------------------------------------------------------------------------------

function Setup.Init(modules, saveState, expansions, ui)
    Setup.InitModules(modules)
    Setup.InitExpansions(expansions)    -- comes before save state
    Setup.InitState(saveState)
    Setup.InitUi(ui)
end

---------------------------------------------------------------------------------------------------

function Setup.InitModules(modules)
    Archive = modules.Archive
    Timeline = modules.Timeline
    Rules = modules.Rules
    Action = modules.Action
    Population = modules.Population
end

---------------------------------------------------------------------------------------------------

function Setup.InitExpansions(expansions)
    Setup.expansions = expansions
    Setup.expansionsByName = {}
    Setup.campaigns = {}
    Setup.expansionsByCampaign = {}
    for _, expansion in ipairs(expansions) do
        Setup.expansionsByName[expansion.name] = expansion
        for _, campaign in ipairs(expansion.campaigns or {}) do
            table.insert(Setup.campaigns, campaign)
            Setup.expansionsByCampaign[campaign] = expansion
        end
    end
end

---------------------------------------------------------------------------------------------------

function Setup.InitState(saveState)
    saveState = saveState or {}

    Setup.enabledExpansions = {}
    for _, expansionName in ipairs(saveState.expansions or {}) do
        local expansion = Setup.expansionsByName[expansionName]
        assert(Check(expansion, "Setup saveState had unknown expansion %s", expansionName))
        Setup.enabledExpansions[expansion] = true
        Log.Debugf("Enabled expansion: %s", expansionName)
    end
    Setup.enabledExpansions[Setup.expansionsByName["Core"]] = true

    for expansion, _ in pairs(Setup.enabledExpansions) do
        if expansion.overrides then
            Log.Debugf("Overriding archive entries for %s", expansion.name)
            Archive.RegisterEntries({ archive = overrides.newArchive, entries = expansion.overrides.entries, allowOverrides = true })
        end
    end

    Setup.campaign = Util.FindIf(Setup.campaigns, function(c) return c.name == saveState.campaign end)
    if not Setup.campaign then
        Log.Errorf("Couldn't find saved campaign '%s', using default campaign", tostring(Setup.campaign))
    end
end

---------------------------------------------------------------------------------------------------

function Setup.InitUi(ui)
    Setup.ui = {}

    Setup.InitCampaignUi(ui)
    Setup.InitExportUi(ui)
    Setup.InitImportUi(ui)
    Setup.InitExportImportBoard()

    Setup.ui.activeTab = Setup.ui.campaign
end

---------------------------------------------------------------------------------------------------

function Setup.InitCampaignUi(ui)
    Setup.ui.campaign = {}

    local panel = Ui.Panel(ui, { id = "Campaign", width = 885, height = 753, active = false })
    Setup.ui.campaign.panel = panel
    Ui.Image(panel, { id = "Campaign", rectAlignment = "MiddleCenter", image = "Campaign", width = 885, height = 753 })

    Ui.InvisibleButton(panel, { id = "ExportTab", x = 98, y = 721, width = 106, height = 34, onClick = function() Setup.SetTab(Setup.ui.export) end })
    Ui.InvisibleButton(panel, { id = "ImportTab", x = 200, y = 721, width = 106, height = 34, onClick = function() Setup.SetTab(Setup.ui.import) end })
    Ui.InvisibleButton(panel, { id = "Close", x = 845, y = 683, width = 30, height = 30, onClick = Setup.HideUi })

    Setup.ui.campaign.selectedCampaign = Setup.campaigns[1]
    local x = 128
    local y = 568
    Setup.ui.campaign.campaignOptionGroup = Ui.OptionButtonGroup(panel, { id = "Campaign", onClick = function(option)
        local campaign = option:Value()
        Log.Debugf("Campaign %s selected", campaign.name)
        Setup.ui.campaign.selectedCampaign = campaign
        Setup.ui.campaign.campaignOptionGroup:Set(option)
    end })
    for _, campaign in ipairs(Setup.campaigns) do
        local selected = (campaign == Setup.ui.campaign.selectedCampaign)
        Ui.OptionButton(Setup.ui.campaign.campaignOptionGroup, { x = x, y = y, width = 200, height = 30, text = campaign.name, selected = selected, value = campaign })
        x = x + 200 + 15
    end

    Setup.ui.campaign.selectedExpansions = {}
    local x = 20
    local y = 425
    Setup.ui.campaign.expansionButtons = {}
    for i, expansion in ipairs(Setup.expansions) do
        if expansion.name != "Core" then
            Setup.ui.campaign.expansionButtons[expansion] = Ui.CheckButton(panel, { id = expansion.name, x = x, y = y, width = 200, height = 30, text = expansion.name, onClick = function()
                local value = not Setup.ui.campaign.selectedExpansions[expansion]
                Log.Debugf("%s expansion %s", value and "Selecting" or "Deselecting", expansion.name)
                Setup.ui.campaign.selectedExpansions[expansion] = value
                Setup.ui.campaign.expansionButtons[expansion]:Set(value)
            end })
            x = x + 200 + 15
            if x > 665 then
                x = 20
                y = y - 30 - 15
            end
        end
    end

    Ui.InvisibleButton(panel, { id = "Begin", x = 117, y = 20, width = 300, height = 60, onClick = function()
        local campaign = Setup.ui.campaign.selectedCampaign
        local requiredExpansion = Setup.expansionsByCampaign[campaign]
        if requiredExpansion.name != "Core" and not Setup.ui.campaign.selectedExpansions[requiredExpansion] then
            Log.Broadcastf("%s requires %s expansion", campaign.name, requiredExpansion.name)
            return
        end

        Setup.HideUi()

        local expansions = { Setup.expansionsByName["Core"] }
        for expansion, enabled in pairs(Setup.ui.campaign.selectedExpansions) do
            if expansion.name != "Core" and enabled then
                table.insert(expansions, expansion)
            end
        end

        local setupData = {
            expansions = expansions,
            campaign = campaign,
        }

        Setup.Setup(setupData)
    end })
    Ui.InvisibleButton(panel, { id = "Cancel", x = 468, y = 20, width = 300, height = 60, onClick = Setup.HideUi })
end

---------------------------------------------------------------------------------------------------

function Setup.InitExportUi(ui)
    Setup.ui.export = {}

    local panel = Ui.Panel(ui, { id = "Export", width = 885, height = 753, active = false })
    Setup.ui.export.panel = panel
    Ui.Image(panel, { id = "Export", rectAlignment = "MiddleCenter", image = "Export", width = 885, height = 753 })

    Ui.InvisibleButton(panel, { id = "SetupTab", x = 0, y = 721, width = 106, height = 34, onClick = function() Setup.SetTab(Setup.ui.campaign) end })
    Ui.InvisibleButton(panel, { id = "ImportTab", x = 200, y = 721, width = 106, height = 34, onClick = function() Setup.SetTab(Setup.ui.import) end })
    Ui.InvisibleButton(panel, { id = "Close", x = 845, y = 683, width = 30, height = 30, onClick = Setup.HideUi })
end

---------------------------------------------------------------------------------------------------

function Setup.InitImportUi(ui)
    Setup.ui.import = {}

    local panel = Ui.Panel(ui, { id = "Import", width = 885, height = 753, active = false })
    Setup.ui.import.panel = panel
    Ui.Image(panel, { id = "Import", rectAlignment = "MiddleCenter", image = "Import", width = 885, height = 753 })

    Ui.InvisibleButton(panel, { id = "SetupTab", x = 0, y = 721, width = 106, height = 34, onClick = function() Setup.SetTab(Setup.ui.campaign) end })
    Ui.InvisibleButton(panel, { id = "ExportTab", x = 100, y = 721, width = 106, height = 34, onClick = function() Setup.SetTab(Setup.ui.export) end })
    Ui.InvisibleButton(panel, { id = "Close", x = 845, y = 683, width = 30, height = 30, onClick = Setup.HideUi })

    Setup.ui.import.dataInput = Ui.LightInput(panel, { id = "Data", x = 20+2, y = 95+2, width = 845-4, height = 485-4, fontSize = 12, lineType = "MultiLineSubmit", textAlignment = "UpperLeft", onValueChanged = function(value)
        Setup.ui.import.data = value
    end })

    Ui.InvisibleButton(panel, { id = "Import", x = 117, y = 20, width = 300, height = 60, onClick = function()
        if Setup.ui.import.data then
            Setup.ImportEncoded(Setup.ui.import.data)
            Setup.ui.import.data = nil
            Setup.ui.import.dataInput:Set(nil)
            Setup.HideUi()
        end
    end })
    Ui.InvisibleButton(panel, { id = "Cancel", x = 468, y = 20, width = 300, height = 60, onClick = Setup.HideUi })
end

---------------------------------------------------------------------------------------------------

function Setup.SetTab(tab)
    Setup.ui.activeTab.panel:Hide()
    tab.panel:Show()
    Setup.ui.activeTab = tab
end

---------------------------------------------------------------------------------------------------

function Setup.InitExportImportBoard()
    local object = NamedObject.Get("Export/Import Board")

    Ui3d.Button({ object = object, id = "Export", topLeft = { x = 1.061903, y = 0.651955 }, bottomRight = { x = 0.067542, y = 0.849967 }, scale = 0.07, onClick = function()
        Setup.Export()
    end})

    Ui3d.Button({ object = object, id = "Import", topLeft = { x = -0.071813, y = 0.652758 }, bottomRight = { x = -1.065097, y = 0.848203 }, scale = 0.07, onClick = function()
        Setup.Import()
    end})
end

---------------------------------------------------------------------------------------------------

function Setup.Save()
    local expansions = {}
    for expansion, enabled in pairs(Setup.enabledExpansions) do
        if enabled then
            table.insert(expansions, expansion.name)
        end
    end

    return {
        expansions = expansions,
        campaign = Setup.campaign.name
    }
end

---------------------------------------------------------------------------------------------------

function Setup.ImportEncoded(encodedStr)
    local decodedStr = nil
    local dataStr = nil
    local recordedCrc32 = nil
    if not pcall(function()
        decodedStr = Base64.Decode(encodedStr)
        dataStr = decodedStr:sub(1, -9)
        recordedCrc32 = tonumber(decodedStr:sub(-8), 16)
        Log.Debugf("%08x", recordedCrc32)
    end) then
        return Log.Errorf("Couldn't import save: text had invalid Base64 encoding.")
    end

    local data = nil
    if not pcall(function() data = JSON.decode(dataStr) end) then
        return Log.Errorf("Couldn't import save: error parsing JSON.")
    end

    local actualCrc32 = Crc32(dataStr)
    if actualCrc32 != recordedCrc32 then
        return Log.Errorf("Couldn't import save: CRC32 doesn't match.")
    end

    Setup.ImportData(data)
    return data
end

---------------------------------------------------------------------------------------------------

function Setup.Import()
    local location = Location.Get("Export/Import")
    local object = location:FindFirst("Campaign Orb")
    if not object then
        Log.Broadcastf("Place your exported campaign orb in the highlighted area, then click 'Import Campaign'.")
        location:BoxCast({ debug = true })
        return
    end

    if object.getGMNotes() != "Campaign Orb" then
        Log.Errorf("This object is not a campaign orb.")
        Util.Highlight(object)
        return
    end

    local data = JSON.decode(object.script_state)
    Setup.ImportData(data)
    Wait.frames(function() Log.Broadcastf("You can now delete the campaign orb.") end, 1)
end

---------------------------------------------------------------------------------------------------

function Setup.ImportData(data)
    local expansions = { Setup.expansionsByName["Core"] }
    for _, expansionName in ipairs(data.expansions) do
        if expansionName != "Core" then
            local expansion = Setup.expansionsByName[expansionName]
            assert(Check(expansion, "Unknown expansion in save data: %s", expansionName))
            table.insert(expansions, expansion)
        end
    end

    local campaign = Util.FindIf(Setup.campaigns, function(c) return c.name == data.campaign end)
    assert(Check(campaign, "Unrecognized campaign in save data: %s", data.campaign))

    data.expansions = expansions
    data.campaign = campaign

    Setup.Setup(data)
end

---------------------------------------------------------------------------------------------------

function Setup.Export()
    local expansions = {}
    for expansion, enabled in pairs(Setup.enabledExpansions) do
        if enabled then
            table.insert(expansions, expansion.name)
        end
    end

    local innovationDeck = {}
    local innovationDeckContainer = Container(Zone.FindFirst({ location = "Innovation Deck", tags = { "Deck", "Card" }}))
    for _, elem in ipairs(innovationDeckContainer:Objects()) do
        if elem.gm_notes == "Innovations" then
            Log.Debugf("Recording '%s' in innovation deck", elem.name)
            table.insert(innovationDeck, elem.name)
        else
            Log.Errorf("Found card '%s' in Innovation Deck that's not an innovation (GM Notes = '%s')", elem.name, elem.gm_notes)
            Util.Highlight(innovationDeckContainer:Object())
            Setup.HideUi()
            return
        end
    end

    local data = {
        version = Setup.EXPORT_VERSION,
        expansions = expansions,
        campaign = Setup.campaign.name,
        innovationDeck = innovationDeck,
        principles = {},
        innovations = {},
        weaponMasteries = {},
        settlementGear = {},
        settlementResources = {},
        settlementLocations = {},
        playerGear = {
            { gear = {} },
            { gear = {} },
            { gear = {} },
            { gear = {} },
        },
    }

    local scanData = {}
    for _, principle in ipairs(Setup.PRINCIPLES) do
        table.insert(scanData, { array = data.principles, location = principle, type = "Innovations", ignoreNonCard = true })
    end
    for i = 1, Location.MAX_INNOVATION_LOCATIONS do
        table.insert(scanData, { array = data.innovations, location = "Innovation "..i, type = "Innovations" })
    end
    for i = 1, Location.MAX_WEAPON_MASTERY_LOCATIONS do
        table.insert(scanData, { array = data.weaponMasteries , location = "Weapon Mastery "..i, type = "Weapon Proficiencies" })
    end
    for i = 1, Location.MAX_SETTLEMENT_GEAR_LOCATIONS do
        table.insert(scanData, { array = data.settlementGear, location = "Settlement Gear "..i, type = "Gear" })
    end
    for i = 1, Location.MAX_SETTLEMENT_RESOURCE_LOCATIONS do
        table.insert(scanData, { array = data.settlementResources, location = "Settlement Resource "..i, types = { "Basic Resources", "Monster Resources", "Strange Resources", "Vermin" } })
    end
    for i = 1, Location.MAX_SETTLEMENT_LOCATION_LOCATIONS do
        table.insert(scanData, { array = data.settlementLocations, location = "Settlement Location "..i, type = "Settlement Locations" })
    end
    for playerNumber = 1, 4 do
        local playerPrefix = "Player "..playerNumber
        table.insert(scanData, { table = data.playerGear[playerNumber], field = "armorSet", location = playerPrefix.." Armor Set", type = "Armor Sets"})
        table.insert(scanData, { array = data.playerGear[playerNumber].gear, location = playerPrefix.." Fist & Tooth", type = "Gear" })
        for i = 1, Location.MAX_PLAYER_GEAR_GRID_LOCATIONS do
            table.insert(scanData, { array = data.playerGear[playerNumber].gear, location = playerPrefix.." Gear "..i, type = "Gear" })
        end
    end

    for _, scan in ipairs(scanData) do
        local location, type, types = scan.location, scan.type, scan.types

        local objects = Zone.Objects(location)
        if #objects > 1 then
            Log.Errorf("Found multiple objects at %s: please make sure there's only one object in each card slot.", location)
            Util.HighlightAll(objects)
            Setup.HideUi()
            return
        end

        if #objects == 1 then
            local object = objects[1]
            if object.tag != "Card" then
                if not scan.ignoreNonCard then
                    Log.Errorf("Found %s '%s' at '%s'. Export only records cards (not decks or other objects). If this is a deck then please lay out the cards individually, otherwise move this object out of the way.", object.tag, object.getName(), location)
                    Util.Highlight(object)
                    Setup.HideUi()
                    return
                end
            else
                if type and object.getGMNotes() != type then
                    Log.Errorf("Found %s '%s' at '%s'. Export only records %s at this slot, so please move this card to it's correct location.", object.getGMNotes(), object.getName(), location, type)
                    Util.Highlight(object)
                    Setup.HideUi()
                    return
                elseif types and not Util.Find(types, object.getGMNotes()) then
                    Log.Errorf("Found %s '%s' at '%s'. Export only records %s at this slot, so please move this card to it's correct location.", object.getGMNotes(), object.getName(), location, types)
                    Util.Highlight(object)
                    Setup.HideUi()
                    return
                end

                if scan.array then
                    table.insert(scan.array, { name = object.getName(), location = location, type = object.getGMNotes() })
                else
                    scan.table[scan.field] = { name = object.getName(), location = location, type = object.getGMNotes() }
                end

                Log.Debugf("Recording %s '%s' at '%s'", object.getGMNotes(), object.getName(), location)
            end
        end
    end

    data.timeline = Timeline.Export()
    data.population = Population.Export()

    local campaignOrb = spawnObject({
        type = "Metal Ball",
        position = Location.Get("Export/Import"):Center(),
        scale = { x = 5, y = 5, z = 5 },
    })
    campaignOrb.setLuaScript("--")
    campaignOrb.script_state = JSON.encode(data)
    campaignOrb.setName("Campaign Orb")
    campaignOrb.setGMNotes("Campaign Orb")

    Log.Broadcastf("Campaign export complete. Instructions are in the chat window.")
    Log.Printf("1. Save your game.")
    Log.Printf("2. Copy your campaign orb (right click on the orb -> Copy).")
    Log.Printf("3. Load the latest version of the mod ('Games' button on the top bar).")
    Log.Printf("4. Paste (right click anywhere -> Paste) the orb and drop it onto the same spot in the new version.")
    Log.Printf("5. Click the 'Import Campaign' button.")
end

---------------------------------------------------------------------------------------------------

function Setup.Setup(params)
    local expansions = params.expansions

    Setup.Clean()
    Archive.CleanUpContainers()

    Setup.SetupArchiveOverrides(expansions)

    Setup.SetupDeck({ expansions = expansions, deck = "Abilities",            rotation = FACE_DOWN, resetArchive = true, respawnDeck = true, shuffleDeck = false })
    Setup.SetupDeck({ expansions = expansions, deck = "Fighting Arts",        rotation = FACE_DOWN, resetArchive = true, respawnDeck = true, shuffleDeck = true, remove = params.campaign.removedFightingArts })
    Setup.SetupDeck({ expansions = expansions, deck = "Secret Fighting Arts", rotation = FACE_DOWN, resetArchive = true, respawnDeck = true, shuffleDeck = false })
    Setup.SetupDeck({ expansions = expansions, deck = "Disorders",            rotation = FACE_DOWN, resetArchive = true, respawnDeck = true, shuffleDeck = true  })
    Setup.SetupDeck({ expansions = expansions, deck = "Severe Injuries",      rotation = FACE_DOWN, resetArchive = true, respawnDeck = true, shuffleDeck = false })
    Setup.SetupDeck({ expansions = expansions, deck = "Tactics",              rotation = FACE_DOWN, resetArchive = true, respawnDeck = true, shuffleDeck = true  })
    Setup.SetupDeck({ expansions = expansions, deck = "Weapon Proficiencies", rotation = FACE_DOWN, resetArchive = true, respawnDeck = true, shuffleDeck = false })
    Setup.SetupDeck({ expansions = expansions, deck = "Armor Sets",           rotation = FACE_DOWN, resetArchive = true, respawnDeck = true, shuffleDeck = false })
    Setup.SetupDeck({ expansions = expansions, deck = "Vermin",               rotation = FACE_DOWN, resetArchive = true, respawnDeck = true, shuffleDeck = true  })
    Setup.SetupDeck({ expansions = expansions, deck = "Strange Resources",    rotation = FACE_DOWN, resetArchive = true, respawnDeck = true, shuffleDeck = false })
    Setup.SetupDeck({ expansions = expansions, deck = "Basic Resources",      rotation = FACE_DOWN, resetArchive = true, respawnDeck = true, shuffleDeck = true  })
    Setup.SetupDeck({ expansions = expansions, deck = "Terrain",              rotation = FACE_DOWN, resetArchive = true, respawnDeck = true, shuffleDeck = true  })
    Setup.SetupDeck({ expansions = expansions, deck = "Settlement Events",    rotation = FACE_DOWN, resetArchive = true, respawnDeck = true, shuffleDeck = true  })
    Setup.SetupDeck({ expansions = expansions, deck = "Rare Gear",            rotation = FACE_DOWN, resetArchive = true, respawnDeck = true, shuffleDeck = false, type = "Gear" })
    Setup.SetupDeck({ expansions = expansions, deck = "Hunt Events",          rotation = FACE_DOWN, resetArchive = true, respawnDeck = true, shuffleDeck = false })
    local innovationArchive = Setup.SetupDeck({ expansions = expansions, deck = "Innovations", name = "Innovation Archive", location = "Innovation Archive", rotation = FACE_DOWN, resetArchive = false, respawnDeck = false, shuffleDeck = false, remove = params.campaign.removedInnovations })
    local settlementLocationDeck = Setup.SetupDeck({ expansions = expansions, deck = "Settlement Locations", location = "Settlement Location Deck", resetArchive = false, respawnDeck = false, shuffleDeck = false })

    Archive.Take({ name = "Starting Gear", type = "Gear", location = "Starting Gear", rotation = FACE_DOWN })
    Archive.Take({ name = "Promo Gear", type = "Gear", location = "Promo Gear", rotation = FACE_DOWN })

    Setup.SetupInnovationDeck(innovationArchive, params.innovationDeck or params.campaign.startingInnovationDeck)
    Archive.CleanUpContainers()

    Setup.SetupPrinciples(innovationArchive, params.principles or params.campaign.startingPrinciples)
    Setup.SetupInnovations(innovationArchive, params.innovations or params.campaign.startingInnovations)
    Setup.SetupWeaponMasteries(params.weaponMasteries)
    Setup.SetupSettlementResources(params.settlementResources)
    Setup.SetupSettlementLocations(settlementLocationDeck, params.settlementLocations or params.campaign.startingSettlementLocations)
    Setup.SetupGear(params.settlementGear, params.playerGear or Setup.DEFAULT_PLAYER_GEAR)
    Setup.SetupReferences(params.campaign.references)
    Setup.SetupCustomSpawns(params.campaign.customSpawns)

    Timeline.Import(params.timeline or Setup.BuildTimelineImportData(params.expansions, params.campaign))

    Population.Import(params.population or Setup.DEFAULT_POPULATION)
    if not params.population then
        for i = 1, 4 do
            Population.CreateAndLinkSurvivorSheet(Population.SurvivorForId(i), i)
        end
    end

    Archive.CleanUpContainers()

    Setup.enabledExpansions = {}
    for _, expansion in ipairs(expansions) do
        Setup.enabledExpansions[expansion] = true
    end
    Setup.campaign = params.campaign

    Log.Broadcastf("Campaign setup complete.")
end

---------------------------------------------------------------------------------------------------

function Setup.Clean()
    for i = 1, 4 do
        Location.Get("Player "..i.." Board"):BoxClean({ tags = { "Card", "Deck", "Token" }})
    end
    Location.Get("Deck Board"):BoxClean({ tags = { "Card", "Deck" }, ignoreTypes = { "Monster Resources" }, })
    Location.Get("Terrain"):BoxClean({ tags = { "Card", "Deck" } })
    Location.Get("Settlement Events"):BoxClean({ tags = { "Card", "Deck" } })
    Location.Get("Settlement Board"):BoxClean({ tags = { "Card", "Deck" } })
    Location.Get("Settlement Location Deck"):BoxClean({ tags = { "Card", "Deck" } })
    for _, reference in ipairs({
        "Age Reference",
        "Intimacy Reference",
        "Bold Reference",
        "Insight Reference",
        "Misc Reference",
    }) do
        Location.Get(reference):BoxClean({ tags = { "Tile", "Card" }, types = { "Reference", "Abilities" } })   -- concession for DK constellations
    end
    Location.Get("Hunt Events"):BoxClean({ tags = { "Card", "Deck" } })
end

---------------------------------------------------------------------------------------------------

function Setup.SetupDeck(params)
    local deck = params.deck
    local location = Location.Get(params.location or deck)
    local type = params.type or deck
    local name = params.name or deck

    local sources = {}
    for _, expansion in ipairs(params.expansions) do
        if expansion.components and expansion.components[deck] then
            table.insert(sources, Action.ArchiveSource(expansion.components[deck], type))
        end
    end

    if #sources == 0 then
        Log.Debugf("No expansions have %s, skipping", deck)
        return
    end

    Log.Debugf("Setting up %s deck", deck)

    local deckContainer = Action.CreateDeck({ sources = sources, name = name, type = type, location = location, rotation = params.rotation })

    if params.remove then
        deckContainer:Delete(params.remove)
    end

    if params.resetArchive then
        local archive = NamedObject.Get(deck.." Archive")
        archive.reset()
        archive.putObject(deckContainer.object)

        if params.respawnDeck then
            deckContainer = Container(archive.takeObject({
                position = location:Center(),
                rotation = params.rotation or FACE_UP,
                smooth   = false,
            }))
        end
    end

    if params.shuffleDeck then
        deckContainer:Shuffle()
    end

    return deckContainer
end

---------------------------------------------------------------------------------------------------

Setup.PRINCIPLE_CARDS = {
    ["Principle: Death"]      = { "Cannibalize - Death Principle", "Graves - Death Principle" },
    ["Principle: New Life"]   = { "Protect the Young - New Life Principle", "Survival of the Fittest - New Life Principle" },
    ["Principle: Society"]    = { "Accept Darkness - Society Principle", "Collective Toil - Society Principle" },
    ["Principle: Conviction"] = { "Barbaric - Conviction Principle", "Romantic - Conviction Principle" },
}

function Setup.SetupPrinciples(innovationArchive, principles)
    local addedPrinciples = {}
    for _, principle in ipairs(principles or {}) do
        local name, location = principle.name, principle.location
        if innovationArchive:Take({ name = name, type = "Innovations", location = location, allowMissing = true }) then
            Log.Debugf("Added '%s' at '%s'", name, location)
        else
            Log.Errorf("Couldn't find '%s'", name)
        end
        addedPrinciples[location] = true
    end

    for principle, cards in pairs(Setup.PRINCIPLE_CARDS) do
        if not addedPrinciples[principle] then
            Log.Debugf("Building '%s' deck", principle)
            local sources = {}
            for _, card in ipairs(cards) do
                table.insert(sources, Action.ContainerSource(innovationArchive, card, "Innovations"))
            end
            Action.CreateDeck({ sources = sources, name = principle, type = "Innovations", location = principle, rotation = FACE_DOWN })
        end
    end
end

---------------------------------------------------------------------------------------------------

function Setup.SetupInnovationDeck(innovationArchive, innovationDeck)
    if not innovationDeck or #innovationDeck == 0 then
        return Log.Printf("Skipping empty innovation deck")
    end

    local sources = {}
    for _, card in ipairs(innovationDeck) do
        table.insert(sources, Action.ContainerSource(innovationArchive, card, "Innovations"))
    end
    local deck = Action.CreateDeck({
        sources = sources,
        name = "Innovation Deck",
        type = "Innovations",
        location = "Innovation Deck",
        rotation = FACE_DOWN,
        allowMissing = true,
    })
    deck:Shuffle()
    Log.Printf("Built innovation deck")

    return deck
end

---------------------------------------------------------------------------------------------------

function Setup.SetupInnovations(innovationArchive, innovations)
    Log.Debugf("Setting up innovations %s", innovations)

    for _, data in ipairs(innovations or {}) do
        local name, location = data.name, data.location
        if innovationArchive:Take({ name = name, type = "Innovations", location = location, allowMissing = true }) then
            Log.Printf("Added innovation '%s' at '%s'", name, location)
        else
            Log.Errorf("Couldn't find innovation '%s'", name)
        end
    end
end

---------------------------------------------------------------------------------------------------

function Setup.SetupWeaponMasteries(weaponMasteries)
    for _, data in ipairs(weaponMasteries or {}) do
        local name, location = data.name, data.location
        if Archive.Take({ archive = "Weapon Proficiencies Archive", name = name, type = "Weapon Proficiencies", location = location, allowMissing = true }) then
            Log.Printf("Added weapon mastery '%s' at '%s'", name, location)
        else
            Log.Errorf("Couldn't find weapon mastery '%s'", name)
        end
    end
end

---------------------------------------------------------------------------------------------------

function Setup.SetupSettlementResources(settlementResources)
    local cache = {}
    for _, data in ipairs(settlementResources or {}) do
        local name, type, location = data.name, data.type, data.location
        if Setup.SpawnWithCache(cache, { archive = type.." Archive", name = name, type = type, location = location, allowMissing = true }) then
            Log.Printf("Added resource '%s' at '%s'", name, location)
        else
            Log.Errorf("Couldn't find resource '%s'", name)
        end
    end
end

---------------------------------------------------------------------------------------------------

function Setup.SetupSettlementLocations(settlementLocationDeck, settlementLocations)
    for _, data in ipairs(settlementLocations or {}) do
        local name, location = data.name, data.location
        if settlementLocationDeck:Take({ name = name, type = "Settlement Locations", location = location, allowMissing = true }) then
            Log.Printf("Added settlement location '%s' at '%s'", name, location)
        else
            Log.Errorf("Couldn't find settlement location '%s'", name)
        end
    end
end

---------------------------------------------------------------------------------------------------

function Setup.SetupGear(settlementGear, playerGear)
    local cache = {}

    for _, data in ipairs(settlementGear or {}) do
        local name, location = data.name, data.location
        if Setup.SpawnWithCache(cache, { archive = "All Gear Archive", name = name, type = "Gear", location = location, allowMissing = true }) then
            Log.Printf("Added settlement gear '%s' at '%s'", name, location)
        else
            Log.Errorf("Couldn't find settlement gear '%s'", name)
        end
    end

    for playerNumber = 1, 4 do
        local armorSetData = playerGear[playerNumber].armorSet
        if armorSetData then
            local name = armorSetData.name
            local location = "Player "..playerNumber.." Armor Set"
            if Setup.SpawnWithCache(cache, { archive = "Armor Sets Archive", name = name, type = "Armor Sets", location = location, allowMissing = true }) then
                Log.Printf("Added armor set '%s' at '%s'", name, location)
            else
                Log.Errorf("Couldn't find armor set '%s'", name)
            end
        end

        for _, data in ipairs(playerGear[playerNumber].gear  or {}) do
            local name, location = data.name, data.location
            if Setup.SpawnWithCache(cache, { archive = "All Gear Archive", name = name, type = "Gear", location = location, allowMissing = true }) then
                Log.Printf("Added gear '%s' at '%s'", name, location)
            else
                Log.Errorf("Couldn't find gear '%s'", name)
            end
        end
    end
end

-------------------------------------------------------------------------------------------------

function Setup.SetupReferences(references)
    for _, data in ipairs(references) do
        local name, location = data.name, data.location
        Log.Debugf("Adding reference %s at %s", name, location)
        -- height 0 because we lock these immediately after spawning
        Archive.Take({ name = name, type = "Reference", location = location, height = 0, spawnFunc = function(spawnedObject)
            spawnedObject.setLock(true)
        end })
    end
end

---------------------------------------------------------------------------------------------------

function Setup.SetupCustomSpawns(customSpawns)
    for _, customSpawn in ipairs(customSpawns or {}) do
        Archive.Take(customSpawn)
    end
end

---------------------------------------------------------------------------------------------------

function Setup.SetupArchiveOverrides(expansions)
    -- revert everything
    for _, expansion in ipairs(Setup.expansions) do
        local overrides = expansion.archiveOverrides
        if overrides then
            Log.Debugf("Reverting archive entry overrides for %s", expansion.name)
            Archive.RegisterEntries({ archive = overrides.oldArchive, entries = overrides.entries, allowOverrides = true })
        end
    end

    -- apply selected expansions
    for _, expansion in ipairs(expansions) do
        local overrides = expansion.archiveOverrides
        if overrides then
            Log.Debugf("Overriding archive entries for %s", expansion.name)
            Archive.RegisterEntries({ archive = overrides.newArchive, entries = overrides.entries, allowOverrides = true })
        end
    end
end

---------------------------------------------------------------------------------------------------

function Setup.SpawnWithCache(cache, params)
    local key = params.name.."_"..params.type
    local existing = cache[key]
    if existing then
        params.object = existing
        return Action.Clone(params)
    end
    local object = Archive.Take(params)
    if object then
        cache[key] = object
    end
    return object
end

---------------------------------------------------------------------------------------------------

function Setup.BuildTimelineImportData(expansions, campaign)
    -- first aggregate remove/replace
    local removeEvents = {}
    for year = 1, 30 do removeEvents[year] = {} end
    local replaceNemeses = {}
    for _, expansion in ipairs(expansions) do
        local removeEvent = expansion.removeTimelineEvent
        if removeEvent then
            Log.Debugf("Setting up removed event: [%d] %s", removeEvent.year, removeEvent.name)
            removeEvents[removeEvent.year][removeEvent.name] = true
        end

        local replaceNemesis = expansion.replaceNemesis
        if replaceNemesis then
            Log.Debugf("Setting up replacement nemesis: %s -> %s", replaceNemesis.nemesis, replaceNemesis.replacement)
            replaceNemeses[replaceNemesis.nemesis] = replaceNemesis.replacement
        end
    end

    local events = {}
    Util.AppendArray(events, campaign.timeline)
    for _, expansion in ipairs(expansions) do
        Util.AppendArray(events, expansion.timelineEvents or {})
    end

    local timeline = {}
    for year = 1, Timeline.MAX_YEARS do
        timeline[year] = { events = {} }
    end

    local function FindFreeEvent(year)
        local yearData = timeline[year]
        for i = 1, Timeline.MAX_YEAR_EVENTS do
            if not yearData.events[i] then
                return i
            end
        end
        return nil
    end

    for _, event in ipairs(events) do
        local year, name, type = event.year, event.name, event.type

        if removeEvents[year][name] then
            Log.Debugf("Skipping removed event [%d] %s", year, name)

        elseif event.notCampaign == campaign.name then
            Log.Debugf("Skipping timeline event %s for campaign %s", name, campaign.name)

        elseif type == "RulebookEvent" then
            local eventNum = FindFreeEvent(year)
            if eventNum then
                timeline[year].events[eventNum] = { name = name, type = "RulebookEvent" }
            else
                Log.Errorf("Couldn't add event '%s' to timeline year %d; no more space. Please mark it on the settlement notes.", name, year)
            end

        elseif type == "ShowdownEvent" then
            local monster, level = event.monster, event.level
            if monster and replaceNemeses[monster] then
                monster = replaceNemeses[monster]
                Log.Debugf("Adding replacement showdown [%d] %s", year, name)
            end
            if not timeline[year].events[Timeline.MAX_YEAR_EVENTS] then
                timeline[year].events[Timeline.MAX_YEAR_EVENTS] = { type = "ShowdownEvent", monster = monster, level = level, nemesis = true }
            else
                Log.Errorf("Couldn't add showdown event %s/%s to timeline year %d; another event is already in the last slot. Please mark it on the settlement notes.", monster, level, year)
            end

        else
            assert(CheckFail("Unrecognized event type %s for event %s", type, event))
        end
    end

    local data = {
        survivalActions = campaign.survivalActions,
        milestones = campaign.milestones,
        timeline = timeline,
    }
    return data
end

---------------------------------------------------------------------------------------------------

function Setup.ShowUi()
    Log.Debugf("Showing Setup UI")
    Setup.ui.activeTab.panel:Show()
    Setup.ui.open = true
end

---------------------------------------------------------------------------------------------------

function Setup.HideUi()
    Log.Debugf("Hiding Setup UI")
    Setup.ui.activeTab.panel:Hide()
    Setup.ui.open = false
end

---------------------------------------------------------------------------------------------------

function Setup.IsUiOpen()
    return Setup.ui.open
end

---------------------------------------------------------------------------------------------------

function Setup.HasDeck(deck)
    for expansion, _ in pairs(Setup.enabledExpansions) do
        if expansion.components[deck] then
            return true
        end
    end
    return false
end


---------------------------------------------------------------------------------------------------

function Setup.EnabledExpansions()
    return Setup.enabledExpansions
end

---------------------------------------------------------------------------------------------------

return {
    Init = Setup.Init,
    Save = Setup.Save,
    HasDeck = Setup.HasDeck,
    EnabledExpansions = Setup.EnabledExpansions,
    ShowUi = Setup.ShowUi,
    HideUi = Setup.HideUi,
    IsUiOpen = Setup.IsUiOpen,
}
