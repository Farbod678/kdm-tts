require("Kdm/Check")
local Log = require("Kdm/Log").ForPackage("Terrain")

---------------------------------------------------------------------------------------------------

local Terrain_data = {}
local Terrain_tileSizes = {}

---------------------------------------------------------------------------------------------------

local function Terrain_Init(saveState, expansions)
    for _, expansion in ipairs(expansions) do
        for terrain, data in pairs(expansion.terrain or {}) do
            assert(Check(Terrain_data[terrain] == nil, "Terrain %s is already registered with data %s", terrain, Terrain_data[terrain]))
            Terrain_data[terrain] = data
        end

        for terrainTile, size in pairs(expansion.terrainTileSizes or {}) do
            assert(Check(Terrain_tileSizes[terrainTile] == nil, "Terrain tile %s is already registered with size %s", terrainTile, Terrain_tileSizes[terrainTile]))
            Terrain_tileSizes[terrainTile] = size
        end
    end
end

---------------------------------------------------------------------------------------------------

local function Terrain_Data(terrain)
    local data = Terrain_data[terrain]
    assert(Check(data, "Unrecognized terrain '%s", terrain))
    return data
end

---------------------------------------------------------------------------------------------------

local function Terrain_TileSize(terrainTile)
    local tileSize = Terrain_tileSizes[terrainTile]
    assert(Check(tileSize, "Unrecognized terrain tile '%s", terrainTile))
    return tileSize
end

---------------------------------------------------------------------------------------------------

return {
    Init = Terrain_Init,
    Data = Terrain_Data,
    TileSize = Terrain_TileSize,
}
