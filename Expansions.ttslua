local Assert = require("Kdm/Assert")
local Util = require("Kdm/Util")
local Log = require("Kdm/Log").ForPackage("Expansions")
local Guids = require("Kdm/Guids")
local Archive = require("Kdm/Archive")
local Locations = require("Kdm/Locations")
local Script = require("Kdm/Script")

---------------------------------------------------------------------------------------------------

local Expansions = {
    expansions = {
        ["Core"] = {
            ["Innovations"] = "Innovation Archive",
            ["Abilities"] = "Core Abilities",
            ["Fighting Arts"] = "Core Fighting Arts",
            ["Secret Fighting Arts"] = "Core Secret Fighting Arts",
            ["Disorders"] = "Core Disorders",
            ["Severe Injuries"] = "Core Severe Injuries",
            ["Weapon Specializations/Masteries"] = "Core Weapon Specializations/Masteries",
            ["Armor Sets"] = "Core Armor Sets",
            ["Vermin"] = "Core Vermin",
            ["Strange Resources"] = "Core Strange Resources",
            ["Basic Resources"] = "Core Basic Resources",
            ["Hunt Events"] = "Core Hunt Events",
            ["Terrain"] = "Core Terrain",
            ["Settlement Events"] = "Core Settlement Events",
            ["Rare Gear"] = "Core Rare Gear",
        },
        ["Dragon King"] = {
            ["Innovations"] = "Dragon King Innovations",
            ["Abilities"] = "Dragon King Abilities",
            ["Fighting Arts"] = "Dragon King Fighting Arts",
            ["Secret Fighting Arts"] = "Dragon King Secret Fighting Arts",
            ["Disorders"] = "Dragon King Disorders",
            ["Weapon Specializations/Masteries"] = "Scythe",
            ["Armor Sets"] = "Dragon Armor",
            ["Strange Resources"] = "Dragon King Strange Resources",
            ["Terrain"] = "Dragon King Terrain",
            ["Rare Gear"] = "Dragon King Rare Gear",
        },
        ["Dung Beetle Knight"] = {
            ["Innovations"] = "Dung Beetle Knight Innovations",
            ["Fighting Arts"] = "Dung Beetle Knight Fighting Arts",
            ["Secret Fighting Arts"] = "Beetle Strength",
            ["Disorders"] = "Dung Beetle Knight Disorders",
            ["Strange Resources"] = "Dung Beetle Knight Strange Resources",
            ["Tactics"] = "Dung Beetle Knight Tactics",
            ["Armor Sets"] = "Rolling Armor",
            ["Terrain"] = "Resin Dung Ball",
            ["Rare Gear"] = "Dung Beetle Knight Rare Gear",
        },
        ["Flower Knight"] = {
            ["Innovations"] = "Petal Spiral - Forbidden Dance Consequence",
            ["Fighting Arts"] = "Otherworldly Luck",
            ["Secret Fighting Arts"] = "Flower Knight Secret Fighting Arts",
            ["Disorders"] = "Flower Knight Disorders",
            ["Tactics"] = "Flower Knight Tactics",
            ["Terrain"] = "Flower Patches",
            ["Rare Gear"] = "Flower Knight Rare Gear",
        },
        ["Gorm"] = {
            ["Innovations"] = "Gorm Innovations",
            ["Fighting Arts"] = "Gorm Fighting Arts",
            ["Secret Fighting Arts"] = "Immovable Object",
            ["Disorders"] = "Gorm Disorders",
            ["Armor Sets"] = "Gorment Armor",
            ["Strange Resources"] = "Gorm Strange Resources",
            ["Settlement Events"] = "Gorm Climate",
        },
        ["Lion God"] = {
            ["Innovations"] = "The Knowledge Worm",
            ["Fighting Arts"] = "Lion God Fighting Arts",
            ["Secret Fighting Arts"] = "Lion God Secret Fighting Arts",
            ["Disorders"] = "Lion God Disorders",
            ["Strange Resources"] = "Lion God Strange Resources",
            ["Terrain"] = "Lion God Terrain",
            ["Rare Gear"] = "Lion God Rare Gear",
        },
        ["Lion Knight"] = {
            ["Innovations"] = "Lion Knight Innovations",
            ["Fighting Arts"] = "Lion Knight Fighting Arts",
            ["Secret Fighting Arts"] = "Lion Knight Secret Fighting Arts",
            ["Disorders"] = "Lion Knight Disorders",
            ["Tactics"] = "Lion Knight Tactics",
            ["Armor Sets"] = "Lion Knight Armor Sets",
            ["Rare Gear"] = "Lion Knight Rare Gear",
        },
        ["Lonely Tree"] = {
            ["Hunt Events"] = "Object of Desire",
            ["Abilities"] = "Lonely Tree Abilities",
            ["Strange Resources"] = "Lonely Tree Strange Resources",
            ["Terrain"] = "The Lonely Tree",
        },
        ["Manhunter"] = {
            ["Innovations"] = "Manhunter Innovations",
            ["Fighting Arts"] = "Manhunter Fighting Arts",
            ["Secret Fighting Arts"] = "Eternal Will",
            ["Strange Resources"] = "Manhunter Strange Resources",
            ["Rare Gear"] = "Manhunter Rare Gear",
        },
        ["Slenderman"] = {
            ["Innovations"] = "Dark Water Research",
            ["Fighting Arts"] = "Slenderman Fighting Arts",
            ["Secret Fighting Arts"] = "Clarity of Darkness",
            ["Disorders"] = "Slenderman Disorders",
            ["Strange Resources"] = "Slenderman Strange Resources",
            ["Settlement Events"] = "Slenderman Settlement Events",
            ["Rare Gear"] = "Slenderman Rare Gear",
        },
        ["Spidicules"] = {
            ["Innovations"] = "Spidicules Innovations",
            ["Fighting Arts"] = "Spidicules Fighting Arts",
            ["Secret Fighting Arts"] = "Spidicules Secret Fighting Arts",
            ["Disorders"] = "Spidicules Disorders",
            ["Armor Sets"] = "Silk Armor",
            ["Strange Resources"] = "Spidicules Strange Resources",
            ["Terrain"] = "Spidicules Terrain",
            ["Settlement Events"] = "Spidicules Settlement Events",
            ["Rare Gear"] = "Spidicules Rare Gear",
        },
        ["Sunstalker"] = {
            ["Innovations"] = "Sunstalker Innovations",
            ["Abilities"] = "Sunstalker Abilities",
            ["Fighting Arts"] = "Sunstalker Fighting Arts",
            ["Secret Fighting Arts"] = "Sunstalker Secret Fighting Arts",
            ["Disorders"] = "Sunstalker Disorders",
            ["Weapon Specializations/Masteries"] = "Katana",
            ["Armor Sets"] = "Cycloid Scale Armor",
            ["Strange Resources"] = "Sunstalker Strange Resources",
            ["Terrain"] = "2 Salt Sculptures",
            ["Rare Gear"] = "Sunstalker Rare Gear",
        },
        ["Community Edition"] = {
        },
    },

    objectData = {
        ["Innovations"] = {},
        ["Abilities"] = {},
        ["Fighting Arts"] = {},
        ["Secret Fighting Arts"] = {},
        ["Disorders"] = {},
        ["Severe Injuries"] = {},
        ["Tactics"] = {},
        ["Weapon Specializations/Masteries"] = {},
        ["Armor Sets"] = {},
        ["Vermin"] = {},
        ["Strange Resources"] = {},
        ["Basic Resources"] = {},
        ["Terrain"] = {},
        ["Hunt Events"] = {},
        ["Rare Gear"] = {},
        ["Settlement Events"] = {},
    },

    defaultIndex = {
        { name = "Core Rules", type = "Rulebook", archive = "Kingdom Death: Monster Archive" },
        { name = "Innovation Archive", type = "Innovations", archive = "Kingdom Death: Monster Archive" },
        { name = "Core Abilities", type = "Abilities", archive = "Kingdom Death: Monster Archive" },
        { name = "Core Secret Fighting Arts", type = "Secret Fighting Arts", archive = "Kingdom Death: Monster Archive" },
        { name = "Core Weapon Specializations/Masteries", type = "Weapon Specializations/Masteries", archive = "Kingdom Death: Monster Archive" },
        { name = "Core Armor Sets", type = "Armor Sets", archive = "Kingdom Death: Monster Archive" },
        { name = "Core Strange Resources", type = "Strange Resources", archive = "Kingdom Death: Monster Archive" },
        { name = "Core Settlement Events", type = "Settlement Events", archive = "Kingdom Death: Monster Archive" },
        { name = "Core Rare Gear", type = "Gear", archive = "Kingdom Death: Monster Archive" },
        { name = "Promo Gear", type = "Gear", archive = "Kingdom Death: Monster Archive" },
        { name = "Barber Surgeon Gear", type = "Gear", archive = "Kingdom Death: Monster Archive" },
        { name = "Blacksmith Gear", type = "Gear", archive = "Kingdom Death: Monster Archive" },
        { name = "Bone Smith Gear", type = "Gear", archive = "Kingdom Death: Monster Archive" },
        { name = "Catarium Gear", type = "Gear", archive = "Kingdom Death: Monster Archive" },
        { name = "Giga-Catarium Gear", type = "Gear", archive = "Kingdom Death: Monster Archive" },
        { name = "Exhausted Lantern Hoard Gear", type = "Gear", archive = "Kingdom Death: Monster Archive" },
        { name = "Leather Worker Gear", type = "Gear", archive = "Kingdom Death: Monster Archive" },
        { name = "Mask Maker Gear", type = "Gear", archive = "Kingdom Death: Monster Archive" },
        { name = "Plumery Gear", type = "Gear", archive = "Kingdom Death: Monster Archive" },
        { name = "Skinnery Gear", type = "Gear", archive = "Kingdom Death: Monster Archive" },
        { name = "Stone Circle Gear", type = "Gear", archive = "Kingdom Death: Monster Archive" },
        { name = "Weapon Crafter Gear", type = "Gear", archive = "Kingdom Death: Monster Archive" },
    },

    communityEditionIndex = {
        { name = "Core Rules", type = "Rulebook", archive = "Community Edition Archive" },
        { name = "Innovation Archive", type = "Innovations", archive = "Community Edition Archive" },
        { name = "Core Abilities", type = "Abilities", archive = "Community Edition Archive" },
        { name = "Core Secret Fighting Arts", type = "Secret Fighting Arts", archive = "Community Edition Archive" },
        { name = "Core Weapon Specializations/Masteries", type = "Weapon Specializations/Masteries", archive = "Community Edition Archive" },
        { name = "Core Armor Sets", type = "Armor Sets", archive = "Community Edition Archive" },
        { name = "Core Strange Resources", type = "Strange Resources", archive = "Community Edition Archive" },
        { name = "Core Settlement Events", type = "Settlement Events", archive = "Community Edition Archive" },
        { name = "Core Rare Gear", type = "Gear", archive = "Community Edition Archive" },
        { name = "Promo Gear", type = "Gear", archive = "Community Edition Archive" },
        { name = "Barber Surgeon Gear", type = "Gear", archive = "Community Edition Archive" },
        { name = "Blacksmith Gear", type = "Gear", archive = "Community Edition Archive" },
        { name = "Bone Smith Gear", type = "Gear", archive = "Community Edition Archive" },
        { name = "Catarium Gear", type = "Gear", archive = "Community Edition Archive" },
        { name = "Giga-Catarium Gear", type = "Gear", archive = "Community Edition Archive" },
        { name = "Exhausted Lantern Hoard Gear", type = "Gear", archive = "Community Edition Archive" },
        { name = "Leather Worker Gear", type = "Gear", archive = "Community Edition Archive" },
        { name = "Mask Maker Gear", type = "Gear", archive = "Community Edition Archive" },
        { name = "Plumery Gear", type = "Gear", archive = "Community Edition Archive" },
        { name = "Skinnery Gear", type = "Gear", archive = "Community Edition Archive" },
        { name = "Stone Circle Gear", type = "Gear", archive = "Community Edition Archive" },
        { name = "Weapon Crafter Gear", type = "Gear", archive = "Community Edition Archive" },
    },

    enabledExpansions = { ["Core"] = true },
}

for name, data in pairs(Expansions.objectData) do
    data.type = name
    data.location = name
    data.rotation = Script.FACE_DOWN
    data.rename = name
    data.reset = true
    data.respawn = true
    data.shuffle = false
end

Expansions.objectData["Innovations"].location = "Innovation Archive"
Expansions.objectData["Innovations"].rename = "Innovation Archive"
Expansions.objectData["Innovations"].reset = false
Expansions.objectData["Innovations"].respawn = false
Expansions.objectData["Innovations"].shuffle = false
Expansions.objectData["Fighting Arts"].shuffle = true
Expansions.objectData["Secret Fighting Arts"].shuffle = true
Expansions.objectData["Disorders"].shuffle = true
Expansions.objectData["Tactics"].shuffle = true
Expansions.objectData["Vermin"].shuffle = true
Expansions.objectData["Basic Resources"].shuffle = true
Expansions.objectData["Rare Gear"].type = "Gear"
Expansions.objectData["Settlement Events"].shuffle = false
Expansions.objectData["Settlement Events"].reset = false
Expansions.objectData["Settlement Events"].shuffle = true
Expansions.objectData["Settlement Events"].respawn = false

---------------------------------------------------------------------------------------------------

function Expansions.GetAllExpansions()
    local expansions = {}
    for expansion, _ in pairs(Expansions.expansions) do
        table.insert(expansions, expansion)
    end
    return expansions
end

---------------------------------------------------------------------------------------------------

function Expansions.GetEnabledExpansions()
    return Expansions.enabledExpansions
end

---------------------------------------------------------------------------------------------------

function Expansions.HasDeck(obj)
    for expansion, _ in pairs(Expansions.enabledExpansions) do
        if Expansions.expansions[expansion][obj] then
            return true
        end
    end
    return false
end

---------------------------------------------------------------------------------------------------

function Expansions.SetExpansions(expansions)
    Expansions.SetExpansionsExpansionsArg = expansions
    startLuaCoroutine(self, "Expansions_SetExpansionsCoroutine")
end

function Expansions_SetExpansionsCoroutine()
    local expansions = Expansions.SetExpansionsExpansionsArg
    Assert.Tab(expansions)
    for expansion, value in pairs(expansions) do
        Assert(expansion == "Community Edition" or Expansions.expansions[expansion], "Unrecognized expansion: %s", expansion)
    end

    -- Always include core
    expansions["Core"] = true

    -- Special case for Community Edition: it's just a re-index of the script archive before the actual deck construction
    local communityEditionEnabled = false
    if expansions["Community Edition"] then
        expansions["Community Edition"] = nil
        communityEditionEnabled = true
        Archive.Set(Expansions.communityEditionIndex)
        Log.Printf("Adding Community Edition...")
        local defaultIntimacyReference = getObjectFromGUID("5556e1")
        if defaultIntimacyReference then
            defaultIntimacyReference.setState(2)
        end
    else
        local ceIntimacyReference = getObjectFromGUID("9bdc6a")
        if ceIntimacyReference then
            ceIntimacyReference.setState(1)
        end
        Archive.Set(Expansions.defaultIndex)
    end


    local script = Script.Create("Clean Area", false)
    local cleanupStage = Script.Stage(script, "Cleanup")
    for name, data in pairs(Expansions.objectData) do
        Script.CleanAction(cleanupStage, {
            from = data.location,
            types = { data.type },
            tags = { "Deck", "Card", "Bag" },
            ignoreBlocking = false,
        })
    end
    local _, blockingObj, locationBlocked = Script.Run(script)
    if blockingObj != nil then
        Log.Broadcastf("Found an object %s(%s) blocking %s. Please move it out of the way and try again.", blockingObj.getName(), blockingObj.tag, locationBlocked)
        return 1
    end

    -- Scan for existing innovations *after* cleaning the innovation board but *before* spawning the new deck
    Log.Debugf("Scanning for existing innovations")
    local settlementBoard = Guids.GetObject("Settlement Board")
    local topLeft = settlementBoard.positionToWorld({ -7.410884, 0, -0.816186 })
    local bottomRight = settlementBoard.positionToWorld({ 7.413056, 0,  1.259128 })
    local hits = Physics.cast({
        origin    = { (topLeft[1] + bottomRight[1]) / 2, 10, (topLeft[3] + bottomRight[3]) / 2 },
        direction = { 0, -1, 0 },
        type      = 3,
        size      = {
            math.abs(topLeft[1] - bottomRight[1]) + LOCATIONS_CARD_SIZE.x,
            10,
            math.abs(topLeft[3] - bottomRight[3]) + LOCATIONS_CARD_SIZE.z,
        },
    })

    local existingInnovations = {}
    for _, hit in ipairs(hits) do
        local hitObj = hit.hit_object
        if hitObj.tag == "Deck" then
            Log.Debugf("Found deck %s (%s)", hitObj.getName(), hitObj.getGUID())
            for _, card in ipairs(hitObj.getObjects()) do
                if card.gm_notes == "Innovations" then
                    Log.Debugf("Found existing innovation %s (%s) in %s (%s)", card.name, card.guid, hitObj.getName(), hitObj.getGUID())
                    existingInnovations[card.name] = true
                end
            end
        elseif hitObj.tag == "Card" and hitObj.getGMNotes() == "Innovations" then
            Log.Debugf("Found existing innovation %s (%s) on settlement board", hitObj.getName(), hitObj.getGUID())
            existingInnovations[hitObj.getName()] = true
        end
    end

    local script = Script.Create("Setup Expansions", false)

    -- The first time we spawn a add an expansion's objects, we save it to an ID
    -- Subsequent adds will directly PutAction() to this id to merge decks
    local objectIds = {}
    for expansion, enabled in pairs(expansions) do
        if enabled then
            for object, names in pairs(Expansions.expansions[expansion]) do
                Log.Debugf("Adding stage for %s -> %s", object, Util.TabStr(names))

                if type(names) != "table" then
                    names = { names }
                end

                local addExpansionObjectStage = Script.Stage(script, "Add "..expansion.." "..object)
                Script.PrintAction(addExpansionObjectStage, "Adding %s %s...", expansion, object)

                local data = Expansions.objectData[object]
                for _, name in ipairs(names) do
                    if objectIds[object] then
                        Script.TakeAction(addExpansionObjectStage, {
                            name = name,
                            type = data.type,
                            to = "id:"..objectIds[object],
                            rotation = data.rotation,
                        })
                    else
                        Script.TakeAction(addExpansionObjectStage, {
                            name = name,
                            type = data.type,
                            to = data.location,
                            rotation = data.rotation,
                            saveId = object,
                        })
                        objectIds[object] = object
                    end
                    Script.WaitAction(addExpansionObjectStage, 5)
                end
            end
        end
    end

    local waitSettleStage = Script.Stage(script, "Wait for Decks to Settle")
    Script.PrintAction(waitSettleStage, "Waiting for decks to settle before resetting...")
    Script.WaitAction(waitSettleStage, 60)

    local nameDecksStage = Script.Stage(script, "Name Decks")
    for object, data in pairs(Expansions.objectData) do
        if objectIds[object] and data.rename then
            Script.NameAction(nameDecksStage, {
                from = data.location,
                name = data.rename,
                gmNotes = data.type,
            })
        end
    end

    local resetArchivesStage = Script.Stage(script, "Reset Archive")
    Script.PrintAction(resetArchivesStage, "Resetting all archives...")
    for object, data in pairs(Expansions.objectData) do
        if data.reset then
            -- reset the archives regardless of whether a obj was built
            Script.ResetAction(resetArchivesStage, {
                from = "obj:"..object.." Archive",
            })
        end
    end

    local putDecksStage = Script.Stage(script, "Put Deck into Archive")
    for object, data in pairs(Expansions.objectData) do
        if objectIds[object] and data.reset then
            Script.PrintAction(putDecksStage, "Saving %s to archive...", object)
            Script.PutAction(putDecksStage, {
                from = data.location,
                to = "obj:"..object.." Archive",
            })
        end
    end

    for object, data in pairs(Expansions.objectData) do
        if objectIds[object] and data.respawn then
            local resetStage = Script.Stage(script, "Resetting %s", object)
            Script.PrintAction(resetStage, "Respawning %s...", object)
            Script.TakeAction(resetStage, {
                name = object,
                type = data.type,
                to = data.location,
                rotation = data.rotation,
            })
        end
    end

    local shuffleStage = Script.Stage(script, "Shuffling Expansions.objectData", obj)
    for object, data in pairs(Expansions.objectData) do
        if objectIds[object] and data.shuffle then
            Script.ShuffleAction(shuffleStage, { from = data.location })
        end
    end

    local savedObjects = Script.Run(script)
    Assert(savedObjects)

    local innovationArchive = savedObjects["id:Innovations"]
    Assert(innovationArchive, "No saved object with id 'id:Innovation Archive'")
    Log.Debugf("Removing existing innovations from innovation archive")
    for _, obj in ipairs(innovationArchive.getObjects()) do
        if existingInnovations[obj.name] then
            innovationArchive.takeObject({ guid = obj.guid }).destruct()
            Log.Debugf("Removed %s (%s) from Innovation Archive (%s)", obj.name, obj.guid, innovationArchive.getGUID())
        end
    end

    Log.Broadcastf("Done adding expansions. Existing innovations and consequences have been removed from the 'Innovation Archive'.")

    Expansions.enabledExpansions = expansions
    if communityEditionEnabled then
        Expansions.enabledExpansions["Community Edition"] = true
        Wait.frames(
            function() Log.Broadcastf("Please replace any existing Settlement Locations and Innovations with their Community Edition versions.") end,
            120
        )
        Wait.frames(
            function()
                Log.Broadcastf("Boxes for CE Innovations and Settlement Locations have been highlighted.")
                Util.Highlight(Guids.GetObject("Community Edition Archive"))
                Util.Highlight(Guids.GetObject("Community Edition Settlement Locations"))
            end,
            240
        )
    end

    return 1
end

---------------------------------------------------------------------------------------------------

function Expansions.Save()
    return Expansions.enabledExpansions
end

---------------------------------------------------------------------------------------------------

function Expansions.Init(saveState)
    Expansions.enabledExpansions = saveState or Expansions.enabledExpansions

    -- Special case for Community Edition: it's just a re-index of the script archive before the actual deck construction
    -- We need to do this at startup
    if Expansions.enabledExpansions["Community Edition"] then
        Log.Debugf("Reindexing Community Edition")
        Archive.Set(Expansions.communityEditionIndex)
    end

end

---------------------------------------------------------------------------------------------------

return Expansions
