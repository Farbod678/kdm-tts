local Util = require("Kdm/Util/Util")

local Trie = {}

---------------------------------------------------------------------------------------------------
-- trie multimap: maps prefixes to one or more values
-- all searches are case-insensitive

function Trie.Create()
  return {
    children = {},
    byte = nil,
    values = {},
  }
end

---------------------------------------------------------------------------------------------------

-- associates word to value, so that a subsequent Trie.Get by word (or a prefix) will include this value
function Trie.Set(trie, word, value)
  word = string.lower(word)
  local node = trie
  for i = 1, #word do
    local b = word:byte(i)
    local foundChild = nil
    for _, child in ipairs(node.children) do
      if child.byte == b then
        foundChild = child
        break
      end
    end

    if foundChild == nil then
      foundChild = {
        children = {},
        byte = b,
        values = {},
      }
      table.insert(node.children, foundChild)
    end

    node = foundChild
  end

  table.insert(node.values, value)
end

---------------------------------------------------------------------------------------------------

-- returns all values for all words starting with the word arg
function Trie.Get(trie, word)
  word = string.lower(word)
  local node = trie
  for i = 1, #word do
    local b = word:byte(i)
    local foundChild = nil
    for _, child in pairs(node.children) do
      if child.byte == b then
        foundChild = child
        break
      end
    end

    if foundChild == nil then
      return {}
    end

    node = foundChild
  end

  -- BFS down the rest of the tree and aggregate all results
  local results = {}
  local queue = {}
  table.insert(queue, node)
  while #queue > 0 do
    node = queue[#queue]
    table.remove(queue)

    for _, v in ipairs(node.values) do
      table.insert(results, v)
    end

    for _, child in pairs(node.children) do
      table.insert(queue, child)
    end
  end

  return results
end

---------------------------------------------------------------------------------------------------

function Trie.Search(trie, searchTerms)
    if searchTerms == nil or searchTerms == "" then
        return {}
    end

    -- only accept results that match all terms
    local matchIndex = {}
    local i = 1
    for term in string.gmatch(searchTerms, "%S+") do
        local termMatches = Trie.Get(trie, term)
        local termIndex = Util.Index(termMatches, "name")

        matchIndex = (i == 1) and termIndex or Util.Intersect(matchIndex, termIndex)
        i = i + 1
    end

    -- sort matches
    local sortedMatches = {}
    for _, m in pairs(matchIndex) do
        table.insert(sortedMatches, m)
    end
    table.sort(sortedMatches, function(x, y) return x.name < y.name end)

    local results = {}
    local i = 1
    while i <= #sortedMatches do
        table.insert(results, sortedMatches[i])
        i = i + 1
    end

    return results
end

---------------------------------------------------------------------------------------------------

return Trie
