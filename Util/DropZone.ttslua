require("Kdm/Util/Check")
local Log = require("Kdm/Util/Log").ForPackage("DropZone")
local Util = require("Kdm/Util/Util")
local EventManager = require("Kdm/Util/EventManager")
local SpatialIndex = require("Kdm/Util/SpatialIndex")

---------------------------------------------------------------------------------------------------

local DropZone = {}

dropZone_spatialIndex = nil
dropZone_objectZones = {}

---------------------------------------------------------------------------------------------------

function DropZone.Create(params)
    assert(CheckTab(params, "params"))
    local name, context, centerX, centerZ, width, height, dropHandler, pickUpHandler = params.name, params.context, params.centerX, params.centerZ, params.width, params.height, params.dropHandler, params.pickUpHandler
    assert(CheckStr(name, "params.name"))
    assert(CheckNum(centerX, "params.centerX"))
    assert(CheckNum(centerZ, "params.centerZ"))
    assert(CheckNum(width, "params.width"))
    assert(CheckNum(height, "params.height"))
    assert(CheckFunc(dropHandler, "params.dropHandler"))
    assert(CheckFuncOrNil(pickUpHandler, "params.pickUpHandler"))

    local left = centerX - (width / 2)
    local top = centerZ - (height / 2)
    local right = centerX + (width / 2)
    local bottom = centerZ + (height / 2)

    local dropZone = {
        name = name,
        context = context,
        dropHandler = dropHandler,
        pickUpHandler = pickUpHandler,
    }

    SpatialIndex.Set(dropZone_spatialIndex, name, left, top, right, bottom, dropZone)

    local hits = Physics.cast({
        origin    = { centerX, 50, centerZ },
        direction = { 0, -1, 0 },
        type      = 3,
        size      = { width, 10, height },
        --debug     = true,
    })
    for _, hit in ipairs(hits) do
        local hitObject = hit.hit_object
        Log.Debugf("Object %s (%s) started in %s", hitObject.getName(), hitObject.getGUID(), name)
        dropHandler(context, hitObject)

        if not dropZone_objectZones[hitObject] then
            dropZone_objectZones[hitObject] = { dropZone }
        else
            table.insert(dropZone_objectZones[hitObject], dropZone)
        end
    end

    return dropZone
end

-------------------------------------------------------------------------------------------------

local function DropZone_Drop(object, verb)
    local pos = object.getPosition()
    local dropZones = SpatialIndex.Get(dropZone_spatialIndex, pos.x, pos.z)
    if #dropZones == 0 then
        dropZone_objectZones[object] = nil
        return
    end

    local objectZones = {}
    for _, dropZone in ipairs(dropZones) do
        Log.Debugf("Object %s (%s) %s in %s", object.getName(), object.getGUID(), verb, dropZone.name)
        dropZone.dropHandler(dropZone.context, object)
        table.insert(objectZones, dropZone)
    end

    dropZone_objectZones[object] = objectZones

end

local function DropZone_OnObjectDrop(_, object) DropZone_Drop(object, "dropped") end
local function DropZone_OnObjectSpawn(object) DropZone_Drop(object, "spawned") end

---------------------------------------------------------------------------------------------------

local function DropZone_PickUp(object, verb)
    local dropZones = dropZone_objectZones[object]
    if not dropZones then
        return
    end
    for _, dropZone in ipairs(dropZones) do
        Log.Debugf("Object %s (%s) %s, removing from %s", object.getName(), object.getGUID(), verb, dropZone.name)
        if dropZone.pickUpHandler then
            dropZone.pickUpHandler(dropZone.context, object)
        end
    end

    dropZone_objectZones[object] = nil
end

local function DropZone_OnObjectPickUp(_, object) DropZone_PickUp(object, "picked up") end
local function DropZone_OnObjectEnterContainer(_, object) DropZone_PickUp(object, "entered container") end
local function DropZone_OnObjectDestroy(object) DropZone_PickUp(object, "destroyed") end

---------------------------------------------------------------------------------------------------

function DropZone.Init()
    dropZone_spatialIndex = SpatialIndex.Create(1)

    EventManager.AddHandler("onObjectDrop", DropZone_OnObjectDrop)
    EventManager.AddHandler("onObjectPickUp", DropZone_OnObjectPickUp)
    EventManager.AddHandler("onObjectEnterContainer", DropZone_OnObjectEnterContainer)
    EventManager.AddHandler("onObjectSpawn", DropZone_OnObjectSpawn)
    EventManager.AddHandler("onObjectDestroy", DropZone_OnObjectDestroy)
end

---------------------------------------------------------------------------------------------------

return DropZone
