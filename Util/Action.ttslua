local Archive = require("Kdm/Archive")
local Check = require("Kdm/Util/Check")
local Container = require("Kdm/Util/Container")
local Location = require("Kdm/Location")
local log = require("Kdm/Log").ForModule("Action")
local Util = require("Kdm/Util/Util")


---------------------------------------------------------------------------------------------------

local Action = {}
---------------------------------------------------------------------------------------------------

function Action.ArchiveSource(name, type)
    return {
        source = "Archive",
        name = name,
        type = type,
    }
end

---------------------------------------------------------------------------------------------------

function Action.ContainerSource(container, name, type)
    return {
        source = "Container",
        container = container,
        name = name,
        type = type,
    }
end

---------------------------------------------------------------------------------------------------

function Action.CreateDeck(params)
    local sources, location, rotation, allowMissing = params.sources,  Location.Get(params.location), (params.rotation or { x = 0, y = 180, z = 0 }), params.allowMissing

    local objects = {}
    for i, source in ipairs(sources) do
        local takeParams = { name = source.name, type = source.type, location = location, height = (i - 1) * 0.5, rotation = rotation, allowMissing = allowMissing }
        local object = nil
        if source.source == "Archive" then
            object = Archive.Take(takeParams)
            if not object then
                log:Errorf("Couldn't find '%s' in archive", source.name)
            end
        elseif source.source == "Container" then
            object = source.container:Take(takeParams)
            if not object then
                log:Errorf("Couldn't find '%s' in container '%s' (%s)", source.name, source.container:Name(), source.container:Guid())
            end
        else
            assert(Check.Fail("Unrecognized source: %s", source))
        end
        if object then
            table.insert(objects, object)
        end
    end

    local deckObject
    if #objects > 1 then
        deckObject = group(objects)[1]
        assert(Check(deckObject))
    else
        log:Debugf("CreateDeck only asked for one object %s (%s), so not grouping", objects[1].getName(), objects[1].getGUID())
        deckObject = objects[1]
    end

    deckObject.setName(params.name)
    deckObject.setGMNotes(params.type)
    deckObject.setPositionSmooth(location:Center(), false, true)
    deckObject.setRotation(rotation)

    log:Debugf("Created deck %s (%s) at %s", deckObject.getName(), deckObject.getGUID(), location:Name())

    return Container(deckObject)
end

---------------------------------------------------------------------------------------------------

function Action.Clone(params)
    local object, location, rotation = params.object, Location.Get(params.location), params.rotation
    local height = params.height or 2
    local position = location:Center()
    position.y = position.y + height

    log:Debugf("Cloning %s (%s) to %s", object.getName(), object.getGUID(), location:Name())

    local clonedObject = object.clone({ position =  position })
    if rotation then
        Wait.frames(function() clonedObject.setRotation(rotation) end, 2)
    end

    return clonedObject
end


---------------------------------------------------------------------------------------------------


return {
    ArchiveSource = Action.ArchiveSource,
    ContainerSource = Action.ContainerSource,
    CreateDeck = Action.CreateDeck,
    Clone = Action.Clone,
}
