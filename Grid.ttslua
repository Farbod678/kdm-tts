local Assert = require("Kdm/Util/Assert")
local Guids = require("Kdm/Guids")

---------------------------------------------------------------------------------------------------

local Grid = {}

Grid.MAX_COLS = 22
Grid.MAX_ROWS = 16

Grid.left   = 4.885550
Grid.right  = -4.436194
Grid.top    = -2.834642
Grid.bottom = 3.801133

Grid.colDelta    = (Grid.right - Grid.left) / (Grid.MAX_COLS - 1)
Grid.rowDelta = (Grid.bottom - Grid.top) / (Grid.MAX_ROWS - 1)

---------------------------------------------------------------------------------------------------

function Grid.ColRow(lposition)
    Assert.Vec(lposition, "lposition")

    local col = (lposition.x - Grid.left) / Grid.colDelta
    local row = (lposition.z - Grid.top) / Grid.rowDelta
    return col, row
end

---------------------------------------------------------------------------------------------------

function Grid.XZ(col, row)
    Assert.Num(col, "col")
    Assert.Num(row, "row")

    local x = Grid.left + (col * Grid.colDelta)
    local z = Grid.top    + (row * Grid.rowDelta)
    return x, z
end

---------------------------------------------------------------------------------------------------

function Grid.SnapColRow(lpos, width, height)
    local col, row = Grid.ColRow(lpos)

    -- even size, snap to grid intersections (0.5, 1.5, 2.5, ...)
    -- odd size, snap to grid cell centers (1.0, 2.0, 3.0, ...)

    local snapCol = (width % 2 == 0) and math.floor(col) + 0.5 or math.floor(col + 0.5)
    local snapRow = (height % 2 == 0) and math.floor(row) + 0.5 or math.floor(row + 0.5)

    return snapCol, snapRow
end

---------------------------------------------------------------------------------------------------

function Grid.Snap(object, size)
    local width, height = size.x, size.y

    local y = object.getRotation().y
    -- sideways
    if (y > 45 and y < 135) or (y > 225 and y < 315) then
        width, height = height, width
    end

    local showdownBoard = Guids.GetObject("Showdown Board")

    local wpos = object.getPosition()
    local lpos = showdownBoard.positionToLocal(wpos)

    local snapCol, snapRow = Grid.SnapColRow(lpos, width, height)

    local epsilon = 0.001
    local wradius = width / 2
    local hradius = height / 2
    if
        (snapCol - wradius) < -0.5 - epsilon or
        (snapCol + wradius) >= Grid.MAX_COLS + epsilon or
        (snapRow - hradius) < -0.5 - epsilon or
        (snapRow + hradius) >= Grid.MAX_ROWS + epsilon then
        return wpos
    end

    local snapX, snapZ = Grid.XZ(snapCol, snapRow)

    return showdownBoard.positionToWorld({
        x = snapX,
        y = lpos.y,
        z = snapZ,
    })
end

---------------------------------------------------------------------------------------------------

return Grid
