require("Kdm/Check")
local Log = require("Kdm/Log").ForPackage("Zone")
local Util = require("Kdm/Util")
local EventManager = require("Kdm/EventManager")
local Location = require("Kdm/Location")

local ZONE_CELL_SIZE = 1

local Zone_cells = {}
local Zone_zonesByLocation = {}
local Zone_objectZones = {}

---------------------------------------------------------------------------------------------------

local function Zone_ColRow(x, z)
    local col = math.floor(x / ZONE_CELL_SIZE)
    local row = math.floor(z / ZONE_CELL_SIZE)
    return col, row
end

---------------------------------------------------------------------------------------------------

local function Zone_Index(col, row)
    return row.." "..col
end

---------------------------------------------------------------------------------------------------

local function Zone_Create(location)
    location = Location.Get(location)
    assert(Check(not Zone_zonesByLocation[location], "Zone for location '%s' already exists", location:Name()))

    local left, top, right, bottom = location:Rect()
    Log.Debugf("Creating zone %s (%.2f, %.2f) to (%.2f, %.2f)", location:Name(), left, top, right, bottom)

    local zone = {
        location = location,
        left = left,
        top = top,
        right = right,
        bottom = bottom,
        dropHandlers = {},
        pickUpHandlers = {},
        objects = {},
    }
    Zone_zonesByLocation[location] = zone

    local leftCol, topRow = Zone_ColRow(left, top)
    local rightCol, bottomRow = Zone_ColRow(right, bottom)
    for row = topRow, bottomRow do
        for col = leftCol, rightCol do
            local index = Zone_Index(col, row)
            if not Zone_cells[index] then
                Zone_cells[index] = { zone }
            else
                table.insert(Zone_cells[index], zone)
            end
        end
    end
end

---------------------------------------------------------------------------------------------------

local function Zone_AddHandler(params)
    local location, dropHandler, pickUpHandler = Location.Get(params.location), params.dropHandler, params.pickUpHandler
    assert(CheckFuncOrNil(dropHandler))
    assert(CheckFuncOrNil(pickUpHandler))

    local zone = Zone_zonesByLocation[location]
    assert(Check(zone, "No zone for location '%s'", location:Name()))

    if dropHandler then
        table.insert(zone.dropHandlers, dropHandler)
    end
    if pickUpHandler then
        table.insert(zone.pickUpHandlers, pickUpHandler)
    end
end

---------------------------------------------------------------------------------------------------

local function Zone_GetZonesAtPosition(position)
    local results = {}

    local x, z = position.x, position.z
    local col, row = Zone_ColRow(x, z)
    for _, zone in ipairs(Zone_cells[Zone_Index(col, row)] or {}) do
        if x >= zone.left and x <= zone.right and z >= zone.top and z <= zone.bottom then
            table.insert(results, zone)
        end
    end

    return results
end

local function Zone_GetZoneNamesAtPosition(position)
    return Util.Map(Zone_GetZonesAtPosition(position), function(z) return z.name end)
end

---------------------------------------------------------------------------------------------------

local function Zone_GetObjectsInZone(location)
    local location = Location.Get(location)
    local zone = Zone_zonesByLocation[location]
    assert(Check(zone, "No zone for location %s", location:Name()))
    return zone.objects
end

---------------------------------------------------------------------------------------------------

local function Zone_Drop(object, verb)
    local zones = Zone_GetZonesAtPosition(object.getPosition())
    if #zones == 0 then
        Zone_objectZones[object] = nil
        return
    end

    -- Link the object with all zones *before* calling handlers, in case the handlers do their own zone queries
    local objectZones = {}
    for _, zone in ipairs(zones) do
        Log.Debugf("Object %s (%s) %s in %s", object.getName(), object.getGUID(), verb, zone.name)
        table.insert(objectZones, zone)
        zone.objects[object] = true
    end
    Zone_objectZones[object] = objectZones

    for _, zone in ipairs(zones) do
        for _, dropHandler in ipairs(zone.dropHandlers) do
            dropHandler(object, zone.location)
        end
    end
end

local function Zone_OnObjectDrop(_, object) Zone_Drop(object, "dropped") end
local function Zone_OnObjectSpawn(object) Zone_Drop(object, "spawned") end

---------------------------------------------------------------------------------------------------

local function Zone_PickUp(object, verb)
    local zones = Zone_objectZones[object]
    if not zones then
        return
    end

    -- Unlink the object with all zones *before* calling handlers, in case the handlers do their own zone queries
    Zone_objectZones[object] = nil
    for _, zone in ipairs(zones) do
        Log.Debugf("Object %s (%s) %s, removing from %s", object.getName(), object.getGUID(), verb, zone.name)
        zone.objects[object] = nil
    end

    for _, zone in ipairs(zones) do
        for _, pickUpHandler in ipairs(zone.pickUpHandlers) do
            pickUpHandler(object, zone.location)
        end
    end
end

local function Zone_OnObjectPickUp(_, object) Zone_PickUp(object, "picked up") end
local function Zone_OnObjectEnterContainer(_, object) Zone_PickUp(object, "entered container") end
local function Zone_OnObjectDestroy(object) Zone_PickUp(object, "destroyed") end

---------------------------------------------------------------------------------------------------

local function Zone_Init()
    for _, location in ipairs({
        "Monster Tokens",
        "Innovation Deck",
        "Principle: Death",
        "Principle: New Life",
        "Principle: Society",
        "Principle: Conviction",
        "Innovations",
    }) do
        Zone_Create(location)
    end

    for _, data in ipairs({
        { max = Location.MAX_INNOVATION_LOCATIONS, name = "Innovation " },
        { max = Location.MAX_WEAPON_MASTERY_LOCATIONS, name = "Weapon Mastery " },
        { max = Location.MAX_SETTLEMENT_GEAR_LOCATIONS, name = "Settlement Gear " },
        { max = Location.MAX_SETTLEMENT_RESOURCE_LOCATIONS, name = "Settlement Resource " },
        { max = Location.MAX_SETTLEMENT_LOCATION_LOCATIONS, name = "Settlement Location " },
        { max = Location.MAX_SETTLEMENT_LOCATION_GEAR_LOCATIONS, name = "Settlement Location Gear " },
    }) do
        for i = 1, data.max do
            Zone_Create(data.name..i)
        end
    end

    local playerLocations = {
        "Marker",
        "Survivor Sheet",
        "Armor Set",
        "Fist & Tooth",
        "Cards",
        "Fighting Art 1",
        "Fighting Art 2",
        "Fighting Art 3",
        "Disorder 1",
        "Disorder 2",
        "Disorder 3",
        "Weapon Proficiency",
        "Ability/Impairment 1",
        "Ability/Impairment 2",
        "Ability/Impairment 3",
        "Ability/Impairment 4",
        "Ability/Impairment 5",
        "Ability/Impairment 6",
        "Ability/Impairment 7",
        "Ability/Impairment 8",
        "Ability/Impairment 9",
        "Temporary Tokens",
        "Permanent Tokens",
    }
    for player = 1, 4 do
        local prefix = "Player "..player.." "
        for _, location in ipairs(playerLocations) do
            Zone_Create(prefix..location)
        end

        local gearPrefix = prefix.."Gear "
        for i = 1, Location.MAX_PLAYER_GEAR_GRID_LOCATIONS do
            Zone_Create(gearPrefix..i)
        end
    end

    EventManager.AddHandler("onObjectDrop", Zone_OnObjectDrop)
    EventManager.AddHandler("onObjectPickUp", Zone_OnObjectPickUp)
    EventManager.AddHandler("onObjectEnterContainer", Zone_OnObjectEnterContainer)
    EventManager.AddHandler("onObjectSpawn", Zone_OnObjectSpawn)
    EventManager.AddHandler("onObjectDestroy", Zone_OnObjectDestroy)
end

---------------------------------------------------------------------------------------------------

local function Zone_InitObjectsInZones()
    for _, object in ipairs(getAllObjects()) do
        local zones = Zone_GetZonesAtPosition(object.getPosition())
        for _, zone in ipairs(zones) do
            Log.Debugf("Object %s (%s) started in zone %s", object.getName(), object.getGUID(), zone.location:Name())
            for _, dropHandler in ipairs(zone.dropHandlers) do
                dropHandler(object, zone.location)
            end

            if not Zone_objectZones[object] then
                Zone_objectZones[object] = { zone }
            else
                table.insert(Zone_objectZones[object], zone)
            end
            zone.objects[object] = true
        end
    end
end

---------------------------------------------------------------------------------------------------

return {
    Init = Zone_Init,
    InitObjectsInZones = Zone_InitObjectsInZones,
    AddHandler = Zone_AddHandler,
    GetZoneNamesAtPosition = Zone_GetZoneNamesAtPosition,
    GetObjectsInZone = Zone_GetObjectsInZone,
}
