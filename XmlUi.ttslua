local Assert = require("Kdm/Util/Assert")
local Log = require("Kdm/Util/Log").ForPackage("XmlUi")

local Ui = {}

-- Ui.DARK_BROWN = "#3e341c"
-- Ui.MID_BROWN = "#756b50"
-- Ui.LIGHT_BROWN = "#b3a793"

Ui.DARK_BROWN = "#453824"
Ui.MID_BROWN = "#7f7059"
Ui.LIGHT_BROWN = "#bbb4a1"

Ui.DARK_BROWN_BUTTON_COLORS = "#453824|#2f2410|#2f2410|#ffffff"
Ui.MID_BROWN_BUTTON_COLORS = "#7f7059|#655741|#655741|#ffffff"

Ui.INVISIBLE_BUTTON_COLORS = "#00000000|#00000088|#00000088|#00000000"
Ui.IMAGE_BUTTON_COLORS = "#ffffff|#dddddd|#dddddd|#ffffff"

---------------------------------------------------------------------------------------------------

Ui.BaseClass = {
    Show = function(elem)
        Log.Debugf("Showing %s", elem.id)
        self.UI.show(elem.id)
    end,

    Hide = function(elem)
        Log.Debugf("Hiding %s", elem.id)
        self.UI.hide(elem.id)
    end,

    SetHeight = function(elem, height)
        Log.Debugf("Setting %s height to %d", elem.id, height)
        self.UI.setAttribute(elem.id, "height", height)
    end
}
Ui.BaseClass.__index = Ui.BaseClass

---------------------------------------------------------------------------------------------------

function Ui.Panel(parent, params)
    Assert.Str(params.id)

    local id = parent.id.."_"..params.id.."Panel"
    Log.Debugf("Creating Panel %s", id)

    local panel = {
        id = id,
        children = {},
    }
    setmetatable(panel, Ui.BaseClass)

    local elem = {
        tag = "Panel",
        attributes = {
            id = id,
            rectAlignment = params.rectAlignment or "MiddleCenter",
            offsetXY = params.x and params.x.." "..params.y or nil,
            width = params.width,
            height = params.height,
            color = params.color or "#00000000",
            active = params.active,
        },
        children = panel.children,
    }
    table.insert(parent.children, elem)

    return panel
end

---------------------------------------------------------------------------------------------------

Ui.TextClass = {
    SetText = function(textElem, text)
        text = text or ""   -- nil will not actually clear the text
        Log.Debugf("Setting text for %s to '%s'", textElem.id, text)
        self.UI.setAttributes(textElem.id, {
            text = text,
            color = textElem.color, -- color is required otherwise TTS will reset it to black
        })
    end
}
Ui.TextClass.__index = Ui.TextClass
setmetatable(Ui.TextClass, { __index = Ui.BaseClass })

function Ui.Text(parent, params)
    Assert.Str(params.id)
    Assert(params.color)

    local id = parent.id.."_"..params.id.."Text"

    local text = {
        id = id,
        color = params.color
    }
    setmetatable(text, Ui.TextClass)

    table.insert(parent.children, {
        tag = "Text",
        attributes = {
            id = id,
            rectAlignment = "LowerLeft",
            offsetXY = params.x.." "..params.y,
            width = params.width,
            height = params.height or 30,
            text = params.text,
            color = params.color,
            alignment = params.alignment or "MiddleLeft",
            fontSize = params.fontSize or 36,
            textOffset = "0 0 0 0",
            active = params.active,
        },
    })

    return text
end

function Ui.DarkText(parent, params)
    params.color = params.color or Ui.DARK_BROWN
    return Ui.Text(parent, params)
end

function Ui.LightText(parent, params)
    params.color = params.color or Ui.LIGHT_BROWN
    return Ui.Text(parent, params)
end

---------------------------------------------------------------------------------------------------

function Ui.Image(parent, params)
    Assert.Str(params.image)

    Log.Debugf("Creating Image %s", params.image)

    table.insert(parent.children, {
        tag = "Image",
        attributes = {
            image = params.image,
            rectAlignment = params.rectAlignment or "MiddleCenter",
            width = params.width,
            height = params.height,
        },
    })
end

---------------------------------------------------------------------------------------------------

Ui.InputClass = {
    SetText = function(input, text)
        text = text or ""   -- nil will not actually clear the text
        Log.Debugf("Setting text for %s to '%s'", input.id, text)
        self.UI.setAttributes(input.id, {
            text = text,
            textColor = input.textColor,
        })
    end,
}
Ui.InputClass.__index = Ui.InputClass
setmetatable(Ui.InputClass, { __index = Ui.BaseClass })

function Ui.Input(parent, params)
    Assert.Str(params.id)
    Assert.Func(params.onValueChanged)

    local id = parent.id.."_"..params.id.."Input"

    Log.Debugf("Creating Input %s", id)

    local input = {
        id = id,
        onValueChanged = params.onValueChanged,
        textColor = params.textColor,
    }
    setmetatable(input, Ui.InputClass)

    local onValueChanged = id.."_OnValueChanged"
    self.setVar(onValueChanged, function(_, value)
        input.onValueChanged(value)
        -- necessary for the text update to propagate through multipalyer
        -- doesn't cause infinite recursion
        self.UI.setAttribute(id, "text", value)
    end)

    table.insert(parent.children, {
        tag = "InputField",
        attributes = {
            id = id,
            rectAlignment = params.rectAlignment or "LowerLeft",
            offsetXY = params.x.." "..params.y,
            width = params.width,
            height = params.height or 30,
            colors = params.colors,
            placeholder = params.placeholder or " " ,
            text = params.text,
            fontSize = params.fontSize or 16,
            textColor = params.textColor,
            lineType = params.lineType,
            onValueChanged = onValueChanged,
            selectionColor = "#44444488",
            textAlignment = params.textAlignment or "MiddleLeft",
            textOffset = params.textOffset or "0 0 0 0",
        }
    })

    return input
end

function Ui.DarkInput(parent, params)
    params.textColor = Ui.DARK_BROWN
    params.colors = Ui.INVISIBLE_BUTTON_COLORS
    return Ui.Input(parent, params)
end

function Ui.LightInput(parent, params)
    params.textColor = Ui.LIGHT_BROWN
    params.colors = Ui.INVISIBLE_BUTTON_COLORS
    return Ui.Input(parent, params)
end

---------------------------------------------------------------------------------------------------

Ui.ButtonClass = {
    SetOnClick = function(button, onClick)
        button.onClick = onClick
    end,
    SetText = function(button, text)
        text = text or ""
        Log.Debugf("Setting %s text to %s", button.id, text)
        self.UI.setAttributes(button.id, {
            text = text,
            textColor = button.textColor,
        })
    end,
    SetImage = function(button, image)
        if image then
            Log.Debugf("Setting button %s image to %s", button.id, image)
            self.UI.setAttributes(button.id, {
                image = image,
                colors = Ui.IMAGE_BUTTON_COLORS,
            })
        else
            Log.Debugf("Clearing %s image", button.id)
            self.UI.setAttributes(button.id, {
                image = nil,
                colors = Ui.INVISIBLE_BUTTON_COLORS,
            })
        end
    end,
}
Ui.ButtonClass.__index = Ui.ButtonClass
setmetatable(Ui.ButtonClass, { __index = Ui.BaseClass })

function Ui.Button(parent, params)
    Assert.Str(params.id)
    Assert.FuncOrNil(params.onClick)

    local id = parent.id.."_"..params.id.."Button"
    local textColor = params.textColor or Ui.LIGHT_BROWN

    Log.Debugf("Creating Button %s", id)

    local button = {
        id = id,
        textColor = textColor,
        onClick = params.onClick,
    }
    setmetatable(button, Ui.ButtonClass)

    local onClick = id.."_OnClick"
    self.setVar(onClick, function(_, mouseButton) button.onClick(mouseButton) end)

    local elem = {
        tag = "Button",
        attributes = {
            id = id,
            rectAlignment = params.rectAlignment or "LowerLeft",
            offsetXY = params.x.." "..params.y,
            width = params.width,
            height = params.height,
            text = params.text,
            colors = params.colors,
            textColor = textColor,
            fontSize = params.fontSize or 12,
            image = params.image,
            textAlignment = params.textAlignment or "MiddleLeft",
            onClick = onClick,
            active = params.active
        },
    }
    table.insert(parent.children, elem)

    return button
end

function Ui.InvisibleButton(parent, params)
     params.colors = Ui.INVISIBLE_BUTTON_COLORS
     return Ui.Button(parent, params)
end

function Ui.ImageButton(parent, params)
     params.colors = Ui.IMAGE_BUTTON_COLORS
     return Ui.Button(parent, params)
end

---------------------------------------------------------------------------------------------------

function Ui.CheckButton(parent, params)
    Assert.Str(params.id)
    Assert.Func(params.onCheck)

    local id = parent.id.."_"..params.id.."CheckButton"

    Log.Debugf("Creating CheckButton %s", id)

    local checkButton = {
        id = id,
        checked = params.checked,
        selectedColors = params.selectedColors or Ui.DARK_BROWN_BUTTON_COLORS,
        unselectedColors = params.unselectedColors or Ui.MID_BROWN_BUTTON_COLORS,
        textColor = params.textColor or Ui.LIGHT_BROWN,
        onCheck = params.onCheck,
    }

    local onClick = id.."_OnClick"
    self.SetVar(onClick, function(_, _, id)
        if checkButton.checked then
            self.UI.setAttributes(checkButton.id, {
                colors = checkButton.unselectedColors,
                textColor = checkButton.textColor,
            })
            checkButton.checked = nil
        else
            self.UI.setAttributes(checkButton.id, {
                colors = checkButton.selectedColors,
                textColor = checkButton.textColor,
            })
            checkButton.checked = true
        end

        params.onCheck(checkButton.checked)
    end)

    table.insert(parent.children, {
        tag = "Button",
        attributes = {
            id = id,
            rectAlignment = params.rectAlignment or "LowerLeft",
            offsetXY = params.x.." "..params.y,
            width = params.width,
            height = params.height,
            text = params.text,
            colors = params.checked and checkButton.selectedColors or checkButton.unselectedColors,
            textColor = checkButton.textColor,
            fontSize = params.fontSize,
            textAlignment = "MiddleCenter",
            onClick = onClick,
        },
    })
end

---------------------------------------------------------------------------------------------------

Ui.CheckBoxClass = {
    Check = function(checkBox, checked)
        checkBox.checked = checked
        if checked then
            self.UI.setAttributes(checkBox.id, {
                image = "CheckBoxFilled",
                colors = Ui.IMAGE_BUTTON_COLORS,
            })
        else
            self.UI.setAttributes(checkBox.id, {
                image = nil,
                colors = Ui.INVISIBLE_BUTTON_COLORS,
            })
        end
        checkBox.onCheck(checked)
    end,
}
Ui.CheckBoxClass.__index = Ui.CheckBoxClass
setmetatable(Ui.CheckBoxClass, { __index = Ui.BaseClass })

function Ui.CheckBox(parent, params)
    Assert.Str(params.id)
    Assert.Func(params.onCheck)

    local id = parent.id.."_"..params.id.."Button"
    Log.Debugf("Creating CheckBox %s", id)

    local checkBox = {
        id = id,
        checked = params.checked,
        onCheck = params.onCheck,
    }
    setmetatable(checkBox, Ui.CheckBoxClass)

    local onClick = id.."_OnClick"
    self.setVar(onClick, function()
        checkBox:Check(not checkBox.checked)
    end)

    table.insert(parent.children, {
        tag = "Button",
        attributes = {
            id = id,
            rectAlignment = params.rectAlignment or "LowerLeft",
            offsetXY = params.x.." "..params.y,
            width = params.width or 30,
            height = params.height or 30,
            colors = checkBox.checked and Ui.IMAGE_BUTTON_COLORS or Ui.INVISIBLE_BUTTON_COLORS,
            image = checkBox.checked and "CheckBoxFilled" or nil,
            onClick = onClick,
        },
    })

    return checkBox
end

---------------------------------------------------------------------------------------------------

Ui.OptionButtonGroupClass = {
    Select = function(group, option)
        local selectedId = option and option.id or nil
        for _, option in ipairs(group.options) do
            if option.id != selectedId then
                self.UI.setAttributes(option.id, {
                    colors = group.unselectedColors,
                    textColor = group.textColor,
                })
            else
                self.UI.setAttributes(option.id, {
                    colors = group.selectedColors,
                    textColor = group.textColor,
                })
                group.onSelect(option.value)
            end
        end
    end,
}
Ui.OptionButtonGroupClass.__index = Ui.OptionButtonGroupClass

function Ui.OptionButtonGroup(parent, params)
    Assert.Str(params.id)
    Assert.Func(params.onSelect)

    local id = parent.id.."_"..params.id.."OptionButtons"

    Log.Debugf("Creating OptionButtonGroup %s", id)

    local group = {
        parent = parent,
        id = id,
        options = {},
        selectedColors = params.selectedColors or Ui.DARK_BROWN_BUTTON_COLORS,
        unselectedColors = params.unselectedColors or Ui.MID_BROWN_BUTTON_COLORS,
        textColor = params.textColor or Ui.LIGHT_BROWN,
        textAlignment = params.textAlignment or "MiddleCenter",
        fontSize = params.fontSize or 16,
        onClick = id.."_OnClick",
        onSelect = params.onSelect,
    }
    setmetatable(group, Ui.OptionButtonGroupClass)

    self.SetVar(group.onClick, function(_, _, id)
        group:Select({ id = id })    -- hack to make it look like an option
    end)

    return group
end

Ui.OptionButtonClass = {
    SetText = function(optionButton, text)
        text = text or ""
        Log.Debugf("Setting %s text to %s", optionButton.id, text)
        self.UI.setAttributes(optionButton.id, {
            text = text,
            textColor = optionButton.group.textColor,
        })
    end,
}
Ui.OptionButtonClass.__index = Ui.OptionButtonClass
setmetatable(Ui.OptionButtonClass, { __index = Ui.BaseClass })

function Ui.OptionButton(group, params)
    local id = group.id.."_"..(#group.options + 1)

    Log.Debugf("Creating OptionButton %s", id)

    local optionButton = {
        id = id,
        group = group,
        value = params.value,
    }
    setmetatable(optionButton, Ui.OptionButtonClass)

    table.insert(group.options, optionButton)

    table.insert(group.parent.children, {
        tag = "Button",
        attributes = {
            id = id,
            rectAlignment = params.rectAlignment or "LowerLeft",
            offsetXY = params.x.." "..params.y,
            width = params.width,
            height = params.height,
            text = params.text,
            colors = params.selected and group.selectedColors or group.unselectedColors,
            textColor = group.textColor,
            fontSize = group.fontSize,
            textAlignment = group.textAlignment,
            active = params.active,
            onClick = group.onClick,
        },
    })

    return optionButton
end

---------------------------------------------------------------------------------------------------

Ui.OptionBoxGroupClass = {
    Select = function(group, option)
        local selectedId = option and option.id or nil
        for _, option in ipairs(group.options) do
            if option.id != selectedId then
                self.UI.setAttributes(option.id, {
                    image = nil,
                    colors = Ui.INVISIBLE_BUTTON_COLORS,
                })
            else
                self.UI.setAttributes(option.id, {
                    image = "CheckBoxFilled",
                    colors = Ui.IMAGE_BUTTON_COLORS,
                })
                group.onSelect(option.value)
            end
        end
    end,
}
Ui.OptionBoxGroupClass.__index = Ui.OptionBoxGroupClass

function Ui.OptionBoxGroup(parent, params)
    Assert.Str(params.id)
    Assert.Func(params.onSelect)

    local id = parent.id.."_"..params.id.."OptionBoxes"

    Log.Debugf("Creating OptionBoxGroup %s", id)

    local group = {
        parent = parent,
        id = id,
        options = {},
        onClick = id.."_OnClick",
        onSelect = params.onSelect,
    }
    setmetatable(group, Ui.OptionBoxGroupClass)

    self.SetVar(group.onClick, function(_, _, id)
        group:Select({ id = id })    -- hack to make it look like an option box
    end)

    return group
end

function Ui.OptionBox(group, params)
    local id = group.id.."_"..(#group.options + 1)

    Log.Debugf("Creating OptionBox %s", id)

    local optionBox = { id = id, value = params.value }
    table.insert(group.options, optionBox)

    table.insert(group.parent.children, {
        tag = "Button",
        attributes = {
            id = id,
            rectAlignment = params.rectAlignment or "LowerLeft",
            offsetXY = params.x.." "..params.y,
            width = params.width or 30,
            height = params.height or 30,
            colors = params.checked and Ui.IMAGE_BUTTON_COLORS or Ui.INVISIBLE_BUTTON_COLORS,
            image = params.checked and "CheckBoxFilled" or nil,
            onClick = group.onClick,
        },
    })

    return optionBox
end

---------------------------------------------------------------------------------------------------

function Ui.VerticalScroll(parent, params)
    -- hack/pass-through to make the ID concatenation work
    local verticalScroll = {
        id = parent.id,
        children = {},
    }

    table.insert(parent.children, {
        tag = "VerticalScrollView",
        attributes = {
            rectAlignment = "LowerLeft",
            offsetXY = params.x.." "..params.y,
            width = params.width,
            height = params.height,
            color = "#00000000",
        },
        children = verticalScroll.children,
    })

    return verticalScroll
end

---------------------------------------------------------------------------------------------------

return Ui
