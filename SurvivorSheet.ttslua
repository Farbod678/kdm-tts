require("Kdm/Check")
local Log = require("Kdm/Log").ForPackage("SurvivorSheet")
local Util = require("Kdm/Util")
local Ui = require("Kdm/Ui3d")

---------------------------------------------------------------------------------------------------

local SURVIVOR_SHEET_MAXES = {
    HuntXp = 16,
    Courage = 9,
    Understanding = 9,
    WeaponProficiencyRank = 8,
}

local SurvivorSheetClass = {}
SurvivorSheetClass.__index = SurvivorSheetClass

---------------------------------------------------------------------------------------------------

local function SurvivorSheet_Create(survivor, object)
    assert(CheckTagged(survivor, "Survivor"))
    assert(CheckObject(object))

    Log.Debugf("Creating SurvivorSheet for survivor %d and object %s", survivor:Id(), object.getGUID())

    local survivorSheet = {
        tag = "Survivor Sheet",
        survivor = survivor,
        object = object,
        ui = {},
    }
    setmetatable(survivorSheet, SurvivorSheetClass)

    local topLeft = { x = 0.734, y = -0.816 }
    local bottomRight = { x = 0.472, y = -0.554 }
    survivorSheet.ui.SurvivalCounter = Ui.Counter({ object = object, id = "Survival", topLeft = topLeft, bottomRight = bottomRight, scale = 0.15, value = survivor:Survival(), onValueChanged = function(delta)
        survivor:SetSurvival(survivor:Survival() + delta)
    end })

    local topLeft = { x = -0.472, y = -0.816 }
    local bottomRight = { x = -0.734, y = -0.554 }
    survivorSheet.ui.InsanityCounter = Ui.Counter({ object = object, id = "Insanity", topLeft = topLeft, bottomRight = bottomRight, scale = 0.15, value = survivor:Insanity(), onValueChanged = function(delta)
        survivor:SetInsanity(survivor:Insanity() + delta)
    end })

    local stats = {
        { stat = "Movement", col = 0, row = 0 },
        { stat = "Speed",    col = 1, row = 0 },
        { stat = "Accuracy", col = 2, row = 0 },
        { stat = "Strength", col = 0, row = 1 },
        { stat = "Evasion",  col = 1, row = 1 },
        { stat = "Luck",     col = 2, row = 1 },
    }
    local x1 = 0.320650
    local y1 = -0.939756
    local width = 0.140598 - x1
    local height = -0.758830 - y1
    local dx = (-0.140660 - x1) / 2
    local dy = -0.635 - y1
    local i = 1
    for _, data in ipairs(stats) do
        local stat = data.stat
        local tl = { x = x1 + data.col * dx, y = y1 + data.row * dy }
        local br = { x = tl.x + width, y = tl.y + height }
        survivorSheet.ui[stat.."Counter"] = Ui.Counter({ object = object, id = stat, topLeft = tl, bottomRight = br, scale = 0.09, value = survivor[stat](survivor), onValueChanged = function(delta)
            survivor["Set"..stat](survivor, survivor[stat](survivor) + delta)
        end })
    end

    local topLeft = { x = 0.55, y = -0.245 }
    local bottomRight = { x = -0.489548, y = -0.157231 }
    survivorSheet.ui.NameInput = Ui.Input({ object = object, id = "Name", topLeft = topLeft, bottomRight = bottomRight, scale = 0.045, value = survivor:Name(), label = "Enter name...", onValueChanged = function(value)
        survivor:SetName(value)
    end })

    local topLeft = { x = -0.085, y = 0.666878 }
    local bottomRight = { x = -0.675, y = 0.755 }
    survivorSheet.ui.WeaponProficiencyTypeInput = Ui.Input({ object = object, id = "WeaponProficiencyType", topLeft = topLeft, bottomRight = bottomRight, scale = 0.045, value = survivor:WeaponProficiencyType(), onValueChanged = function(value)
        survivor:SetWeaponProficiencyType(value)
    end })

    local topLeft = { x = -0.549952, y = -0.943896 }
    local bottomRight = { x = -0.658285, y = -0.834634 }
    survivorSheet.ui.BrainInjuryCheckBox = Ui.CheckBox({ object = object, id = "BrainInjury", topLeft = topLeft, bottomRight = bottomRight, scale = 0.15, checked = survivor:BrainInjury(), onClick = function()
        survivor:SetBrainInjury(not survivor:BrainInjury())
    end })

    local SMALL_CHECK_BOX_SIZE = 0.055
    local smallCheckBoxes = {
        { stat = "Male", topLeft = { x = -0.526053, y = -0.242566 } },
        { stat = "Female", topLeft = { x = -0.655008, y = -0.242566 } },
        { stat = "Reroll", topLeft = { x = 0.74, y = -0.058658 } },
        { stat = "SkipNextHunt", topLeft = { x = -0.403601, y = -0.058658 } },
    }
    for _, smallCheckBox in ipairs(smallCheckBoxes) do
        local stat, topLeft = smallCheckBox.stat, smallCheckBox.topLeft
        local bottomRight = { x = topLeft.x - SMALL_CHECK_BOX_SIZE, y = topLeft.y + SMALL_CHECK_BOX_SIZE }
        survivorSheet.ui[stat.."CheckBox"] = Ui.CheckBox({ object = object, id = stat, topLeft = topLeft, bottomRight = bottomRight, scale = 0.075, checked = survivor[stat](survivor), onClick = function()
            survivor["Set"..stat](survivor, not survivor[stat](survivor))
        end })
    end

    local checkBoxSequences = {
        { stat = "HuntXp", x1 = 0.447672, xn = -0.622670, y = 0.087553 },
        { stat = "Courage", x1 = 0.677678, xn = 0.101071, y = 0.418356 },
        { stat = "Understanding", x1 = -0.046832, xn = -0.621345, y = 0.418356 },
        { stat = "WeaponProficiencyRank", x1 = 0.677381, xn = 0.173164, y = 0.749524 },
    }
    for _, checkBoxSequence in ipairs(checkBoxSequences) do
        local stat, x1, xn, y = checkBoxSequence.stat, checkBoxSequence.x1, checkBoxSequence.xn, checkBoxSequence.y
        local max = SURVIVOR_SHEET_MAXES[stat]
        local dx = (xn - x1) / (max - 1)
        local value = survivor[stat](survivor)

        for i = 1, max do
            local topLeft = { x = x1 + ((i - 1) * dx), y = y }
            local bottomRight = { x = topLeft.x - SMALL_CHECK_BOX_SIZE, y = y + SMALL_CHECK_BOX_SIZE }
            survivorSheet.ui[stat..i.."CheckBox"] = Ui.CheckBox({ object = object, id = stat..i, topLeft = topLeft, bottomRight = bottomRight, scale = 0.075, checked = value >= i, onClick = function()
                local value = i
                if survivor[stat](survivor) >= i then
                    value = value - 1
                end
                survivor["Set"..stat](survivor, value)
            end })
        end
    end

    return survivorSheet
end

---------------------------------------------------------------------------------------------------

function SurvivorSheetClass.Survivor(survivorSheet) return survivorSheet.survivor end
function SurvivorSheetClass.Object(survivorSheet) return survivorSheet.object end

local function SurvivorSheet_SetInput(survivorSheet, stat, value)
    Log.Debugf("Setting SurvivorSheet %d %s Input to %s", survivorSheet:Survivor():Id(), stat, value)
    survivorSheet.ui[stat.."Input"]:Set(value)
end

local function SurvivorSheet_SetCounter(survivorSheet, stat, value)
    Log.Debugf("Setting SurvivorSheet %d %s Counter to %d", survivorSheet:Survivor():Id(), stat, value)
    survivorSheet.ui[stat.."Counter"]:Set(value)
end

local function SurvivorSheet_SetCheckBox(survivorSheet, stat, value)
    Log.Debugf("Setting SurvivorSheet %s %s CheckBox to %s", survivorSheet:Survivor():Id(), stat, value and "true" or "false")
    survivorSheet.ui[stat.."CheckBox"]:Set(value)
end

local function SurvivorSheet_SetCheckBoxSequence(survivorSheet, stat, value)
    Log.Debugf("Setting SurvivorSheet %s %s CheckBoxSequence to %d", survivorSheet:Survivor():Id(), stat, value)
    local max = SURVIVOR_SHEET_MAXES[stat]
    for i = 1, Util.Min(value, max) do
        survivorSheet.ui[stat..i.."CheckBox"]:Set(true)
    end
    for i = Util.Max(1, value + 1), max do
        survivorSheet.ui[stat..i.."CheckBox"]:Set(false)
    end
end

local SurvivorSheet_setStatFunctions = {
    ["Survival"]                = SurvivorSheet_SetCounter,
    ["Insanity"]                = SurvivorSheet_SetCounter,
    ["Movement"]                = SurvivorSheet_SetCounter,
    ["Speed"]                   = SurvivorSheet_SetCounter,
    ["Accuracy"]                = SurvivorSheet_SetCounter,
    ["Strength"]                = SurvivorSheet_SetCounter,
    ["Evasion"]                 = SurvivorSheet_SetCounter,
    ["Luck"]                    = SurvivorSheet_SetCounter,

    ["Name"]                    = SurvivorSheet_SetInput,
    ["WeaponProficiencyType"]   = SurvivorSheet_SetInput,

    ["BrainInjury"]             = SurvivorSheet_SetCheckBox,
    ["Male"]                    = SurvivorSheet_SetCheckBox,
    ["Female"]                  = SurvivorSheet_SetCheckBox,
    ["Reroll"]                  = SurvivorSheet_SetCheckBox,
    ["SkipNextHunt"]            = SurvivorSheet_SetCheckBox,

    ["HuntXp"]                  = SurvivorSheet_SetCheckBoxSequence,
    ["Courage"]                 = SurvivorSheet_SetCheckBoxSequence,
    ["Understanding"]           = SurvivorSheet_SetCheckBoxSequence,
    ["WeaponProficiencyRank"]   = SurvivorSheet_SetCheckBoxSequence,
}

function SurvivorSheetClass.SetStat(survivorSheet, stat, value)
    local setter = SurvivorSheet_setStatFunctions[stat]
    if setter then
        setter(survivorSheet, stat, value)
    else
        Log.Debugf("Unrecognized stat %s for SurvivorSheet %d", stat, survivorSheet:Survivor():Id())
    end
end

---------------------------------------------------------------------------------------------------

function SurvivorSheetClass.Save(survivorSheet)
    return  {
        survivorId = survivorSheet.survivor:Id(),
        objectGuid = survivorSheet.object.getGUID(),
    }
end

---------------------------------------------------------------------------------------------------

return {
    Create = SurvivorSheet_Create,
}
