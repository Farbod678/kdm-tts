require("Kdm/Check")
local Log = require("Kdm/Log").ForPackage("SurvivorSheet")
local Util = require("Kdm/Util")
local Ui = require("Kdm/Ui3d")

---------------------------------------------------------------------------------------------------

local SURVIVOR_SHEET_MAXES = {
    huntXp = 16,
    courage = 9,
    understanding = 9,
    weaponProficiencyRank = 8,
}

local SurvivorSheetClass = {}
SurvivorSheetClass.__index = SurvivorSheetClass

---------------------------------------------------------------------------------------------------

local function SurvivorSheet_Create(survivor, object, packedBag, packedObjects)
    assert(CheckTagged(survivor, "Survivor"))
    assert(CheckObject(object))
    assert(CheckObjectOrNil(packedBag))
    assert(CheckTableOrNil(packedObjects))

    Log.Debugf("Creating SurvivorSheet for survivor %d and object %s", survivor:Id(), object.getGUID())

    local survivorSheet = {
        survivor = survivor,
        object = object,
        packedBag = packedBag,
        packedObjects = packedObjects,
        ui = {},
    }
    setmetatable(survivorSheet, SurvivorSheetClass)

    local topLeft = { x = 0.734, y = -0.816 }
    local bottomRight = { x = 0.472, y = -0.554 }
    survivorSheet.ui.survivalCounter = Ui.Counter({ object = object, id = "Survival", topLeft = topLeft, bottomRight = bottomRight, scale = 0.15, value = survivor:Survival(), onValueChanged = function(value)
        survivor:SetSurvival(survivor:Survival() + value)
    end })

    local topLeft = { x = -0.472, y = -0.816 }
    local bottomRight = { x = -0.734, y = -0.554 }
    survivorSheet.ui.insanityCounter = Ui.Counter({ object = object, id = "Insanity", topLeft = topLeft, bottomRight = bottomRight, scale = 0.15, value = survivor:Insanity(), onValueChanged = function(value)
        survivor:SetInsanity(survivor:Insanity() + value)
    end })

    local stats = {
        { stat = "movement", col = 0, row = 0 },
        { stat = "speed",    col = 1, row = 0 },
        { stat = "accuracy", col = 2, row = 0 },
        { stat = "strength", col = 0, row = 1 },
        { stat = "evasion",  col = 1, row = 1 },
        { stat = "luck",     col = 2, row = 1 },
    }
    local x1 = 0.320650
    local y1 = -0.939756
    local width = 0.140598 - x1
    local height = -0.758830 - y1
    local dx = (-0.140660 - x1) / 2
    local dy = -0.635 - y1
    local i = 1
    for _, data in ipairs(stats) do
        local stat = data.stat
        local Stat = Util.Capitalize(stat)
        local tl = { x = x1 + data.col * dx, y = y1 + data.row * dy }
        local br = { x = tl.x + width, y = tl.y + height }
        survivorSheet.ui[stat.."Counter"] = Ui.Counter({ object = object, id = Stat, topLeft = tl, bottomRight = br, scale = 0.09, value = survivor[Stat](survivor), onValueChanged = function(delta)
            survivor["Set"..Stat](survivor, survivor[Stat](survivor) + delta)
        end })
    end

    local topLeft = { x = 0.55, y = -0.245 }
    local bottomRight = { x = -0.489548, y = -0.157231 }
    survivorSheet.ui.nameInput = Ui.Input({ object = object, id = "Name", topLeft = topLeft, bottomRight = bottomRight, scale = 0.045, value = survivor:Name(), label = "Enter name...", onValueChanged = function(value)
        survivor:SetName(value)
    end })

    local topLeft = { x = -0.085, y = 0.666878 }
    local bottomRight = { x = -0.675, y = 0.755 }
    survivorSheet.ui.weaponProficiencyTypeInput = Ui.Input({ object = object, id = "WeaponProficiencyType", topLeft = topLeft, bottomRight = bottomRight, scale = 0.045, value = survivor:WeaponProficiencyType(), onValueChanged = function(value)
        survivor:SetWeaponProficiencyType(value)
    end })

    local topLeft = { x = -0.549952, y = -0.943896 }
    local bottomRight = { x = -0.658285, y = -0.834634 }
    survivorSheet.ui.brainInjuryCheckBox = Ui.CheckBox({ object = object, id = "BrainInjury", topLeft = topLeft, bottomRight = bottomRight, scale = 0.15, checked = survivor:BrainInjury(), onClick = function()
        survivor:SetBrainInjury(not survivor:BrainInjury())
    end })

    local SMALL_CHECK_BOX_SIZE = 0.055
    local smallCheckBoxes = {
        { stat = "male", topLeft = { x = -0.526053, y = -0.242566 } },
        { stat = "female", topLeft = { x = -0.655008, y = -0.242566 } },
        { stat = "lifetimeRerollAvailable", topLeft = { x = 0.74, y = -0.058658 } },
        { stat = "lifetimeRerollUsed", topLeft = { x = 0.255074, y = -0.058658 } },
        { stat = "skipNextHunt", topLeft = { x = -0.403601, y = -0.058658 } },
    }
    for _, smallCheckBox in ipairs(smallCheckBoxes) do
        local stat, topLeft = smallCheckBox.stat, smallCheckBox.topLeft
        local bottomRight = { x = topLeft.x - SMALL_CHECK_BOX_SIZE, y = topLeft.y + SMALL_CHECK_BOX_SIZE }
        local Stat = Util.Capitalize(stat)
        survivorSheet.ui[stat.."CheckBox"] = Ui.CheckBox({ object = object, id = Stat, topLeft = topLeft, bottomRight = bottomRight, scale = 0.075, checked = survivor[Stat](survivor), onClick = function()
            survivor["Set"..Stat](survivor, not survivor[Stat](survivor))
        end })
    end

    local checkBoxSequences = {
        { stat = "huntXp", x1 = 0.447672, xn = -0.622670, y = 0.087553 },
        { stat = "courage", x1 = 0.677678, xn = 0.101071, y = 0.418356 },
        { stat = "understanding", x1 = -0.046832, xn = -0.621345, y = 0.418356 },
        { stat = "weaponProficiencyRank", x1 = 0.677381, xn = 0.173164, y = 0.749524 },
    }

    for _, checkBoxSequence in ipairs(checkBoxSequences) do
        local stat, x1, xn, y = checkBoxSequence.stat, checkBoxSequence.x1, checkBoxSequence.xn, checkBoxSequence.y
        local Stat = Util.Capitalize(stat)
        local max = SURVIVOR_SHEET_MAXES[stat]
        local dx = (xn - x1) / (max - 1)
        local value = survivor[Stat](survivor)

        for i = 1, max do
            local Stat = Util.Capitalize(stat)
            local topLeft = { x = x1 + ((i - 1) * dx), y = y }
            local bottomRight = { x = topLeft.x - SMALL_CHECK_BOX_SIZE, y = y + SMALL_CHECK_BOX_SIZE }
            survivorSheet.ui[stat..i.."CheckBox"] = Ui.CheckBox({ object = object, id = Stat..i, topLeft = topLeft, bottomRight = bottomRight, scale = 0.075, checked = value >= i, onClick = function()
                local value = i
                if survivor[Stat](survivor) >= i then
                    value = value - 1
                end
                survivor["Set"..Stat](survivor, value)
            end })
        end
    end

    return survivorSheet
end

---------------------------------------------------------------------------------------------------

function SurvivorSheetClass.Survivor(survivorSheet) return survivorSheet.survivor end
function SurvivorSheetClass.Object(survivorSheet) return survivorSheet.object end

function SurvivorSheetClass.PackedBag(survivorSheet) return survivorSheet.packedBag end
function SurvivorSheetClass.SetPackedBag(survivorSheet, packedBag) survivorSheet.packedBag = packedBag end

function SurvivorSheetClass.PackedObjects(survivorSheet) return survivorSheet.packedObjects end
function SurvivorSheetClass.SetPackedObjects(survivorSheet, packedObjects) survivorSheet.packedObjects = packedObjects end

---------------------------------------------------------------------------------------------------

local function SurvivorSheet_UpdateInput(survivorSheet, stat, value)
    survivorSheet.ui[stat.."Input"]:Set(value)
end

local function SurvivorSheet_UpdateCounter(survivorSheet, stat, value)
    survivorSheet.ui[stat.."Counter"]:Set(value)
end

local function SurvivorSheet_UpdateCheckBox(survivorSheet, stat, value)
    survivorSheet.ui[stat.."CheckBox"]:Set(value)
end

local function SurvivorSheet_UpdateCheckBoxSequence(survivorSheet, stat, value)
    for i = 1, value do
        survivorSheet.ui[stat..i.."CheckBox"]:Set(true)
    end
    for i = value + 1, SURVIVOR_SHEET_MAXES[stat] do
        survivorSheet.ui[stat..i.."CheckBox"]:Set(false)
    end
end

local SurvivorSheet_updateStatFunctions = {
    ["survival"]                = SurvivorSheet_UpdateCounter,
    ["insanity"]                = SurvivorSheet_UpdateCounter,
    ["movement"]                = SurvivorSheet_UpdateCounter,
    ["speed"]                   = SurvivorSheet_UpdateCounter,
    ["accuracy"]                = SurvivorSheet_UpdateCounter,
    ["strength"]                = SurvivorSheet_UpdateCounter,
    ["evasion"]                 = SurvivorSheet_UpdateCounter,
    ["luck"]                    = SurvivorSheet_UpdateCounter,

    ["name"]                    = SurvivorSheet_UpdateInput,
    ["weaponProficiencyType"]   = SurvivorSheet_UpdateInput,

    ["brainInjury"]             = SurvivorSheet_UpdateCheckBox,
    ["male"]                    = SurvivorSheet_UpdateCheckBox,
    ["female"]                  = SurvivorSheet_UpdateCheckBox,
    ["lifetimeRerollAvailable"] = SurvivorSheet_UpdateCheckBox,
    ["lifetimeRerollUsed"]      = SurvivorSheet_UpdateCheckBox,

    ["skipNextHunt"]            = SurvivorSheet_UpdateCheckBoxSequence,
    ["huntXp"]                  = SurvivorSheet_UpdateCheckBoxSequence,
    ["courage"]                 = SurvivorSheet_UpdateCheckBoxSequence,
    ["understanding"]           = SurvivorSheet_UpdateCheckBoxSequence,
    ["weaponProficiencyRank"]   = SurvivorSheet_UpdateCheckBoxSequence,
}

function SurvivorSheetClass.UpdateStat(survivorSheet, stat, value)
    local updateFunc = SurvivorSheet_updateStatFunctions[stat]
    assert(Check(updateFunc, "No update function for stat %s", stat))
    updateFunc(survivorSheet, stat, value)
end

---------------------------------------------------------------------------------------------------

function SurvivorSheetClass.Save(survivorSheet)
    return  {
        survivorId = survivorSheet.survivor:Id(),
        objectGuid = survivorSheet.object.getGUID(),
        packedBagGuid = survivorSheet.packedBag and survivorSheet.packedBag.getGUID() or nil,
        packedObjects = survivorSheet.packedObjects,
    }
end

---------------------------------------------------------------------------------------------------

return {
    Create = SurvivorSheet_Create,
}
