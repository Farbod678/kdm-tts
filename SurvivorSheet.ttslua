local Check = require("Kdm/Util/Check")
local EventManager = require("Kdm/Util/EventManager")
local log = require("Kdm/Log").ForModule("SurvivorSheet")
local Survivor = require("Kdm/Survivor")
local Ui = require("Kdm/Ui")
local Util = require("Kdm/Util/Util")

---------------------------------------------------------------------------------------------------

local SurvivorSheet = {}
SurvivorSheet.__index = SurvivorSheet
function SurvivorSheet.Is(x) return getmetatable(x) == SurvivorSheet end

SurvivorSheet.CHECKBOX_SEQUENCE_MAXES = {
    ["huntXp"] = 16,
    ["courage"] = 9,
    ["understanding"] = 9,
    ["weaponProficiencyRank"] = 8,
}

SurvivorSheet.MARKER_EMPTY = "MarkerEmpty"
SurvivorSheet.MARKER_YELLOW_STAR = "MarkerYellowStar"
SurvivorSheet.MARKER_GREEN_TRIANGLE = "MarkerGreenTriangle"
SurvivorSheet.MARKER_BLUE_SQUARE = "MarkerBlueSquare"
SurvivorSheet.MARKER_RED_CIRCLE = "MarkerRedCircle"
SurvivorSheet.MARKER_PURPLE_DIAMOND = "MarkerPurpleDiamond"

SurvivorSheet.NEXT_MARKER = {
    [SurvivorSheet.MARKER_EMPTY] = SurvivorSheet.MARKER_YELLOW_STAR,
    [SurvivorSheet.MARKER_YELLOW_STAR] = SurvivorSheet.MARKER_GREEN_TRIANGLE,
    [SurvivorSheet.MARKER_GREEN_TRIANGLE] = SurvivorSheet.MARKER_BLUE_SQUARE,
    [SurvivorSheet.MARKER_BLUE_SQUARE] = SurvivorSheet.MARKER_RED_CIRCLE,
    [SurvivorSheet.MARKER_RED_CIRCLE] = SurvivorSheet.MARKER_PURPLE_DIAMOND,
    [SurvivorSheet.MARKER_PURPLE_DIAMOND] = SurvivorSheet.MARKER_EMPTY,
}

SurvivorSheet.PREV_MARKER = {
    [SurvivorSheet.MARKER_EMPTY] = SurvivorSheet.MARKER_PURPLE_DIAMOND,
    [SurvivorSheet.MARKER_PURPLE_DIAMOND] = SurvivorSheet.MARKER_RED_CIRCLE,
    [SurvivorSheet.MARKER_RED_CIRCLE] = SurvivorSheet.MARKER_BLUE_SQUARE,
    [SurvivorSheet.MARKER_BLUE_SQUARE] = SurvivorSheet.MARKER_GREEN_TRIANGLE,
    [SurvivorSheet.MARKER_GREEN_TRIANGLE] = SurvivorSheet.MARKER_YELLOW_STAR,
    [SurvivorSheet.MARKER_YELLOW_STAR] = SurvivorSheet.MARKER_EMPTY,
}

SurvivorSheet.CUSTOM_ASSETS = {
    {
        name = "CheckBoxFilled",
        url = "http://cloud-3.steamusercontent.com/ugc/1189461526463396506/7C8173ABCCC39B1FB8EB5FF188FAC0B5CF5A3F69/",
    },
    {
        name = SurvivorSheet.MARKER_EMPTY,
        url = "file:///C:/Users/Jordan Chavez/Desktop/KDM Assets/Boards/Marker Empty.png",
    },
    {
        name = SurvivorSheet.MARKER_YELLOW_STAR,
        url = "file:///C:/Users/Jordan Chavez/Desktop/KDM Assets/Boards/Marker Yellow Star.png",
    },
    {
        name = SurvivorSheet.MARKER_GREEN_TRIANGLE,
        url = "file:///C:/Users/Jordan Chavez/Desktop/KDM Assets/Boards/Marker Green Triangle.png",
    },
    {
        name = SurvivorSheet.MARKER_BLUE_SQUARE,
        url = "file:///C:/Users/Jordan Chavez/Desktop/KDM Assets/Boards/Marker Blue Square.png",
    },
    {
        name = SurvivorSheet.MARKER_RED_CIRCLE,
        url = "file:///C:/Users/Jordan Chavez/Desktop/KDM Assets/Boards/Marker Red Circle.png",
    },
    {
        name = SurvivorSheet.MARKER_PURPLE_DIAMOND,
        url = "file:///C:/Users/Jordan Chavez/Desktop/KDM Assets/Boards/Marker Purple Diamond.png",
    },
    {
        name = "IconFightingArt",
        url = "file:///C:/Users/Jordan Chavez/Desktop/KDM Assets/Boards/Fighting Art Icon.png",
    },
    {
        name = "IconDisorder",
        url = "file:///C:/Users/Jordan Chavez/Desktop/KDM Assets/Boards/Disorder Icon.png",
    },
    {
        name = "IconAbility",
        url = "file:///C:/Users/Jordan Chavez/Desktop/KDM Assets/Boards/Ability Icon.png",
    },
    {
        name = "IconSevereInjury",
        url = "file:///C:/Users/Jordan Chavez/Desktop/KDM Assets/Boards/Severe Injury Icon.png",
    },
}

---------------------------------------------------------------------------------------------------

function SurvivorSheet.Init(saveState)
    SurvivorSheet.InitSaveState(saveState)

    EventManager.AddHandler("onObjectDestroy", function(object)
        local survivorSheet = SurvivorSheet.survivorSheetsByObject[object]
        if survivorSheet then
            log:Debugf("%s was destroyed", survivorSheet)
            SurvivorSheet.survivorSheetsBySurvivor[survivorSheet:Survivor()] = nil
            SurvivorSheet.survivorSheetsByObject[object] = nil
        end
    end)

    EventManager.AddHandler(EventManager.ON_SURVIVOR_STAT_CHANGE, function(survivor, stat, value)
        local survivorSheet = SurvivorSheet.survivorSheetsBySurvivor[survivor]
        if survivorSheet then
            local updater = SurvivorSheet.statUpdaters[stat]
            if updater then
                log:Debugf("%s %s changed to %s", survivor, stat, value)
                updater(survivorSheet, stat, value)
            end
        end
    end)
end

---------------------------------------------------------------------------------------------------

function SurvivorSheet.InitSaveState(saveState)
    SurvivorSheet.survivorSheetsBySurvivor = {}
    SurvivorSheet.survivorSheetsByObject = {}
    for _, survivorSheetSaveState in ipairs(saveState) do
        local survivor = Survivor.ForId(survivorSheetSaveState.survivorId)
        if not survivor then
            return log:Errorf("Survivor sheet %s was saved with non-existant survivor %d", survivorSheetSaveState.survivorSheetGuid, survivorSheetSaveState.survivorId)
        end

        local object = getObjectFromGUID(survivorSheetSaveState.objectGuid)
        if not object then
            return log:Errorf("Survivor %d had saved survivor sheet GUID %s, but that object doesn't exist. Try re-spawning this survivor's box from the survivor board.", survivor:Id(), survivorSheetSaveState.objectGuid)
        end

        local survivorSheet = SurvivorSheet.Create(survivor, object)
    end
end

---------------------------------------------------------------------------------------------------

function SurvivorSheet.Save()
    local saveState = {}
    for _, survivorSheet in pairs(SurvivorSheet.survivorSheetsBySurvivor) do
        table.insert(saveState, {
            survivorId = survivorSheet:Survivor():Id(),
            objectGuid = survivorSheet:Object().getGUID(),
        })
    end
    return saveState
end

---------------------------------------------------------------------------------------------------

function SurvivorSheet.Import(saveState)
    for object, _ in pairs(SurvivorSheet.survivorSheetsByObject) do
        object.destruct()
    end

    SurvivorSheet.InitSaveState(saveState)
end

---------------------------------------------------------------------------------------------------

function SurvivorSheet.Export()
end

---------------------------------------------------------------------------------------------------

function SurvivorSheet.Create(survivor, object)
    log:Debugf("Creating survivor sheet for %s and object %s", survivor, object.getGUID())

    local survivorSheet = {
        tag = "Survivor Sheet",
        survivor = survivor,
        object = object,
    }
    setmetatable(survivorSheet, SurvivorSheet)

    SurvivorSheet.survivorSheetsBySurvivor[survivor] = survivorSheet
    SurvivorSheet.survivorSheetsByObject[object] = survivorSheet

    local ui = Ui.Create3d("survivorSheet"..object.getGUID(), survivorSheet.object, 0.11)
    survivorSheet.ui = ui

    survivorSheet.survivalCounter = ui:Counter({ id = "survival", topLeft = { x = 0.711521, y = -0.936434 }, bottomRight = { x = 0.426820, y = -0.659977 }, fontSize = 190, value = survivor:Survival(), onValueChanged = function(delta)
        survivorSheet.survivor:SetSurvival(survivorSheet.survivor:Survival() + delta)
    end })

    survivorSheet.insanityCounter = ui:Counter({ id = "insanity", topLeft = { x = -0.430935, y = -0.938893 }, bottomRight = { x = -0.709772, y = -0.663436 }, fontSize = 190, value = survivor:Insanity(), onValueChanged = function(delta)
        survivorSheet.survivor:SetInsanity(survivorSheet.survivor:Insanity() + delta)
    end })

    for stat, data in pairs({
        ["movement"] = { topLeft = { x =  0.340122, y = -0.938595 }, bottomRight = { x =  0.140848, y = -0.748847 } },
        ["speed"]    = { topLeft = { x =  0.096356, y = -0.938595 }, bottomRight = { x = -0.094326, y = -0.748847 } },
        ["accuracy"] = { topLeft = { x = -0.146921, y = -0.938595 }, bottomRight = { x = -0.340642, y = -0.748847 } },
        ["strength"] = { topLeft = { x =  0.340122, y = -0.628745 }, bottomRight = { x =  0.140848, y = -0.438532 } },
        ["evasion"]  = { topLeft = { x =  0.096356, y = -0.628745 }, bottomRight = { x = -0.094326, y = -0.438532 } },
        ["luck"]    = { topLeft = { x =  -0.146921, y = -0.628745 }, bottomRight = { x = -0.340642, y = -0.438532 } },
    }) do
        survivorSheet[stat.."ModifiedCounter"] = ui:Counter({ id = stat, topLeft = data.topLeft, bottomRight = data.bottomRight, fontSize = 130, value = survivor["Modified"..Util.Capitalize(stat)](survivor), onValueChanged = function(delta)
            local capStat = Util.Capitalize(stat)
            survivorSheet.survivor["Set"..capStat](survivorSheet.survivor, survivorSheet.survivor[stat] + delta)
        end })
    end

    survivorSheet.markerButton = ui:Button({ id = "marker", topLeft = { x = 0.711521, y = -0.535331 }, bottomRight = { x = 0.426820, y = -0.366424 }, image = survivor.marker or SurvivorSheet.MARKER_EMPTY, onClick = function(button)
        local value = survivorSheet.survivor:Marker() or SurvivorSheet.MARKER_EMPTY
        if button == Ui.LEFT_MOUSE_BUTTON then
            value = SurvivorSheet.NEXT_MARKER[value]
        else
            value = SurvivorSheet.PREV_MARKER[value]
        end
        survivorSheet.survivor:SetMarker(value)
    end })

    survivorSheet.brainInjuryCheckBox = ui:CheckBox({ id = "brainInjury", topLeft = { x = -0.520929, y = -0.527068 }, bottomRight = { x = -0.628231, y = -0.419554 }, checked = survivor.brainInjury, onClick = function()
        local value = survivorSheet.survivor:BrainInjury()
        survivorSheet.survivor:SetBrainInjury(not value)
    end })

    survivorSheet.nameInput = ui:Input({ id = "name", topLeft = { x = 0.532309, y = -0.344423 }, bottomRight = { x = -0.713491, y = -0.238286 }, fontSize = 60, text = survivor:NameOrUnnamed(), onValueChanged = function(value)
        survivorSheet.survivor:SetName(value)
    end })

    local smallCheckBoxSize = 0.055
    local bigCheckBoxSize = 0.0623

    for stat, topLeft in pairs({
        ["male"] = { x = 0.714648, y = -0.203562 },
        ["female"] = { x = 0.570787, y = -0.203562 },
        ["reroll"] = { x = 0.438556, y = -0.203562 },
        ["skipNextHunt"] = { x = 0.145875, y = -0.203562 },
        ["retired"] = { x = -0.227551, y = -0.203562 },
        ["dead"] = { x = -0.484378, y = -0.203562 },
    }) do
        survivorSheet[stat.."CheckBox"] = ui:CheckBox({ id = stat, topLeft = topLeft, bottomRight = { x = topLeft.x - smallCheckBoxSize, y = topLeft.y + smallCheckBoxSize }, checked = survivor[stat], onClick = function()
            survivorSheet.survivor["Set"..Util.Capitalize(stat)](survivorSheet.survivor, not survivorSheet.survivor[stat])
        end })
    end

    for stat, seq in pairs({
        ["huntXp"] = {
            { topLeft = { x = 0.453219, y = -0.068927 }, big = false },
            { topLeft = { x = 0.382765, y = -0.073718 }, big = true },
            { topLeft = { x = 0.299559, y = -0.068927 }, big = false },
            { topLeft = { x = 0.230707, y = -0.068927 }, big = false },
            { topLeft = { x = 0.160401, y = -0.068927 }, big = false },
            { topLeft = { x = 0.091089, y = -0.073718 }, big = true },
            { topLeft = { x = 0.005319, y = -0.068927 }, big = false },
            { topLeft = { x = -0.061338, y = -0.068927 }, big = false },
            { topLeft = { x = -0.132377, y = -0.068927 }, big = false },
            { topLeft = { x = -0.202206, y = -0.073718 }, big = true },
            { topLeft = { x = -0.287922, y = -0.068927 }, big = false },
            { topLeft = { x = -0.356490, y = -0.068927 }, big = false },
            { topLeft = { x = -0.421105, y = -0.068927 }, big = false },
            { topLeft = { x = -0.489654, y = -0.068927 }, big = false },
            { topLeft = { x = -0.559425, y = -0.073718 }, big = true },
            { topLeft = { x = -0.646168, y = -0.073718 }, big = true },
        },
        ["courage"] = {
            { topLeft = { x = 0.710780, y = 0.150083 }, big = false },
            { topLeft = { x = 0.640421, y = 0.150083 }, big = false },
            { topLeft = { x = 0.570907, y = 0.146450 }, big = true },
            { topLeft = { x = 0.490000, y = 0.150083 }, big = false },
            { topLeft = { x = 0.420000, y = 0.150083 }, big = false },
            { topLeft = { x = 0.353000, y = 0.150083 }, big = false },
            { topLeft = { x = 0.285000, y = 0.150083 }, big = false },
            { topLeft = { x = 0.213460, y = 0.150083 }, big = false },
            { topLeft = { x = 0.142766, y = 0.146450 }, big = true },
        },
        ["understanding"] = {
            { topLeft = { x = -0.073370, y = 0.150083 }, big = false },
            { topLeft = { x = -0.145900, y = 0.150083 }, big = false },
            { topLeft = { x = -0.219752, y = 0.146450 }, big = true },
            { topLeft = { x = -0.297472, y = 0.150083 }, big = false },
            { topLeft = { x = -0.366772, y = 0.150083 }, big = false },
            { topLeft = { x = -0.436125, y = 0.150083 }, big = false },
            { topLeft = { x = -0.501339, y = 0.150083 }, big = false },
            { topLeft = { x = -0.572758, y = 0.150083 }, big = false },
            { topLeft = { x = -0.646109, y = 0.146450 }, big = true },
        },
        ["weaponProficiencyRank"] = {
            { topLeft = { x = 0.710780, y = 0.370248 }, big = false },
            { topLeft = { x = 0.640421, y = 0.370248 }, big = false },
            { topLeft = { x = 0.570907, y = 0.364543 }, big = true },
            { topLeft = { x = 0.490000, y = 0.370248 }, big = false },
            { topLeft = { x = 0.420000, y = 0.370248 }, big = false },
            { topLeft = { x = 0.353000, y = 0.370248 }, big = false },
            { topLeft = { x = 0.285000, y = 0.370248 }, big = false },
            { topLeft = { x = 0.210000, y = 0.364543 }, big = true },
        }
    }) do
        local value = survivorSheet.survivor[stat]
        for i, data in ipairs(seq) do
            local bottomRight = { x = data.topLeft.x, y = data.topLeft.y }
            if data.big then
                bottomRight.x = bottomRight.x - bigCheckBoxSize
                bottomRight.y = bottomRight.y + bigCheckBoxSize
            else
                bottomRight.x = bottomRight.x - smallCheckBoxSize
                bottomRight.y = bottomRight.y + smallCheckBoxSize
            end

            local stati = stat..i
            survivorSheet[stati.."CheckBox"] = ui:CheckBox({ id = stati, topLeft = data.topLeft, bottomRight = bottomRight, checked = (value >= i), onClick = function()
                local value = i
                if survivorSheet.survivor[stat] >= i then
                    value = value - 1
                end
                survivorSheet.survivor["Set"..Util.Capitalize(stat)](survivorSheet.survivor, value)
            end })
        end
    end

    survivorSheet.weaponProficiencyTypeInput = ui:Input({ id = "weaponProficiencyType", topLeft = { x = -0.074150, y = 0.357813 }, bottomRight = { x = -0.714426, y = 0.422490 }, fontSize = 40, text = survivor.weaponProficiencyType, onValueChanged = function(value)
        survivorSheet.survivor:SetWeaponProficiencyType(value)
    end })

    for i, data in pairs({
        { topLeft = { x = 0.715, y = 0.558 }, bottomRight = { x = -0.708, y = 0.626 } },
        { topLeft = { x = 0.715, y = 0.650 }, bottomRight = { x = -0.708, y = 0.718 } },
        { topLeft = { x = 0.715, y = 0.736 }, bottomRight = { x = -0.708, y = 0.804 } },
        { topLeft = { x = 0.715, y = 0.825 }, bottomRight = { x = -0.708, y = 0.893 } },
        { topLeft = { x = 0.715, y = 0.913 }, bottomRight = { x = -0.708, y = 0.981 } },
    }) do
        local notesi = "notes"..i
        survivorSheet[notesi.."Input"] = ui:Input({ id = notesi, topLeft = data.topLeft, bottomRight = data.bottomRight, fontSize = 30, text = survivor[notesi], onValueChanged = function(value)
            survivorSheet.survivor["SetNotes"..i](survivorSheet.survivor, value)
        end })
    end

    survivorSheet.object.UI.setCustomAssets(SurvivorSheet.CUSTOM_ASSETS)
    ui:Apply()

    return survivorSheet
end

---------------------------------------------------------------------------------------------------

function SurvivorSheet:__tostring()
    return Util.SafeFormat("SurvivorSheet{survivor=%s,object=%s}", self.survivor:NameOrUnnamed(), self.object.getGUID())
end

---------------------------------------------------------------------------------------------------

function SurvivorSheet:Survivor() return self.survivor end
function SurvivorSheet:Object() return self.object end

---------------------------------------------------------------------------------------------------

function SurvivorSheet:UpdateInputStat(stat, value)
    self[stat.."Input"]:Set(value)
end

function SurvivorSheet:UpdateCheckBoxStat(stat, value)
    self[stat.."CheckBox"]:Set(value)
end

function SurvivorSheet:UpdateCounterStat(stat, value)
    self[stat.."Counter"]:Set(value)
end

function SurvivorSheet:UpdateCheckBoxSequenceStat(stat, value)
    for i = 1, value do
        self[stat..i.."CheckBox"]:Set(true)
    end
    for i = value + 1, SurvivorSheet.CHECKBOX_SEQUENCE_MAXES[stat] do
        self[stat..i.."CheckBox"]:Set(false)
    end
end

SurvivorSheet.statUpdaters = {
    ["name"] = SurvivorSheet.UpdateInputStat,
    ["weaponProficiencyType"] = SurvivorSheet.UpdateInputStat,
    ["notes1"] = SurvivorSheet.UpdateInputStat,
    ["notes2"] = SurvivorSheet.UpdateInputStat,
    ["notes3"] = SurvivorSheet.UpdateInputStat,
    ["notes4"] = SurvivorSheet.UpdateInputStat,
    ["notes5"] = SurvivorSheet.UpdateInputStat,

    ["brainInjury"] = SurvivorSheet.UpdateCheckBoxStat,
    ["male"] = SurvivorSheet.UpdateCheckBoxStat,
    ["female"] = SurvivorSheet.UpdateCheckBoxStat,
    ["reroll"] = SurvivorSheet.UpdateCheckBoxStat,
    ["skipNextHunt"] = SurvivorSheet.UpdateCheckBoxStat,
    ["retired"] = SurvivorSheet.UpdateCheckBoxStat,
    ["dead"] = SurvivorSheet.UpdateCheckBoxStat,

    ["survival"] = SurvivorSheet.UpdateCounterStat,
    ["insanity"] = SurvivorSheet.UpdateCounterStat,
    ["movementModified"] = SurvivorSheet.UpdateCounterStat,
    ["speedModified"] = SurvivorSheet.UpdateCounterStat,
    ["accuracyModified"] = SurvivorSheet.UpdateCounterStat,
    ["strengthModified"] = SurvivorSheet.UpdateCounterStat,
    ["evasionModified"] = SurvivorSheet.UpdateCounterStat,
    ["luckModified"] = SurvivorSheet.UpdateCounterStat,

    ["huntXp"] = SurvivorSheet.UpdateCheckBoxSequenceStat,
    ["courage"] = SurvivorSheet.UpdateCheckBoxSequenceStat,
    ["understanding"] = SurvivorSheet.UpdateCheckBoxSequenceStat,
    ["weaponProficiencyRank"] = SurvivorSheet.UpdateCheckBoxSequenceStat,

    ["marker"] = function(survivorSheet, _, value)
        survivorSheet.markerButton:SetImage(value or SurvivorSheet.MARKER_EMPTY)
    end,
}

---------------------------------------------------------------------------------------------------

return {
    Is = SurvivorSheet.Is,
    Init = SurvivorSheet.Init,
    Import = SurvivorSheet.Import,
    Export = SurvivorSheet.Export,
    Save = SurvivorSheet.Save,
    Create = SurvivorSheet.Create,
    ForSurvivor = function(survivor) return SurvivorSheet.survivorSheetsBySurvivor[survivor] end,
    ForObject = function(object) return SurvivorSheet.survivorSheetsByObject[object] end,
}
